{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nodecg-io","text":"<p>nodecg-io is a NodeCG-bundle that implements Social Media API's in the NodeCG framework</p>"},{"location":"#about-nodecg-io","title":"About nodecg-io","text":"<p>nodecg-io is the successor of ChatOverflow. The aim of this bundle is to simplify the code and expand the number of integrated services. The main goal is to increase the number of supported APIs to save you development time.</p>"},{"location":"#how-to-use-nodecg-io","title":"How to use nodecg-io","text":"<p>If you want to use nodecg-io, you should note that it is only a framework for your bundle. So you need at least a basic knowledge of the programming language JavaScript or any other language that compiles to JavaScript like TypeScript. If that's no problem you can head over to the installation guide and take a look at the available nodecg-io services.</p>"},{"location":"#implemented-services-and-interfaces","title":"Implemented Services and Interfaces","text":"<ul> <li>AutoHotkey</li> <li>Android (using adb)</li> <li>Art-Net</li> <li>Atem</li> <li>DBus</li> <li>Discord</li> <li>Discord RPC</li> <li>Elgato lights</li> <li>GitHub</li> <li>Google APIs</li> <li>Google Cast</li> <li>IntelliJ IDEs</li> <li>IRC (Internet Relay Chat)</li> <li>MIDI Input</li> <li>MIDI Output</li> <li>MQTT</li> <li>Nanoleafs</li> <li>OBS</li> <li>OpenTTS</li> <li>Philips Hue</li> <li>RCON</li> <li>Reddit</li> <li>sACN Receiver</li> <li>sACN Sender</li> <li>Serial Port (Arduino)</li> <li>Shlink</li> <li>Slack Web API</li> <li>Spotify</li> <li>SQL (using knex)</li> <li>Elgato Stream Deck</li> <li>StreamElements</li> <li>Telegram</li> <li>TIANE</li> <li>Twitch Add-ons</li> <li>Twitch API</li> <li>Twitch Chat</li> <li>Twitch PubSub</li> <li>Twitter</li> <li>WebSocket Client</li> <li>WebSocket Server</li> <li>Xdotool</li> </ul>"},{"location":"#how-to-contribute","title":"How to contribute","text":"<p>If you want to contribute to this bundle you can implement one of those services or fix an issue. Before contributing head over to the \u201cHow to contribute\u201d-Guide.</p>"},{"location":"dependencies/","title":"Dependency Graph","text":""},{"location":"dependencies/#dependency-graph","title":"Dependency Graph","text":"<p>\u00abcore\u00bbnodecg-io-core\u00ablib\u00bbajv\u00ablib\u00bbcrypto-js\u00ablib\u00bbtslib\u00abservice\u00bbnodecg-io-ahk\u00ablib\u00bbnode-fetch\u00abservice\u00bbnodecg-io-android\u00ablib\u00bb@rauschma/stringio\u00ablib\u00bbget-stream\u00abservice\u00bbnodecg-io-artnet\u00ablib\u00bbartnet-protocol\u00abservice\u00bbnodecg-io-atem\u00ablib\u00bbatem-connection\u00abservice\u00bbnodecg-io-dbus\u00ablib\u00bbdbus-next\u00abservice\u00bbnodecg-io-debug\u00abservice\u00bbnodecg-io-discord\u00ablib\u00bbdiscord.js\u00abservice\u00bbnodecg-io-discord-rpc\u00ablib\u00bbdiscord-rpc\u00ablib\u00bb@types/discord-rpc\u00abservice\u00bbnodecg-io-elgato-light\u00ablib\u00bb@types/node-fetch\u00abservice\u00bbnodecg-io-github\u00ablib\u00bb@octokit/rest\u00abservice\u00bbnodecg-io-google-cast\u00ablib\u00bbchromecast-api\u00abservice\u00bbnodecg-io-googleapis\u00ablib\u00bbgoogleapis\u00ablib\u00bbopen\u00abservice\u00bbnodecg-io-intellij\u00abservice\u00bbnodecg-io-irc\u00ablib\u00bb@types/irc\u00ablib\u00bbirc\u00abservice\u00bbnodecg-io-midi-input\u00ablib\u00bbeasymidi\u00abservice\u00bbnodecg-io-midi-output\u00abservice\u00bbnodecg-io-mqtt-client\u00ablib\u00bbmqtt\u00abservice\u00bbnodecg-io-nanoleaf\u00abservice\u00bbnodecg-io-obs\u00ablib\u00bbobs-websocket-js\u00abservice\u00bbnodecg-io-opentts\u00abservice\u00bbnodecg-io-philipshue\u00ablib\u00bbis-ip\u00ablib\u00bbnode-hue-api\u00abservice\u00bbnodecg-io-rcon\u00ablib\u00bbrcon-client\u00abservice\u00bbnodecg-io-reddit\u00ablib\u00bbreddit-ts\u00abservice\u00bbnodecg-io-sacn-receiver\u00ablib\u00bbsacn\u00abservice\u00bbnodecg-io-sacn-sender\u00abservice\u00bbnodecg-io-serial\u00ablib\u00bb@serialport/parser-readline\u00ablib\u00bb@types/serialport\u00ablib\u00bbserialport\u00abservice\u00bbnodecg-io-shlink\u00ablib\u00bbshlink-client\u00abservice\u00bbnodecg-io-slack\u00ablib\u00bb@slack/web-api\u00abservice\u00bbnodecg-io-spotify\u00ablib\u00bb@types/spotify-web-api-node\u00ablib\u00bbspotify-web-api-node\u00abservice\u00bbnodecg-io-sql\u00ablib\u00bbknex\u00abservice\u00bbnodecg-io-streamdeck\u00ablib\u00bb@elgato-stream-deck/node\u00abservice\u00bbnodecg-io-streamelements\u00ablib\u00bb@types/socket.io-client\u00ablib\u00bbsocket.io-client\u00abservice\u00bbnodecg-io-telegram\u00ablib\u00bb@types/node-telegram-bot-api\u00ablib\u00bbnode-telegram-bot-api\u00abservice\u00bbnodecg-io-template\u00abservice\u00bbnodecg-io-tiane\u00ablib\u00bbws\u00abservice\u00bbnodecg-io-twitch-addons\u00ablib\u00bbnodecg-io-twitch-auth\u00abservice\u00bbnodecg-io-twitch-api\u00ablib\u00bb@twurple/api\u00abservice\u00bbnodecg-io-twitch-chat\u00ablib\u00bb@twurple/chat\u00abservice\u00bbnodecg-io-twitch-pubsub\u00ablib\u00bb@twurple/pubsub\u00abservice\u00bbnodecg-io-twitter\u00ablib\u00bb@types/twitter\u00ablib\u00bbtwitter\u00abservice\u00bbnodecg-io-websocket-client\u00ablib\u00bb@types/ws\u00abservice\u00bbnodecg-io-websocket-server\u00abservice\u00bbnodecg-io-xdotool</p>"},{"location":"services/","title":"Available services","text":""},{"location":"services/#available-nodecg-io-services","title":"Available nodecg-io services","text":""},{"location":"services/#nodecg-io-core","title":"nodecg-io-core","text":"<p>The core of nodecg-io. Connects everything up.</p> <p>Depends on ajv @ ^8.12.0  Depends on crypto-js @ ^4.1.1  Depends on tslib @ ^2.6.0 </p>"},{"location":"services/#nodecg-io-ahk","title":"nodecg-io-ahk","text":"<p>Allows you to send commands to AutoHotkey.</p> <p>See the sample implementation</p> <p>Depends on node-fetch @ ^2.6.12  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-android","title":"nodecg-io-android","text":"<p>Allows to connect to an android device via adb.</p> <p>See the sample implementation</p> <p>Depends on @rauschma/stringio @ ^1.4.0  Depends on get-stream @ ^6.0.1  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-artnet","title":"nodecg-io-artnet","text":"<p>Allows you to send DMX512 data over Art-Net\u2122 to to Art-Net nodes i.e. professional lighting fixtures.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on artnet-protocol @ ^0.2.1 </p>"},{"location":"services/#nodecg-io-atem","title":"nodecg-io-atem","text":"<p>Allows to connect via the Atem Protocol.</p> <p>See the sample implementation</p> <p>Depends on atem-connection @ ^3.2.0  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-dbus","title":"nodecg-io-dbus","text":"<p>Allows to interface with DBus</p> <p>There's no sample implementation for this service yet.</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on dbus-next @ ^0.10.2 </p>"},{"location":"services/#nodecg-io-debug","title":"nodecg-io-debug","text":"<p>Debug helper service that helps to easily trigger your code for debugging purposes.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-discord","title":"nodecg-io-discord","text":"<p>Allows to connect to discord via a discord-bot.</p> <p>See the sample implementation</p> <p>Depends on discord.js @ ^14.11.0  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-discord-rpc","title":"nodecg-io-discord-rpc","text":"<p>Allows to interface with a locally running discord client via RPC</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on discord-rpc @ ^4.0.1  Depends on @types/discord-rpc @ ^4.0.5  Depends on node-fetch @ ^2.6.12 </p>"},{"location":"services/#nodecg-io-elgato-light","title":"nodecg-io-elgato-light","text":"<p>Control your Elgato lights, e.g. key lights and light stripes.</p> <p>See the sample implementation</p> <p>Depends on @types/node-fetch @ ^2.6.4  Depends on node-fetch @ ^2.6.12  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-github","title":"nodecg-io-github","text":"<p>Allows to connect to the GitHub REST API</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on @octokit/rest @ ^19.0.13 </p>"},{"location":"services/#nodecg-io-google-cast","title":"nodecg-io-google-cast","text":"<p>Allows playing media on Google Cast devices.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on chromecast-api @ ^0.4.0 </p>"},{"location":"services/#nodecg-io-googleapis","title":"nodecg-io-googleapis","text":"<p>Allows to connect to and interact with many google-apis</p> <p>There's no sample implementation for this service yet.</p> <p>Depends on googleapis @ ^120.0.0  Depends on nodecg-io-core @ ^0.3.0  Depends on open @ ^8.4.0 </p>"},{"location":"services/#nodecg-io-intellij","title":"nodecg-io-intellij","text":"<p>Allows to control JetBrains IDEs via nodecg-io</p> <p>See the sample implementation</p> <p>Depends on node-fetch @ ^2.6.12  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-irc","title":"nodecg-io-irc","text":"<p>Allow to connect to IRC Servers.</p> <p>See the sample implementation</p> <p>Depends on @types/irc @ ^0.5.1  Depends on irc @ ^0.5.2  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-midi-input","title":"nodecg-io-midi-input","text":"<p>Connect to MIDI devices and control the volume of your voice or music with a fader.</p> <p>See the sample implementation</p> <p>Depends on easymidi @ ^3.0.1  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-midi-output","title":"nodecg-io-midi-output","text":"<p>Connect to MIDI devices and control the volume of your voice or music with a fader.</p> <p>See the sample implementation</p> <p>Depends on easymidi @ ^3.0.1  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-mqtt-client","title":"nodecg-io-mqtt-client","text":"<p>Allows you to connect with an MQTT server.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on mqtt @ ^4.3.7 </p>"},{"location":"services/#nodecg-io-nanoleaf","title":"nodecg-io-nanoleaf","text":"<p>Allows to connect to a nanoleaf controller and trigger custom lighting effects.</p> <p>See the sample implementation</p> <p>Depends on @types/node-fetch @ ^2.6.4  Depends on node-fetch @ ^2.6.12  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-obs","title":"nodecg-io-obs","text":"<p>Allows to control your obs instance to e.g. switch scenes.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on obs-websocket-js @ ^5.0.3 </p>"},{"location":"services/#nodecg-io-opentts","title":"nodecg-io-opentts","text":"<p>Allows generating audio for text using an OpenTTS instance.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on node-fetch @ ^2.6.12 </p>"},{"location":"services/#nodecg-io-philipshue","title":"nodecg-io-philipshue","text":"<p>Allows you to connect with your Philips Hue bridge. This allows you to control your lights etc.</p> <p>See the sample implementation</p> <p>Depends on is-ip @ ^3.1.0  Depends on node-hue-api @ ^4.0.11  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-rcon","title":"nodecg-io-rcon","text":"<p>Allows you to send commands to a minecraft server via RCON.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on rcon-client @ ^4.2.3 </p>"},{"location":"services/#nodecg-io-reddit","title":"nodecg-io-reddit","text":"<p>Provides an interface to the Reddit-API.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on reddit-ts @ https://github.com/noeppi-noeppi/npm-reddit-ts.git#build </p>"},{"location":"services/#nodecg-io-sacn-receiver","title":"nodecg-io-sacn-receiver","text":"<p>Allows you to receive data via sACN from e.g professional lighting consoles.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on sacn @ ^4.3.0 </p>"},{"location":"services/#nodecg-io-sacn-sender","title":"nodecg-io-sacn-sender","text":"<p>Allows you to send data via sACN to e.g professional lights.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on sacn @ ^4.3.0 </p>"},{"location":"services/#nodecg-io-serial","title":"nodecg-io-serial","text":"<p>Exposes serial deivces to nodecg-io</p> <p>See the sample implementation</p> <p>Depends on @serialport/parser-readline @ ^11.0.0  Depends on @types/serialport @ ^8.0.2  Depends on nodecg-io-core @ ^0.3.0  Depends on serialport @ ^11.0.0 </p>"},{"location":"services/#nodecg-io-shlink","title":"nodecg-io-shlink","text":"<p>Allows you to create Shlink short links</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on shlink-client @ ^1.0.1 </p>"},{"location":"services/#nodecg-io-slack","title":"nodecg-io-slack","text":"<p>Allows to connect to your slack. This enables you to e.g. send messages and list all channel. Visit https://api.slack.com/methods to see all methods </p> <p>See the sample implementation</p> <p>Depends on @slack/web-api @ ^6.8.1  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-spotify","title":"nodecg-io-spotify","text":"<p>Allows to connect to your personal Spotify account. This enables you to e.g. control music playback or get current song information. </p> <p>See the sample implementation</p> <p>Depends on @types/spotify-web-api-node @ ^5.0.7  Depends on nodecg-io-core @ ^0.3.0  Depends on open @ ^8.4.0  Depends on spotify-web-api-node @ ^5.0.2 </p>"},{"location":"services/#nodecg-io-sql","title":"nodecg-io-sql","text":"<p>SQL service based on knex.js. Different clients like mysql are supported but have to be installed separately.</p> <p>See the sample implementation</p> <p>Depends on knex @ ^2.4.2  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-streamdeck","title":"nodecg-io-streamdeck","text":"<p>Allows to interface with the elgato streamdeck.</p> <p>See the sample implementation</p> <p>Depends on @elgato-stream-deck/node @ ^5.7.2  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-streamelements","title":"nodecg-io-streamelements","text":"<p>Allows to connect to streamelements to e.g. react to donations.</p> <p>See the sample implementation</p> <p>Depends on @types/socket.io-client @ ^1.4.36  Depends on nodecg-io-core @ ^0.3.0  Depends on socket.io-client @ ^2.4.0 </p>"},{"location":"services/#nodecg-io-telegram","title":"nodecg-io-telegram","text":"<p>Allows you to control a telegram bot.</p> <p>See the sample implementation</p> <p>Depends on @types/node-telegram-bot-api @ ^0.61.6  Depends on node-telegram-bot-api @ ^0.61.0  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-template","title":"nodecg-io-template","text":"<p>Template package.</p> <p>There's no sample implementation for this service yet.</p> <p>Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-tiane","title":"nodecg-io-tiane","text":"<p>Connect to TIANE and make her for example a discord bot. https://github.com/FerdiKr/TIANE</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on ws @ ^8.12.1 </p>"},{"location":"services/#nodecg-io-twitch-addons","title":"nodecg-io-twitch-addons","text":"<p>Support for the API's of BetterTTV and FrankerFaceZ</p> <p>See the sample implementation</p> <p>Depends on node-fetch @ ^2.6.12  Depends on nodecg-io-core @ ^0.3.0  Depends on nodecg-io-twitch-auth @ ^0.3.0 </p>"},{"location":"services/#nodecg-io-twitch-api","title":"nodecg-io-twitch-api","text":"<p>Allows talking to twitch APIs like helix.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on nodecg-io-twitch-auth @ ^0.3.0  Depends on @twurple/api @ ^5.3.4 </p>"},{"location":"services/#nodecg-io-twitch-chat","title":"nodecg-io-twitch-chat","text":"<p>Allows to connect to the twitch chat with your account, send and receive messages and much more. It can be used to create Twitch-Bots.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on nodecg-io-twitch-auth @ ^0.3.0  Depends on @twurple/chat @ ^5.3.4 </p>"},{"location":"services/#nodecg-io-twitch-pubsub","title":"nodecg-io-twitch-pubsub","text":"<p>Allows access to the Twitch PubSub API.</p> <p>See the sample implementation</p> <p>Depends on nodecg-io-core @ ^0.3.0  Depends on nodecg-io-twitch-auth @ ^0.3.0  Depends on @twurple/api @ ^5.3.4  Depends on @twurple/pubsub @ ^5.3.4 </p>"},{"location":"services/#nodecg-io-twitter","title":"nodecg-io-twitter","text":"<p>Allows to connect to twitter, send, retweet or like messages.</p> <p>See the sample implementation</p> <p>Depends on @types/twitter @ ^1.7.1  Depends on nodecg-io-core @ ^0.3.0  Depends on twitter @ ^1.7.1 </p>"},{"location":"services/#nodecg-io-websocket-client","title":"nodecg-io-websocket-client","text":"<p>Allows to connect to a external WebSocket server.</p> <p>See the sample implementation</p> <p>Depends on @types/ws @ ^8.5.5  Depends on nodecg-io-core @ ^0.3.0  Depends on ws @ ^8.12.1 </p>"},{"location":"services/#nodecg-io-websocket-server","title":"nodecg-io-websocket-server","text":"<p>Allows to create a custom WebSocket server.</p> <p>See the sample implementation</p> <p>Depends on @types/ws @ ^8.5.5  Depends on nodecg-io-core @ ^0.3.0  Depends on ws @ ^8.12.1 </p>"},{"location":"services/#nodecg-io-xdotool","title":"nodecg-io-xdotool","text":"<p>Allows you to send commands to xdotool.</p> <p>See the sample implementation</p> <p>Depends on @rauschma/stringio @ ^1.4.0  Depends on node-fetch @ ^2.6.12  Depends on nodecg-io-core @ ^0.3.0 </p>"},{"location":"contribute/contribute/","title":"How to contribute","text":"<p>There are many ways to contribute to nodecg-io: logging bugs, submitting pull requests, reporting issues, and creating suggestions. You can also contribute to this documentation.</p> <p>First you'll need an installation of nodecg-io. Please refer to the installation guide and create a development installation. The CLI asks you whether you want to clone the documentation. It's highly recommended that you do that and update the documentation as you add new services or features. To be able to create Pull Requests you should fork the corresponding repositories and add them as a remote (update URL for e.g., documentation repository):</p> <pre><code>git remote add fork https://github.com/[YOUR_USERNAME]/nodecg-io.git\n</code></pre> <p>Then you can create a new branch, do your changes, create commits and publish the branch to your fork using the following command:</p> <pre><code>git push fork my-branch\n</code></pre>"},{"location":"contribute/contribute/#build","title":"Build","text":""},{"location":"contribute/contribute/#vs-code","title":"VS Code","text":"<p>In Visual Studio Code you can start the build task with Ctrl + Shift + B (CMD + Shift + B on macOS). The incremental builder will do an initial full build. The watch builder will watch for file changes and compile those changes incrementally, giving you a fast, iterative coding experience. It will even stay running in the background if you close VS Code. You can resume it by starting the build task with Ctrl + Shift + B (CMD + Shift + B) again. You can kill the build task by pressing Ctrl + D in the task terminal (CMD + D) on macOS. Errors and warnings will be shown in the status bar at the bottom left of the editor. You can view the error list using <code>View | Errors and Warnings</code> or pressing Ctrl + P and then ! (or CMD + P and ! on macOS).</p>"},{"location":"contribute/contribute/#terminal","title":"Terminal","text":"<p>You can also use you terminal to build nodecg-io:</p> <pre><code>cd path/to/nodecg-io\nnpm run build\n</code></pre> <p>To do a full rebuild instead of just an incremental build you can use <code>npm run rebuild</code>.</p> <p>The watch builder can be activated here too:</p> <pre><code>cd path/to/nodecg-io\nnpm run watch\n</code></pre>"},{"location":"contribute/contribute/#run","title":"Run","text":"<p>To test the changes you simply need to start/restart NodeCG.</p>"},{"location":"contribute/contribute/#adding-dependencies-to-packages","title":"Adding dependencies to packages","text":"<p>This project uses npm workspaces to manage our monorepo, and most importantly link all our packages together. Because of linking you should not use <code>npm install xyz --save</code> to add dependencies because npm can't get the development version of internal packages like <code>nodecg-io-core</code>. Doing so will result in an error and break the link. Instead, you should edit the <code>package.json</code> directly using a text editor and the run <code>npm install</code> in the repository root.</p>"},{"location":"contribute/contribute/#open-a-pull-request","title":"Open a Pull Request","text":"<p>Once you have implemented your feature or fixed a bug push it to your fork and start a Pull Request.</p>"},{"location":"contribute/contribute/#merge-upstream-changes","title":"Merge Upstream Changes","text":"<p>Occasionally you will want to merge changes in the upstream repository (the official code repo) with your fork.</p> <pre><code>cd path/to/nodecg-io\ngit checkout main\ngit pull https://github.com/codeoverflow-org/nodecg-io main\n</code></pre> <p>Manage any merge conflicts, commit them, and then push them to your fork.</p> <p>You may also occasionally need to merge upstream main in a pull request. To do that make the above to update your local main branch, and then merge your local main branch into your PR branch.</p>"},{"location":"contribute/contribute/#where-to-contribute","title":"Where to Contribute","text":"<p>After cloning and building the repo, check out the issues list. Issues labelled help wanted are good issues to submit a PR for. Issues labelled good first issue are great candidates to pick up if you are in the code for the first time. If you are contributing significant changes, please discuss with the assignee of the issue first before starting to work on the issue. You may also contribute to this documentation.</p>"},{"location":"contribute/contribute/#suggestions","title":"Suggestions","text":"<p>We're also interested in your feedback. You can submit a suggestion or feature request through the issue tracker. To make this process more effective, we're asking that these include more information to help define them more clearly.</p>"},{"location":"contribute/contribute/#discussion-etiquette","title":"Discussion Etiquette","text":"<p>In order to keep the conversation clear and transparent, please limit discussion to English and keep things on topic with the issue. Be considerate to others and try to be courteous and professional at all times.</p>"},{"location":"contribute/contributors/","title":"Contributors","text":""},{"location":"contribute/contributors/#top-30-nodecg-io-contributors","title":"Top 30 nodecg-io contributors","text":""},{"location":"contribute/create_sample/","title":"Create a sample bundle","text":"<p>A sample should have the same name as the service, but it may include a short description in the name after the service name as well. E.g. <code>twitch-chat</code> or <code>obs-scenelist</code>.</p> <p>Create a folder in <code>samples</code> named after the sample and add a <code>package.json</code> and a <code>tsconfig.json</code>:</p> package.jsontsconfig.json <pre><code>{\n\"name\": \"&lt;the sample name&gt;\",\n\"private\": true,\n\"version\": \"0.2.0\",\n\"nodecg\": {\n\"compatibleRange\": \"^1.1.1\",\n\"bundleDependencies\": {\n\"nodecg-io-&lt;the service name&gt;\": \"^0.2.0\"\n}\n},\n\"scripts\": {\n\"build\": \"tsc -b\",\n\"watch\": \"tsc -b -w\",\n\"clean\": \"tsc -b --clean\"\n},\n\"license\": \"MIT\",\n\"dependencies\": {\n\"nodecg-io-&lt;the service name&gt;\": \"^0.2.0\",\n\"nodecg-io-core\": \"^0.2.0\",\n\"@types/node\": \"^15.0.2\",\n\"nodecg-types\": \"^1.8.2\",\n\"typescript\": \"^4.2.4\"\n}\n}\n</code></pre> <pre><code>{\n\"extends\": \"../../tsconfig.common.json\",\n\"references\": [\n{\n\"path\": \"../../nodecg-io-core\"\n},\n{\n\"path\": \"../../services/nodecg-io-&lt;the service name&gt;\"\n}\n]\n}\n</code></pre> <p>Now you can create a file called <code>extension/index.ts</code>. Here's a template. Make sure you replace all the comments with your own code.</p> index.ts <pre><code>import { NodeCG } from \"nodecg-types/types/server\";\nimport { requireService } from \"nodecg-io-core\";\nimport { TheServicesExportedClient } from \"nodecg-io-&lt;the services  name&gt;\";\n\nmodule.exports = function (nodecg: NodeCG) {\nnodecg.log.info(\"Sample bundle for &lt;the-service-name&gt; started\");\n\nconst service = requireService&lt;TheServicesExportedClient&gt;(\nnodecg,\n\"&lt;the-service-name&gt;\"\n);\nservice?.onAvailable((client) =&gt; {\nnodecg.log.info(\"&lt;the-service-name&gt; client has been updated.\");\n\n// TODO do something with the client to demonstrate the functionality.\n});\n\nservice?.onUnavailable(() =&gt;\nnodecg.log.info(\"&lt;the-service-name&gt; client has been unset.\")\n);\n};\n</code></pre>"},{"location":"contribute/create_sample/#next-steps","title":"Next steps","text":"<p>You could add documentation for the sample bundle.</p>"},{"location":"contribute/create_service/","title":"Create a service integration","text":"<p>This guide helps you to create a service integration such as twitch-chat or discord</p>"},{"location":"contribute/create_service/#find-a-javascript-library","title":"Find a JavaScript library","text":"<p>Go to npmjs.com and look whether there's already a package that wraps around the API of your service. If there's no such package, you need to create one yourself. This is not described here. You may read the \u201cContributing packages to the registry\u201d from the npm Docs.</p>"},{"location":"contribute/create_service/#create-the-service-files","title":"Create the service files","text":"<p>To create the service you can either use a premade Python 3 script in <code>.scripts/create-service.py</code>, or create the files manually.</p>"},{"location":"contribute/create_service/#using-the-script-recommended","title":"Using the script (recommended)","text":"<p>What this script does:</p> <ul> <li>It creates all required files for a new nodecg-io service</li> <li>It copies version and dependency information (e.g., for typescript) from     <code>noodecg-io-template</code></li> </ul> <p>It'll also create a sample and the files for the docs Requirements:</p> <ul> <li><code>python3</code> in your <code>$PATH</code> (see     install page)</li> <li>executed from root of nodecg-io repo</li> </ul> <p>The script waits for your input for each of those fields:</p> <pre><code>$ python3 .scripts/create-service.py\nService name: &lt;name here&gt;\nShort description: &lt;description here&gt;\nAuthor name: &lt;author here&gt;\nAuthor url: &lt;url here&gt;\nSample name: &lt;name here&gt;\n</code></pre> <p>Info</p> <p>Now the script will rebuild your environment.</p>"},{"location":"contribute/create_service/#create-the-files-manually","title":"Create the files manually","text":"<p>Note</p> <p>From here you will have to replace:</p> <ul> <li><code>YourServiceName</code> to your service's name in PascalCase.</li> <li><code>yourServiceName</code> to your service's name in carmelCase.</li> <li><code>your-service-name</code> to your service's name with only lowercase and     hyphens (<code>-</code>) for example: <code>ws-server</code>.</li> </ul> <p>Now you need to create a package. You should call it <code>nodecg-io-your-service-name</code>.</p> <p>First create a directory with that name in <code>/services/</code> and put file called <code>package.json</code> into it.</p> <p>Put the following into it:</p> package.json <pre><code>{\n\"name\": \"nodecg-io-&lt;your-service-name&gt;\",\n\"version\": \"0.2.0\",\n\"description\": \"&lt;Short description what is possible with your service.&gt;\",\n\"homepage\": \"https://nodecg.io/RELEASE/samples/&lt;your-service-name&gt;\",\n\"author\": {\n\"name\": \"&lt;Your name&gt;\",\n\"url\": \"&lt;Your github profile url&gt;\"\n},\n\"repository\": {\n\"type\": \"git\",\n\"url\": \"https://github.com/codeoverflow-org/nodecg-io.git\",\n\"directory\": \"services/nodecg-io-&lt;your-service-name&gt;\"\n},\n\"files\": [\"**/*.js\", \"**/*.js.map\", \"**/*.d.ts\", \"*.json\"],\n\"main\": \"extension\",\n\"scripts\": {},\n\"keywords\": [\"nodecg-io\", \"nodecg-bundle\"],\n\"nodecg\": {\n\"compatibleRange\": \"^1.1.1\",\n\"bundleDependencies\": {\n\"nodecg-io-core\": \"^0.2.0\"\n}\n},\n\"license\": \"MIT\",\n\"devDependencies\": {\n\"@types/node\": \"^15.0.2\",\n\"nodecg-types\": \"^1.8.2\",\n\"typescript\": \"^4.2.4\"\n},\n\"dependencies\": {\n\"nodecg-io-core\": \"^0.2.0\",\n\"&lt;the package you found in step 1&gt;\": \"&lt;the packages version you want to use&gt;\"\n}\n}\n</code></pre> <p>Next you need to put a file called <code>tsconfig.json</code> next to your <code>package.json</code>. The <code>tsconfig.json</code> should look like this:</p> tsconfig.json <pre><code>{\n\"extends\": \"../../tsconfig.common.json\",\n\"references\": [\n{\n\"path\": \"../../nodecg-io-core\"\n}\n]\n}\n</code></pre> <p>Now run <code>npm install</code> in the repository root.</p>"},{"location":"contribute/create_service/#create-a-configuration-schema","title":"Create a configuration schema","text":"<p>Next create a file called <code>your-service-name-schame.json</code>. This is a JSON schema file that indicates how the configuration for your service should be structured. If you need help here take a look at this online resource and the schema-files of the other service implementations.</p>"},{"location":"contribute/create_service/#create-the-service","title":"Create the service","text":"<p>Create a file called <code>index.ts</code> in a folder called <code>extension</code> inside your service's directory. You can then paste the following code and fill in your code instead of the comments.</p> index.ts <pre><code>// TODO: Rename all occurrences of \"YourServiceName\" in PascalCase\n// TODO: Rename all occurrences of \"yourServiceName\" in carmelCase\n// TODO: Rename all occurrences of \"your-service-name\" with only lowercase and hyphens ( - )\n\nimport { NodeCG } from \"nodecg-types/types/server\";\nimport { Result, emptySuccess, success, ServiceBundle } from \"nodecg-io-core\";\n// TODO: Replace the \"fake\" service class with that found on npm etc.\nimport { ServiceClass } from \"./\";\n\ninterface YourServiceNameServiceConfig {\n// TODO Fill in the values from your json schema here. The json\n// schema will load into an instance of this.\n}\n\n// ServiceClient ensures that you will provide a `getNativeClient` function that should give\n// access to the underlying client from the library that you are using.\n// TODO: if you want to provide simplifications for the service then make this\n// type-alias a separate class in a separate file and directly implement those simplifications\n// there.\n// TODO: Replace the `ServiceClass` with the class of the package from step 1\nexport type YourServiceNameServiceClient = ServiceClient&lt;ServiceClass&gt;;\n\nmodule.exports = (nodecg: NodeCG) =&gt; {\nnew YourServiceNameService(\nnodecg,\n\"your-service-name\",\n__dirname,\n\"../your-service-name-schema.json\"\n).register();\n};\n\nclass YourServiceNameService extends ServiceBundle&lt;\nYourServiceNameServiceConfig,\nYourServiceNameServiceClient\n&gt; {\nasync validateConfig(\nconfig: YourServiceNameServiceConfig\n): Promise&lt;Result&lt;void&gt;&gt; {\n// TODO You can validate your config here. If this gets called, the schema is correct.\n// You should for example check whether oauth keys are valid and servers are online here\n// If everything is good return 'emptySuccess()'\n// If an error occurs return 'error(&lt;The error message&gt;)'\n}\n\nasync createClient(\nconfig: YourServiceNameServiceConfig\n): Promise&lt;Result&lt;YourServiceNameServiceClient&gt;&gt; {\n// TODO Here you should return a &lt;Your service name&gt;ServiceClient that is exposed to bundles.\n// Or create a instance of your class if you have any simplifications and return that.\n// If everything is good return 'success(client)'\n// If an error occurs return 'error(&lt;The error message&gt;)'\n}\n\nstopClient(client: YourServiceNameServiceClient): void {\n// Here you should make sure you disconnect everything here (if possible).\n}\n}\n</code></pre> <p>Note</p> <p>Now run <code>npm run build</code> in the repository root, start NodeCG and test your service out.</p>"},{"location":"contribute/create_service/#next-steps","title":"Next steps","text":"<p>You could create a sample bundle for your brand-new service.</p> <p>If you don't do so, make sure you add a placeholder file called <code>&lt;the services name&gt;.md</code> in <code>docs/samples</code> in your fork of the documentation.</p> <p>The file should look like this:</p> the-service-name.md <pre><code>&lt;!-- Marker for build.py that there's no sample bundle. Remove this if you created one --&gt;\n\n## Using the &lt;the services name&gt; sample bundle\n\nNo sample bundle for service `&lt;the services name&gt;`.\n[You can help us and create one!](https://github.com/codeoverflow-org/nodecg-io-docs/blob/main/docs/contribute/docs_sample.md)\n</code></pre> <p>Attention</p> <p>Do not remove the marker in the first line until there is a sample bundle, and it is documented there. Don't forget to add this file to <code>mkdocs.yml</code>.</p>"},{"location":"contribute/docs_markdown/","title":"Markdown","text":"<p>Our special mix of Markdown plugins:</p>"},{"location":"contribute/docs_markdown/#plantuml-markdown","title":"<code>plantuml-markdown</code>","text":"<p>Plant UML diagram</p> MarkdownOutput <pre><code>```plantuml format=\"svg\" alt=\"My super  diagram placeholder\"   width=\"400px\"  height=\"400px\"\ntitle Authentication Sequence\nAlice -&gt;  Bob: calls\nAlice &lt;-- Bob: responds\n```\n</code></pre> <p></p>"},{"location":"contribute/docs_markdown/#codehilite","title":"<code>codehilite</code>","text":"<p>Syntax highlighting in fenced code blocks.</p> <p>Syntax highlighting</p> MarkdownOutput <pre><code>```typescript\nimport { NodeCG } from \"nodecg-types/types/server\";\nmodule.exports = (nodecg: NodeCG) =&gt; {\nnew YourServiceNameService(nodecg, \"your-service-name\", __dirname, \"../your-service-name-schema.json\").register();\n};\n```\n</code></pre> <pre><code>import { NodeCG } from \"nodecg-types/types/server\";\nmodule.exports = (nodecg: NodeCG) =&gt; {\nnew YourServiceNameService(nodecg, \"your-service-name\", __dirname, \"../your-service-name-schema.json\").register();\n};\n</code></pre>"},{"location":"contribute/docs_markdown/#pymdownxinlinehilite","title":"<code>pymdownx.inlinehilite</code>","text":"<p>Inline Highlighted Code Example</p> MarkdownOutput <pre><code>`` Here is some code: `#!py3 import pymdownx; pymdownx__version__`.\n\nThe mock shebang will be treated like text here: ` #!js vartest = 0; `. ``\n</code></pre> <p>Here is some code: <code>import pymdownx; pymdownx.__version__</code></p> <p>The mock shebang will be treated like text here: <code>#!js var test = 0;</code>.</p>"},{"location":"contribute/docs_markdown/#pymdownxsuperfences","title":"<code>pymdownx.superfences</code>","text":"<ol> <li>Allowing the nesting of fences under blockquotes, lists, or other block     elements.</li> <li>Ability to specify custom fences to provide features like flowcharts,     sequence diagrams, or other custom blocks.</li> <li>Allow disabling of indented code blocks in favour of only using the fenced     variant (off by default).</li> <li>Experimental feature that preserves tabs within a code block instead of     converting them to spaces which is Python Markdown's default behaviour.</li> </ol>"},{"location":"contribute/docs_markdown/#pymdownxtabbed","title":"<code>pymdownx.tabbed</code>","text":"<p>Example Tabs</p> MarkdownOutput <pre><code>=== \"Tab 1\"\n\n    Markdown **content**.\n\n    Multiple paragraphs.\n\n=== \"Tab 2\"\n\n    More Markdown **content**.\n\n    - list item a\n    - list item b\n</code></pre> Tab 1Tab 2 <p>Markdown content.</p> <p>Multiple paragraphs.</p> <p>More Markdown content.</p> <ul> <li>list item a</li> <li>list item b</li> </ul>"},{"location":"contribute/docs_markdown/#pymdownxtasklist","title":"<code>pymdownx.tasklist</code>","text":"<p>GFM style task lists</p> <p>Task lists</p> MarkdownOutput <pre><code>- [X] item 1\n  * [X] item A\n    * [ ] item B\n        more text\n        + [x] item a\n        + [ ] item b\n        + [x] item c\n    * [X] item C\n- [ ] item 2\n- [ ] item 3\n</code></pre> <ul> <li> item 1</li> <li> item A<ul> <li> item B     more text<ul> <li> item a</li> <li> item b</li> <li> item c</li> </ul> </li> <li> item C</li> </ul> </li> <li> item 2</li> <li> item 3</li> </ul>"},{"location":"contribute/docs_markdown/#admonition","title":"<code>admonition</code>","text":"<p>Possible types are: NOTE, SUMMARY, ABSTRACT, TLDR, INFO, TODO, TIP, HINT, SUCCESS, CHECK, DONE, QUESTION, HELP, FAQ, WARNING, ATTENTION, CAUTION, FAILURE, FAIL, MISSING, DANGER, ERROR, BUG, EXAMPLE, SNIPPET, QUOTE, CITE</p> <p>Inline Highlighted Code Example</p> MarkdownOutput <pre><code>!!! HINT \"optional explicit title within double quotes\"\n\n    Any number of other indented markdown elements.\n\n    This is the second paragraph.\n</code></pre> <p>optional explicit title within double quotes</p> <p>Any number of other indented markdown elements.</p> <p>This is the second paragraph.</p>"},{"location":"contribute/docs_sample/","title":"Add your sample to the docs","text":"<p>To document a sample bundle take a look at the name of the service the sample bundle is for. If it's for example <code>nodecg-io-example</code> the documentation should go into <code>docs/samples/example.md</code> in the doc's repository. There you should include a step-by-step manual how to configure the service and get the bundle running.</p> <p>Attention</p> <p>Don't forget to add the newly created Markdown file to <code>mkdocs.yml</code>.</p> <p>Note</p> <p>When you create your documentation pull request, please include the ID of your PR in the main repository in the description, so the documentation will not be merged before the actual code.</p> <p>You should make this very detailed, so everyone gets it to work because a super-good implementation is worth nothing if there's nobody who can use it. Take a look at the twitch sample bundle.</p> <p>Note</p> <p>We also have the getting started section and especally the \"Try an included sample\"-Guide, so you can offload some of the documentation to stuff aready written there.</p>"},{"location":"contribute/docs_sample/#guidelines","title":"Guidelines","text":"<p>[\u2026] The sample docs should [\u2026] be centered around the service and not the sample [\u2026]. Writing what the sample does with the service and how it is named should be enough. Actually the ChatOverflow docs are a good example [\u2026]. Have a guide how to use the dashboard and then an entry for each service that describes what config it needs and where you can get tokens. Instead of a code snipped I would then explain what the sample does and link to it.</p> <p>~ (daniel0611 27.02.2021 on GitHub) shortened by the author</p>"},{"location":"contribute/docs_setup/","title":"Setup","text":"<p>nodecg-io has a steadily growing and improving documentation. We are using Markdown to describe the content and mkdocs for the deployment to the webpage (https://nodecg.io). If you want to get to know the standard Markdown syntax, take a look at this guide. We also use many plugins, so you may take a look at a curated list of examples of the extended syntax.</p>"},{"location":"contribute/docs_setup/#clone-this-repo","title":"Clone this repo","text":"<p>If you installed the development version nodecg-io with the CLI, you may have already cloned the <code>nodecg-io-docs</code> repository into the <code>docs</code> folder inside nodecg-io directory. Then you will have to fork the official repo and add your fork as a remote:</p> <pre><code>git remote add &lt;name&gt; (https://github.com/&lt;your-user-name&gt;/nodecg-io-docs.git)\n</code></pre> <p>Else clone your fork into a desired directory with:</p> <pre><code>git clone https://github.com/&lt;your-user-name&gt;/nodecg-io-docs.git\n</code></pre>"},{"location":"contribute/docs_setup/#repository-structure","title":"Repository structure","text":"<pre><code>|-- .github ................ CI workflows\n|-- .vscode ................ VS Code specific configs\n|-- docs ................... All files included in the documentation\n|   |-- assets ................ other files used (images)\n|   |-- contribute ............ Section on development and documentation\n|   |-- getting_started ....... Section on first use\n|   |-- samples ............... documentation for the sample bundles\n|   |-- dependencies.md ....... One huge UML diagram (auto generated)\n|   |-- index.md .............. Home screen of the documentation\n|   `-- services.md ........... Availabel Services (auto generated)\n|-- .markdownlint.json ..... markdownlint config file\n|-- .prettierrc.json ....... prettier (formatter) config file\n`-- mkdocs.yml ............. mkdocs config file\n</code></pre>"},{"location":"contribute/docs_setup/#install-dependencies-to-use-the-preview","title":"Install dependencies to use the preview","text":"<p>You will need a Python 3 installed. You will also need to install <code>mkdocs</code> with pip:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Now you can serve the local version with:</p> <pre><code>mkdocs serve\n</code></pre> <p>Now you can access it in your browser under http://127.0.0.1:8000/.</p>"},{"location":"contribute/docs_setup/#using-vs-code","title":"Using VS Code","text":""},{"location":"contribute/docs_setup/#extensions","title":"Extensions","text":"<p>For the folks out there who are using VS Code to edit these documents you can use the recommended extensions of this workspace by using the <code>@recommended</code> filter in the extensions panel. Those extensions will format (<code>Prettier</code>) and lint (<code>markdownlint</code>) the markdown files, and live check many typos and grammar (<code>LTeX</code>). Also, the built-in preview will parse more of our used syntax.</p>"},{"location":"contribute/docs_setup/#tasks","title":"Tasks","text":"<p>Note</p> <p>You will need prettier and markdownlint installed in your path.</p> <p>You may also benefit from the preconfigured serve task. It can be accessed with Ctrl + Shift + B (CMD + Shift + B on macOS). This will format and lint the files and then serve them to you.</p>"},{"location":"getting_started/configuration/","title":"Configuration","text":"<p>Since version <code>0.2.0</code> nodecg-io has a configuration feature to save some settings without needing to code something or log in. The configuration file for this feature is at <code>cfg/nodecg-io-core.json</code> inside your NodeCG installation. This file does not exist by default, you need to create it yourself.</p> <p>The currently only thing you can configure is automatic login, but there may be more configurable options in the future.</p>"},{"location":"getting_started/configuration/#automatic-login","title":"Automatic login","text":"<p>Automatic login will automatically load nodecg-io when NodeCG starts using the provided password.</p> <p>Therefore, nodecg-io will be able to decrypt your configuration for your service instances and provide your bundles with service clients without you logging in to nodecg-io using the dashboard. This is especially useful if you are running NodeCG with nodecg-io on a server which may reboot from time to time to ensure that your bundles are always working without you needing to manually log in after each restart.</p> <p>Warning</p> <p>Having both the encrypted configuration and your used password saved on disk defeats nodecg-io's data-at-rest encryption.</p> <p>Any program that can read disk contents can access your credentials of any service instance. We discourage using this and if you really want to use it you should be extra cautious about which bundles you install.</p> <p>Options of automatic login:</p> <ul> <li> <p><code>enabled</code> (boolean)</p> <p>Automatic login will be only enabled if this <code>enabled</code> option is <code>true</code>. This option can be used to temporarily disable automatic login without needing to delete the whole automatic login configuration and allows for easy re-enabling without needing to enter the password in the config again.</p> </li> <li> <p><code>password</code> (string)</p> <p>This is the password that will be used to log in. It should be the password you use to log in to nodecg-io. If this password is wrong an error will be logged after startup.</p> </li> </ul> <p>Example config:</p> <pre><code>{\n\"automaticLogin\": {\n\"enabled\": true,\n\"password\": \"ThisIsMyPassword.PleaseChangeMe\"\n}\n}\n</code></pre>"},{"location":"getting_started/create_new_bundle/","title":"Create your first bundle","text":"<p>To actually use nodecg-io you need to create a bundle. Here's a step-by-step guide to create one.</p> <p>Think of what services your bundle needs. Take a look at the service list if to see what services are available. If you need a service that is not yet available consider creating it.</p>"},{"location":"getting_started/create_new_bundle/#create-your-bundle-using-the-nodecg-io-cli","title":"Create your bundle using the nodecg-io CLI","text":"<p>Automatically generating a bundle that uses nodecg-io requires that you have the nodecg-io CLI installed. A guide on how to do this is inside the installation guide.</p> <p>To start run this command while being inside your NodeCG installation:</p> <pre><code>nodecg-io generate\n</code></pre> <p>This will ask you a couple details about your bundle like name, description and used services. Most questions have a reasonable default that you can choose if you don't care or are not sure about the asked thing.</p> <p>After finishing the prompt the CLI will generate your bundle, install dependencies and, if you have chosen TypeScript, compile the generated code.</p>"},{"location":"getting_started/create_new_bundle/#test-it","title":"Test it","text":"<p>Start NodeCG and make sure that the bundle gets loaded successfully, and it is displayed in the nodecg-io dashboard with all service dependencies.</p>"},{"location":"getting_started/create_new_bundle/#modify-it","title":"Modify it","text":"<p>After that you should edit the <code>extension/index.ts</code> or <code>extension/index.js</code> depending on your chosen language to do something useful. You can start by updating the <code>onAvailable</code> callbacks.</p> <p>Note: If you need to access another service inside the callback of a <code>onAvailable</code> call you can use <code>otherService.getClient()</code> to get the client or <code>undefined</code> if it is not set.</p>"},{"location":"getting_started/create_new_bundle/#further-steps","title":"Further steps","text":"<p>A couple of steps you may want to do after generating a bundle:</p> <ul> <li>Create a git repository for you bundle (a <code>.gitignore</code> is automatically     generated for you) and push it to a git platform of your choice</li> <li>Add an open source licence, don't forget it to     also add it to the <code>package.json</code> file</li> <li>Add code formatters and linting tools like prettier     and ESLint</li> <li>Add a README that explains what your bundle does and how it can be used</li> </ul>"},{"location":"getting_started/create_new_bundle/#share-it","title":"Share it!","text":"<p>If you share your work others might find it useful and get happy with it. We made nodecg-io for you, and the NodeCG people made NodeCG for you. Many people spent much time for you to create cool content that easy and if you shared your work others could create good content more easily as well.</p>"},{"location":"getting_started/existing_bundle/","title":"Migrating your existing bundle to nodecg-io","text":"<p>This guide explains to you how to migrate an existing NodeCG bundle that already meets your requirements to use nodecg-io. nodecg-io manages service configuration and authentication, so your bundle doesn't have to bother with it.</p> <p>If you are lucky and used the same library as we do for the service you want to migrate, nodecg-io is a drop-in replacement just doing authentication and configuration. If you have used another library, you'll have to do a little more work to migrate to the library that our service uses. In that case make sure that the migration is worth the effort. You can use nodecg-io for one service and use your own library of choice for other services if you like to.</p>"},{"location":"getting_started/existing_bundle/#install-nodecg-io-core","title":"Install <code>nodecg-io-core</code>","text":"<p>The first thing you need to do is to install <code>nodecg-io-core</code>. You can do this simply using this npm command:</p> <pre><code>npm install nodecg-io-core\n</code></pre>"},{"location":"getting_started/existing_bundle/#add-the-service-bundle-as-a-bundle-dependency","title":"Add the service bundle as a bundle dependency","text":"<p>To ensure that NodeCG loads the service bundle you need before your bundle you need to add it as a <code>bundleDependency</code> to your bundle. To do that for e.g. the <code>twitch-chat</code> service you add it to your bundles <code>package.json</code> file like this:</p> <pre><code>    ...\n\"nodecg\": {\n\"compatibleRange\": \"^1.4.0\",\n\"bundleDependencies\": {\n\"nodecg-io-twitch-chat\": \"^0.2.0\"\n}\n}\n...\n</code></pre> <p>Change the bundle name and version accordingly. You need to specify each service your bundle needs here as a bundle dependency. Just don't forget to add a comma as a separator between the multiple bundles.</p>"},{"location":"getting_started/existing_bundle/#import-requireservice","title":"Import <code>requireService</code>","text":"<p>Now that you have <code>nodecg-io-core</code> installed in your bundle you can import the <code>requireService</code> function that it exposes:</p> TypeScript/ES ModulesCommonJS <pre><code>import { requireService } from \"nodecg-io-core\";\n</code></pre> <pre><code>const requireService = require(\"nodecg-io-core\").requireService;\n</code></pre>"},{"location":"getting_started/existing_bundle/#import-service-type-typescript-only","title":"Import Service type (TypeScript only)","text":"<p>If you're using TypeScript, you'll also need to install the package of the service that you want to use. You need it to be able to import its type for type safety.</p> <p>This example uses <code>twitch-chat</code> as an example, but you can just replace it with the name of the service you need.</p> <pre><code>npm install nodecg-io-twitch-chat\n</code></pre> TypeScript <pre><code>import { TwitchChatServiceClient } from \"nodecg-io-twitch-chat\";\n</code></pre> <p>Note</p> <p>You can get the name of the type by using autocomplete in your editor or by looking it up in the service sample.</p>"},{"location":"getting_started/existing_bundle/#require-the-service","title":"Require the service","text":"<p>Now you can finally tell nodecg-io that you want to get access to a service using the <code>requireService</code> function. You'll have to pass your NodeCG instance which is used to identify your bundle and the name of the service you want. In case of TypeScript you'll also need to provide the type of the service.</p> TypeScriptJavaScript <pre><code>const twitchChat = requireService&lt;TwitchChatServiceClient&gt;(nodecg, \"twitch-chat\");\n</code></pre> <pre><code>const twitchChat = requireService(nodecg, \"twitch-chat\");\n</code></pre>"},{"location":"getting_started/existing_bundle/#accessing-the-service-client","title":"Accessing the service client","text":""},{"location":"getting_started/existing_bundle/#using-onavailable-and-onunavailable-handlers","title":"Using <code>onAvailable</code> and <code>onUnavailable</code> handlers","text":"<p>You can set up handlers that are executed when the user assigns a service instance to your bundle, removes the assignment or when the service client got updated in some way.</p> <p>Handlers added with <code>onAvailable</code> will get called if there was a change, and you got a client:</p> <pre><code>// This is the variable with the return value of requireService().\n// You may want to change the variable name for the service you are using.\ntwitchChat.onAvailable((client) =&gt; {\nnodecg.log.info(\"Client was set\");\n// You can use the passed client in here to e.g. setup handlers on the client\n});\n</code></pre> <p><code>onAvailable</code> is especially useful to add event handlers to clients. E.g., if you want to react to donations or chat messages you can add event handlers for these here.</p> <p>Handlers added with <code>onUnavailable</code> will get called if the user unassigned your bundle from service instance or if there was an error in service client creation:</p> <pre><code>twitchChat.onUnavailable(() =&gt; {\nnodecg.log.info(\"Client was unset\");\n});\n</code></pre>"},{"location":"getting_started/existing_bundle/#using-getclient","title":"Using <code>getClient</code>","text":"<p>Instead of callbacks you can also get access to the client directly:</p> <pre><code>const twitchChatClient = twitchChat.getClient();\n</code></pre> <p><code>getClient</code> will return the client if your bundle has an assigned service instance that has produced a service client without error and will return <code>undefined</code> otherwise. This is useful for when you want to use the client due to some external event or from <code>onAvailable</code> handlers of other services.</p>"},{"location":"getting_started/install/","title":"Installation","text":""},{"location":"getting_started/install/#prerequisites","title":"Prerequisites","text":"<p>In order to download necessary tools and to install nodecg-io using the CLI you need network access.</p>"},{"location":"getting_started/install/#required-applications","title":"Required Applications","text":"<p>You'll need the following tools:</p> <ul> <li>Git</li> <li>Node.js v14.14.0 or newer</li> <li>npm 7.0.0 or newer</li> <li>NodeCG 1.4.0 or newer (1.7.0 or higher recommended)</li> </ul>"},{"location":"getting_started/install/#native-build-tools","title":"Native Build Tools","text":"<p>Some services depend on packages that require native build tools. You ONLY need to install these if you want to use a service that depends on native modules or if you want to install a development version.</p> <p>The services that require these include StreamDeck, Midi and Serial. Please note that this list might not be up-to-date.</p> <p>Here's how to install the native build tools on the most popular operating systems, if you need them:</p> WindowsLinuxmacOS <p>For Windows, you'll need the Visual Studio Build Tools, if you have Visual Studio installed you should already have them. If you don't have Visual Studio just install the Visual Studio Build Tools by running the following command as an Administrator:</p> <pre><code>npm install -g windows-build-tools\n</code></pre> <p>For Linux, you'll need a C++ compiler and some other packages. On Ubuntu/Debian based operating systems run the following command:</p> <pre><code>sudo apt install build-essential libusb-1.0-0-dev libasound2-dev libudev-dev\n</code></pre> <p>For other Linux distros you'll need the corresponding packages, just search on the internet for the packages on your specific distro.</p> <p>For macOS, you'll need the Xcode command line tools. To install them run the following command:</p> <pre><code>xcode-select --install\n</code></pre>"},{"location":"getting_started/install/#install-the-nodecg-io-cli","title":"Install the nodecg-io CLI","text":"<p>Install the nodecg-io CLI using the following command:</p> <pre><code>npm install -g nodecg-io-cli\n</code></pre> <p>Note</p> <p>If you are running on Linux, you may need to use <code>sudo</code> if your npm installation uses a non-writeable path (default on Ubuntu apt packages, usually does not apply to packages installed using nvm)</p>"},{"location":"getting_started/install/#install-nodecg-io-using-the-nodecg-io-cli","title":"Install nodecg-io using the nodecg-io CLI","text":"<p>Info</p> <p>nodecg-io will always be installed into a <code>nodecg-io/</code> directory inside your NodeCG installation so that your bundles and all bundles from nodecg-io are separated. The CLI will add this path to the loaded bundles in your NodeCG configuration automatically, you don't need to worry about it.</p> <p>With the nodecg-io CLI installed you can run this command inside a NodeCG installation to install nodecg-io:</p> <pre><code>$ nodecg-io install\nInstalling nodecg-io...\n</code></pre> <p>You will get a prompt which asks you which version you want to install:</p> <pre><code>user@computer:~/nodecg$ nodecg-io install\nInstalling nodecg-io...\nDetected nodecg installation at /home/user/nodecg.\n? Which version do you want to install? (Use arrow keys) \n  development \n\u276f 0.1</code></pre> <p>There are two possible installation types:</p> <ul> <li> <p>By selecting an actual version (e.g., <code>0.1</code>) you create a production install     that downloads the required packages from npm and setups a npm workspace to     install all dependencies. Here you can choose which services you want to     install. Here you can not easily install our premade examples.</p> </li> <li> <p>By selecting <code>development</code> you create a development install that clones the     nodecg-io git repo and builds everything from scratch. We only recommend a     development install if you are sure that you want to contribute to nodecg-io     or want to try an included example. Here you always must install all     services and examples.</p> </li> </ul> <p>For starters, we recommend using the development version, so you may try our premade examples.</p> Production installDevelopment install <p>Because you selected a production install you may select the services to be included in this next step:</p> <p><pre><code>user@computer:~/nodecg$ nodecg-io install\nInstalling nodecg-io...\nDetected nodecg installation at /home/user/nodecg.\n? Which version do you want to install? 0.1\n? Which services do you want to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all,\n&lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)\n\u276f\u25ef ahk\n \u25ef android\n \u25ef curseforge\n \u25ef discord\n \u25ef intellij\n \u25ef irc\n \u25ef midi-input\n(Move up and down to reveal more choices)</code></pre></p> <p>If you ever want to change your nodecg-io installation to add/remove a service or change the version, you can always re-run <code>nodecg-io install</code>. If it finds a nodecg-io installation, its options will be preselected in the prompt. Re-running <code>nodecg-io install</code> will also update all packages to the latest patch version.</p> <p>Because you selected a production install you may select to use the samples and documentation to be included in these next steps:</p> <p><pre><code>user@computer:~/nodecg$ nodecg-io install\nInstalling nodecg-io...\nDetected nodecg installation at /home/user/nodecg.\n? Which version do you want to install? development\n? Would you like to use the provided samples? (y/N) </code></pre></p> <p><pre><code>user@computer:~/nodecg$ nodecg-io install\nInstalling nodecg-io...\nDetected nodecg installation at /home/user/nodecg.\n? Which version do you want to install? development\n? Would you like to use the provided samples? No\n? Would you like to clone the documentation? (y/N) </code></pre></p> <p>If you ever want to change your nodecg-io installation to add/remove the doc repo or add/remove the samples you can always re-run <code>nodecg-io install</code>. Re-running <code>nodecg-io install</code> will also pull the repository and rebuild it.</p>"},{"location":"getting_started/install/#continue-reading","title":"Continue reading","text":"<p>There are many example bundles premade for most services, so you may take a look at the \u201cTry an included sample\u201d-Guide (It will also tell you how to start NodeCG, log in and how to use the GUI). Or you could directly take a deep dive into our framework and either create a new bundle or integrate an existing bundle. There are other bundles using nodecg-io, witch you could try, so may take a look around GitHub or GitLab.</p>"},{"location":"getting_started/install/#uninstall-nodecg-io","title":"Uninstall nodecg-io","text":"<p>If you want to uninstall nodecg-io you can run the following command:</p> <pre><code>nodecg-io uninstall\n</code></pre> <p>This will remove the <code>nodecg-io</code> directory inside your NodeCG installation and also will remove it from the loaded bundle paths in your NodeCG configuration.</p>"},{"location":"getting_started/try_example_bundle/","title":"Try an included sample","text":"<p>Trying one of the premade example bundles is a good way to get to know the framework and especially the selected service.</p> <p>Attention</p> <p>In case you installed the production branch of nodecg-io, you are out of luck. Because the build process will cause problems if you just take one of the samples and rebuild elsewhere.</p> <p>If you installed dev branch via the <code>nodecg-io-cli</code> and did not select the \u201cuse the samples\u201d-option run <code>nodecg-io install</code> and select it.</p> <p>In case you cloned the repository directly from GitHub, everything should be included. But you may want to pull recent changes and rebuild the project.</p>"},{"location":"getting_started/try_example_bundle/#step-1-run-nodecg","title":"Step 1: Run NodeCG","text":"<p>Now you need to start NodeCG. There are a couple of different ways to do this:</p>"},{"location":"getting_started/try_example_bundle/#using-vs-code","title":"Using VS Code","text":"<p>If you have nodecg-io open in your VS Code instance, you can launch NodeCG using the <code>Run and Debug</code> Explorer View:</p> <p></p>"},{"location":"getting_started/try_example_bundle/#using-the-terminal","title":"Using the terminal","text":"<p>You may also launch NodeCG using your terminal with:</p> <pre><code>user@computer:~/nodecg$ npm run start\n\n&gt; nodecg@1.8.1 start\n&gt; node index.js\n\ninfo: [nodecg/lib/server] Starting NodeCG 1.8.1 (Running on Node.js v16.11.1)\ninfo: [nodecg-io-core] Minzig!\n\n// A whole host of logging output\n\ninfo: [nodecg/lib/server] NodeCG running on http://localhost:9090\n\n<p>Now you can open the NodeCG dashboard (by default) under\nhttp://localhost:9090.</p>"},{"location":"getting_started/try_example_bundle/#step-2-log-in-to-nodecg-io","title":"Step 2: Log in to nodecg-io","text":"<p>Now navigate to the <code>nodecg-io</code> tab in the NodeCG dashboard.</p>\n<p>If you are logging in for the first time you will have to set your password.</p>\n<p></p>\n<p>Else you simply have to log in with your previously chosen password.</p>\n<p>Now you are looking at the <code>nodecg-io</code> config menu. It should look like this:</p>\n<p></p>"},{"location":"getting_started/try_example_bundle/#step-3-learning-how-to-use-the-gui","title":"Step 3: Learning how to use the GUI","text":"<p>The current GUI is just intended to make the project usable, but it is not very\nuser-friendly. As a more long term solution, a new GUI will be developed that\nalso focuses on user experience. Until the new GUI is developed, you will have\nto arrange yourself with this one. So, to get started:</p>\n<p></p>"},{"location":"getting_started/try_example_bundle/#in-pink-nodecg-tabs","title":"In pink: NodeCG Tabs","text":"<p>Here you will find every NodeCG-bundle that has a dashboard. Here you may select\nthe nodecg-io-debug-dashboard, if it is installed.</p>"},{"location":"getting_started/try_example_bundle/#in-yellow-monaco-editor","title":"In yellow: Monaco editor","text":"<p>It is basically only a text editor which is used to save configurations for\nservice instances.</p>"},{"location":"getting_started/try_example_bundle/#in-green-services-section","title":"In green: Services section","text":"<p>Here you may create, update and delete instances of a service. Each instance has\nits own name and configuration. The menu will expand depending on the option\nselected in the first dropdown.</p>\n<p>Creating a new service instance:</p>\n<p>This can be accomplished by selecting the item <code>'New'</code>. Then a new dropdown will\nbe revealed, in witch you may select the service type. Additionally, you must\nselect an instance name. Then click <code>'Create'</code>. The newly created instance\nshould be selected.</p>\n<p>Configure a service instance:</p>\n<p>While a supported service instance is selected, you may change the config in\nmonaco, then click <code>'Save'</code>.</p>\n<p>Deleting a service instance:</p>\n<p>This can be accomplished by selecting an existing instance. Then click\n<code>'Delete Instance'</code>.</p>"},{"location":"getting_started/try_example_bundle/#in-violet-bundles-section","title":"In violet: Bundles section","text":"<p>This section has three dropdowns:</p>\n<ol>\n<li>Bundle: Here you can select a bundle to configure.</li>\n<li>Service: If this bundle uses more than one service, you may select the\n   service to set or unset here.</li>\n<li>Service Instance: Here you can select one instance of the service type set at\n   2 or <code>none</code>.</li>\n</ol>"},{"location":"getting_started/try_example_bundle/#in-red-unset-all-button","title":"In red: Unset all Button","text":"<p>This button will set the service instance for every bundle/service combination\nto none, effectively removing the access to every service from all bundles.</p>\n<p>Danger</p>\n<p>This can not be undone, and you will have to set up all the bundles\nagain. The service instances will be unaffected.</p>"},{"location":"getting_started/try_example_bundle/#step-4-configure-the-sample","title":"Step 4: Configure the sample","text":"<p>The configurations for every sample bundle differ too greatly from each other to\nbe included here, so you have to take a look at the documentation for your\nsample bundle. You will find it on the left-hand side of this page in the\ncategory <code>Services</code>.</p>"},{"location":"getting_started/use_replicants/","title":"Use service replicants","text":"<p>Some services allow reading some data using NodeCG Replicants.</p> <p>Replicants are especially useful for displaying simple information in graphics and dashboards. You can setup a replicant and directly use it for basic values inside your graphic/dashboard without the need for much extension code.</p> <p>TODO: explain for what replicants are useful</p> <p>Current list of services with replicant support:</p> <ul> <li>StreamElements</li> </ul> <p>(more services with replicants will hopefully be added in the future)</p>"},{"location":"getting_started/use_replicants/#create-and-register-replicants-in-your-bundle-extension","title":"Create and register replicants in your bundle extension","text":"<p>To use a replicant of a service you must first depend on the service as usual. Please refer to Your first bundle and Migrating an existing bundle for a guide on how to depend on nodecg-io services inside your NodeCG extension.</p> <p>With access to a service client you can create a replicant inside your bundle and pass it to the <code>setupReplicant</code> method of the service client to let it be filled with data by the service. Here's an example for the StreamElements service (replace the name with the service of the above list that you want to use):</p> TypeScriptJavaScript <pre><code>// Update your imports to include the type of the replicant data:\nimport { StreamElementsReplicant, StreamElementsServiceClient } from \"nodecg-io-streamelements\";\n\nmodule.exports = function(nodecg: NodeCG) {\n// Require service (as usual)\nconst streamElements = requireService&lt;StreamElementsServiceClient&gt;(nodecg, \"streamelements\");\n\n// Define replicant\nconst streamElementsReplicant = nodecg.Replicant&lt;StreamElementsReplicant&gt;(\"myStreamElementsReplicant\");\n\n...\n\nstreamElements?.onAvailable((client) =&gt; {\n...\n// Connect your replicant to this nodecg-io service instance.\nclient.setupReplicant(streamElementsReplicant);\n});\n}\n</code></pre> <pre><code>module.exports = function(nodecg: NodeCG) {\n// Require service (as usual)\nconst streamElements = requireService(nodecg, \"streamelements\");\n\n// Define replicant\nconst streamElementsReplicant = nodecg.Replicant(\"myStreamElementsReplicant\");\n\n...\n\nstreamElements?.onAvailable((client) =&gt; {\n...\n// Connect your replicant to this nodecg-io service instance.\nclient.setupReplicant(streamElementsReplicant);\n});\n}\n</code></pre>"},{"location":"getting_started/use_replicants/#use-the-service-replicant","title":"Use the service replicant","text":"<p>In case you want to use the created replicant in your bundles extension you already have it declared and a reference to it in a variable. If you want to use it in a graphic or dashboard you'll need to declare the replicant with the same name there too.</p> <p>You can access the NodeCG replicant as usual. Use <code>replicant.value</code> to get the current state and <code>replicant.on(\"change\", (newValue, oldValue) =&gt; { /* .... */ })</code> to be informed when the value of the replicant changes.</p> <p>To figure out what properties are available on the object value you can either look at the corresponding sample bundle or use autocomplete in your editor if you're using TypeScript.</p>"},{"location":"samples/ahk/","title":"AHK sample","text":""},{"location":"samples/ahk/#using-the-autohotkey-sample-bundle","title":"Using the AutoHotkey sample bundle","text":"<p>The AutoHotkey sample bundle in <code>samples/ahk-sendcommand</code> shows how to send a command to a HotkeylessAHK server.</p>"},{"location":"samples/ahk/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A running HotkeylessAHK setup.</li> </ul>"},{"location":"samples/ahk/#configure-the-autohotkey-sample-bundle","title":"Configure the AutoHotkey sample bundle","text":"<ol> <li>In NodeCG, create a new ahk service instance.</li> <li> <p>Enter the host and port of the HotkeylessAHK Server:</p> <pre><code>{\n\"host\": \"localhost\",\n\"port\": 42800\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>ahk-sendcommand</code>) dependency to be the newly created    service instance (of type <code>ahk</code>).</p> </li> <li>A small window with the text \u201cHello World\u201d should have popped up.</li> </ol>"},{"location":"samples/android/","title":"Android","text":""},{"location":"samples/android/#using-the-android-sample-bundle","title":"Using the Android sample bundle","text":"<p>The Android example bundle in <code>samples/android</code> shows how to connect to an Android device and turn on WLAN.</p>"},{"location":"samples/android/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ol> <li>Clone this Git    Repository</li> <li>Run <code>gradlew build</code> (on Windows) or <code>./gradlew build</code> (on Linux) inside the    cloned repository.</li> <li>There will be an apk file generated in    <code>app/build/outputs/apk/debug/app-debug.apk</code>. Install it on the Android    device.</li> <li>Launch the app. You'll be asked to grant the system alert window permission.    This is required because the app will do its work in the background. However,    occasionally when user interaction is required, it needs to launch an    activity without the user pressing the app icon in the launcher.</li> <li>Install the android developer tools and make sure you have the <code>adb</code> command    in your <code>PATH</code></li> <li>Enable developer options on you device and enable USB debugging there. See    here.</li> <li>Run <code>adb start-server</code></li> <li>Connect your device via USB. You'll be prompted whether you want to allow USB    debugging. Press <code>Allow</code>.</li> <li> <p>Run <code>adb device -l</code>. The output might look like this:</p> <pre><code>########               device usb:2-1.7 product:######## model:######## device:######## transport_id:2\n</code></pre> <p>The hexadecimal number in the first column is your device ID. You'll need this later.</p> </li> <li> <p>In NodeCG, create a new android service instance.</p> </li> <li> <p>Enter the following:</p> <pre><code>{\n\"device\": \"device_id\"\n}\n</code></pre> <p>Replace <code>device_id</code> with your device ID.</p> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>android</code>) dependency to be the newly created service     instance (of type <code>android</code>).</p> </li> <li>You should see that WLAN is now activated on your device.</li> </ol>"},{"location":"samples/artnet/","title":"Art-Net sample","text":""},{"location":"samples/artnet/#using-the-art-net-sample-bundle","title":"Using the Art-Net sample bundle","text":"<p>The Art-Net example bundle in <code>samples/artnet-console</code> demonstrates the ability send data via Art-Net to e.g., open lighting architecture or professional lighting equipment. Here is a guide to how to get it working. The underlying service is using jeffreykog/node-artnet-protocol as its library.</p>"},{"location":"samples/artnet/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A working Art-Net Node in the current network</li> </ul>"},{"location":"samples/artnet/#configure-the-art-net-sample-bundle","title":"Configure the Art-Net sample bundle","text":"<ol> <li>In NodeCG, create a new Art-Net service instance.</li> <li> <p>Enter the host to witch the service should broadcast:</p> <p>Host</p> <p>The broadcast address the Art-Net library will use to send <code>dmx</code> packages.</p> <pre><code>{\n\"host\": \"127.0.0.1\"\n}\n</code></pre> <p>After entering it, click save.</p> <p>Info</p> <p>You may overwrite this broadcast address in code with <code>client.bind(\"host address\");</code>.</p> </li> <li> <p>Set the sample's (<code>artnet-console</code>) dependency to be the newly created     service instance (of type <code>artnet</code>).</p> </li> <li>Check the NodeCG logs. You should see data logged.</li> </ol>"},{"location":"samples/artnet/#explanations","title":"Explanations","text":""},{"location":"samples/artnet/#receiving-dmx-data","title":"Receiving DMX data","text":"<pre><code>client.onDMX((dmx) =&gt; {\n// dmx contains an ArtDmx object\nnodecg.log.info(dmx.universe, dmx.data);\n});\n</code></pre> <p>The data you receive has the following fields:</p> <pre><code>declare class ArtDmx {\nopcode: number;\nprotocolVersion: number;\nsequence: number;\nphysical: number;\nuniverse: number;\ndata: number[];\nconstructor(sequence: number, physical: number, universe: number, data: number[]);\nisSequenceEnabled(): boolean;\nstatic decode(data: Buffer): ArtDmx;\ntoString(): string;\nencode(): Buffer;\n}\n</code></pre>"},{"location":"samples/artnet/#sending-dmx-data","title":"Sending DMX data","text":"<pre><code>// send new data every 0,8 seconds.\n// This is the official timing for re-transmiting data in the artnet specifciation.\nsetInterval(() =&gt; {\nclient.send(\nuniverse,\nvalues // number[] of values for each of the 512 channels\n);\n}, 800);\n</code></pre> <p>Note</p> <p>Since neither this library nor nodecg-io currently contains an abstraction that abides the timings specified by the specification, it is important for your implementation to respect this part of the specification:</p> <p>However, an input that is active but not changing, will re-transmit the last valid ArtDmx packet at approximately 4-second intervals. (Note. In order to converge the needs of Art- Net and sACN it is recommended that Art-Net devices actually use a re-transmit time of 800ms to 1000ms).  \u2014 Art-Net 4 Specification p. 48</p>"},{"location":"samples/atem/","title":"Atem sample","text":""},{"location":"samples/atem/#using-the-atem-sample-bundle","title":"Using the Atem sample bundle","text":"<p>The Atem sample bundle in <code>samples/atem</code> shows how to listen to commands.</p>"},{"location":"samples/atem/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p>"},{"location":"samples/atem/#configure-the-atem-sample-bundle","title":"Configure the Atem sample bundle","text":"<ol> <li>In NodeCG, create a new atem service instance.</li> <li> <p>Enter the address and optional a port of the Atem server:</p> <pre><code>{\n\"address\": \"0.0.0.0\"\n}\n</code></pre> <p>or</p> <pre><code>{\n\"address\": \"0.0.0.0\",\n\"port\": 9910\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>atem</code>) dependency to be the newly created    service instance (of type <code>atem</code>).</p> </li> <li>Now all commands sended through the atem protocol should be logged in the console.</li> </ol>"},{"location":"samples/dbus-ratbagd/","title":"DBus","text":""},{"location":"samples/dbus-ratbagd/#using-the-d-bus-ratbagd-sample-bundle","title":"Using the D-Bus ratbagd sample bundle","text":"<p>The <code>dbus-ratbagd</code> example bundle in <code>samples/dbus-ratbagd</code> demonstrates how to access all devices supported by ratbagd. Here is a guide to how to get it working.</p>"},{"location":"samples/dbus-ratbagd/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>ratbagd</li> </ul>"},{"location":"samples/dbus-ratbagd/#configure-the-dbus-ratbagd-sample-bundle","title":"Configure the DBus ratbagd sample bundle","text":"<ol> <li>In NodeCG, create a new D-Bus service instance.</li> <li> <p>Configure the D-Bus service    There should not be any additional configuration needed for the D-Bus    service.</p> </li> <li> <p>Set the sample's (<code>dbus-ratbagd</code>) dependency to be the newly created service    instance (of type <code>dbus</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and a list of connected device names.</p> </li> </ol>"},{"location":"samples/debug/","title":"Debug","text":""},{"location":"samples/debug/#using-the-debug-sample-bundle","title":"Using the Debug sample bundle","text":"<p>The Debug Helper example bundle in <code>samples/debug</code> demonstrates the ability to use the debug helper to send same sample data to your bundle, so you can trigger different features and test/debug them.</p>"},{"location":"samples/debug/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p>"},{"location":"samples/debug/#configure-the-debug-sample-bundle","title":"Configure the Debug sample bundle","text":"<ol> <li>In NodeCG, create a new Debug service instance.</li> <li>Set the sample's (<code>debug</code>) dependency to be the newly created service    instance (of type <code>debug</code>).</li> <li>Go to the nodecg-io-debug dashboard and use some buttons or other inputs.</li> <li>Check the NodeCG log. It should contain a message for each action you did and    the passed values.</li> </ol>"},{"location":"samples/discord-rpc/","title":"Discord RPC sample","text":""},{"location":"samples/discord-rpc/#using-the-discord-rpc-sample-bundle","title":"Using the Discord RPC sample bundle","text":"<p>The Discord Rich Presence example bundle in <code>samples/discord-rpc</code> demonstrates the ability to access a locally running discord client. Here is a guide to how to get it working.</p>"},{"location":"samples/discord-rpc/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A discord application with permissions <code>indentify</code> and <code>rpc</code></li> </ul> <p>Note</p> <p>If you don't have an application yet, you can create one here</p>"},{"location":"samples/discord-rpc/#configure-the-discord-rpc-sample-bundle","title":"Configure the Discord RPC sample bundle","text":"<ol> <li>In NodeCG, create a new <code>discord-rpc</code> service instance.</li> <li> <p>Enter the <code>clientId</code> and <code>clientSecret</code> for the service:</p> <pre><code>{\n\"clientId\": \"your client id\",\n\"clientSecret\": \"your client secret\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>discord-rpc</code>) dependency to be the newly created service    instance (of type <code>discord-rpc</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message displaying your discord username.</p> </li> </ol>"},{"location":"samples/discord/","title":"Discord API sample","text":""},{"location":"samples/discord/#using-the-discord-sample-bundle","title":"Using the Discord sample bundle","text":"<p>The Discord-guild-chat example bundle in <code>samples/discord-guild-chat</code> demonstrates the ability to reply with <code>pong</code> to messages which are equal to <code>!ping</code> or <code>ping</code>. Here is a guide to how to get it working.</p>"},{"location":"samples/discord/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A Discord Bot token</li> </ul> <p>Note</p> <p>If you don't have such a token yet, you can follow this guide.</p>"},{"location":"samples/discord/#configure-the-discord-sample-bundle","title":"Configure the Discord sample bundle","text":"<ol> <li>In NodeCG, create a new discord service instance.</li> <li> <p>Enter your bot token:</p> <pre><code>{\n\"botToken\": \"your-token-goes-here\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>discord-guild-chat</code>) dependency to be the newly created    service instance (of type <code>discord</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a Login message.</p> </li> </ol>"},{"location":"samples/elgato-light/","title":"Elgato Light sample","text":""},{"location":"samples/elgato-light/#using-the-elgato-light-sample-bundle","title":"Using the elgato-light sample bundle","text":"<p>The elgato-light example bundle in <code>samples/elgato-light</code> demonstrates the ability to controll elgato keylights and elgato lightstrips. Here is a guide to how to get it working.</p>"},{"location":"samples/elgato-light/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>at least one elgato keylight or lightstrip</li> </ul>"},{"location":"samples/elgato-light/#configure-the-elgato-light-sample-bundle","title":"Configure the elgato-light sample bundle","text":"<ol> <li>In NodeCG, create a new elgato-light service instance.</li> <li> <p>Enter your IP address of your light and the type (<code>KeyLight</code> or <code>LightStrip</code>):</p> <pre><code>{\n\"lights\": [\n{\n\"ipAddress\": \"xxx.xxx.xxx.xxx\",\n\"lightType\": \"KeyLight\",\n\"name\": \"MyLight1\"\n}\n]\n}\n</code></pre> <p>You can add as many lights to this service as you wish by adding more objects inside the <code>lights</code> array.</p> <p><code>name</code> is optional and can be used to identify lights in bundles. You can omit it if you don't use the name to get it in any bundle.</p> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>elgato-light</code>) dependency to be the newly created    service instance (of type <code>elgato-light</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>Your lights should blink for three seconds and you should see the current brightness in the NodeCG logs.</p> </li> </ol>"},{"location":"samples/github/","title":"GitHub sample","text":""},{"location":"samples/github/#using-the-github-sample-bundle","title":"Using the GitHub sample bundle","text":"<p>The GitHub example bundle in <code>samples/github</code> demonstrates the ability to access the GitHub rest API. Here is a guide to how to get it working.</p>"},{"location":"samples/github/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A GitHub token</li> </ul> <p>Note</p> <p>If you don't have a token yet, you can create one here. The token requires at least the <code>repo</code> scope.</p>"},{"location":"samples/github/#configure-the-github-sample-bundle","title":"Configure the GitHub sample bundle","text":"<ol> <li>In NodeCG, create a new GitHub service instance.</li> <li> <p>Enter the GitHub token:</p> <pre><code>{\n\"token\": \"abcdef....\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>github</code>) dependency to be the newly created service    instance (of type <code>github</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and a list of all your repositories.</p> </li> </ol>"},{"location":"samples/google-cast/","title":"Google Cast sample","text":""},{"location":"samples/google-cast/#using-the-google-cast-sample-bundle","title":"Using the Google Cast sample bundle","text":"<p>The google-cast example bundle in <code>samples/google-cast</code> demonstrates the ability to cast a mp3 file to a Google Cast device. Here is a guide to how to get it working.</p>"},{"location":"samples/google-cast/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>a Google Cast device inside your local network</li> </ul>"},{"location":"samples/google-cast/#configure-the-google-cast-sample-bundle","title":"Configure the Google Cast sample bundle","text":"<ol> <li> <p>In nodecg-io, create a new google-cast service instance.</p> </li> <li> <p>Select a device inside the configuration preset list or add a device using a config like this:</p> <pre><code>{\n\"host\": \"192.168.2.111\",\n\"friendlyName\": \"My Chromecast\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>google-cast</code>) dependency to be the newly created service    instance (of type <code>google-cast</code>).</p> </li> <li> <p>Listen to the beautiful music playing through your Google Cast device:</p> </li> </ol>"},{"location":"samples/gsheets/","title":"GSheets sample","text":""},{"location":"samples/gsheets/#using-the-gsheets-sample-bundle","title":"Using the gsheets sample bundle","text":"<p>The gsheets bundle in <code>samples/gsheets</code> demonstrates the ability of retrieving all rows where column A is filled. Here is a guide to how to get it working.</p>"},{"location":"samples/gsheets/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>Google cloud API OAuth access (client ID, client Secret)</li> <li>Grant <code>Google Sheets API v4</code> access at the project's dashboard.<ul> <li>Shortcut URL:     <code>https://console.developers.google.com/apis/library/sheets.googleapis.com?project=&lt;project-id&gt;</code>.</li> </ul> </li> </ul> <p>Note</p> <p>If you don't have such a key yet, you can generate them like this. As redirect URI add:</p> <p>http://localhost:9090/nodecg-io-googleapis/oauth2callback</p>"},{"location":"samples/gsheets/#configure-the-gsheets-sample-bundle","title":"Configure the gsheets sample bundle","text":"<ol> <li>In NodeCG, create a new googleapis service instance.</li> <li> <p>Enter the credentials for googleapis:</p> <pre><code>{\n\"clientID\": \"&lt;clientID&gt;\",\n\"clientSecret\": \"&lt;clientSecret&gt;\",\n\"scopes\": [\"https://www.googleapis.com/auth/spreadsheets\"]\n}\n</code></pre> <p>After entering it, click save.</p> <p>Note</p> <p>You can add multiple scopes if the googleapis instance is used for multiple bundles.</p> </li> <li> <p>Set the sample's (<code>gsheets</code>) dependency to be the newly created service     instance (of type <code>googleapis</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message that is hardcoded in <code>samples/gsheets/extension/index.ts</code>.</p> </li> </ol>"},{"location":"samples/intellij/","title":"IntelliJ sample","text":""},{"location":"samples/intellij/#using-the-intellij-sample-bundle","title":"Using the IntelliJ sample bundle","text":"<p>The IntelliJ example bundle in <code>samples/intellij-integration</code> Shows how to connect to a JetBrains IDE and print all installed plugins. Here is a guide to how to get it working:</p>"},{"location":"samples/intellij/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ol> <li>Clone this Git    Repository.</li> <li>Make sure you've Java 11 or newer installed.</li> <li>Run <code>gradlew build</code> (on Windows) or <code>./gradlew build</code> (on Linux) inside the    cloned repository.</li> <li>Inside your JetBrains IDE go to <code>Settings</code> and then <code>Plugins</code>. Click on the    little gear in the top right corner. Then click <code>Install from file</code>.</li> <li>Navigate to <code>path to your cloned repository/build/libs</code> and select the jar    file there.</li> <li>Restart the IDE.</li> </ol>"},{"location":"samples/intellij/#configure-the-intellij-sample-bundle","title":"Configure the IntelliJ sample bundle","text":"<ol> <li>In NodeCG, create a new IntelliJ service instance.</li> <li> <p>Enter the host and port of your IDE's HTTP server:</p> <pre><code>{\n\"address\": \"127.0.0.1:19524\"\n}\n</code></pre> <p>This tells nodecg-io to look for your IDE's HTTP server on your computer at port <code>19524</code>. If you want it to run on another port, please follow the guidelines here.</p> </li> <li> <p>Set the sample's (<code>intellij-integration</code>) dependency to be the newly created    service instance (of type <code>intellij</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a list of all plugins installed at your IDE including the preinstalled ones by JetBrains.</p> </li> </ol>"},{"location":"samples/irc/","title":"IRC","text":""},{"location":"samples/irc/#using-the-irc-sample-bundle","title":"Using the IRC sample bundle","text":"<p>The IRC example bundle in <code>samples/irc</code> demonstrates the ability to get access to an IRC chat. This sample is designed to log the twitch IRC chat of skate702.</p>"},{"location":"samples/irc/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p>"},{"location":"samples/irc/#configure-the-irc-sample-bundle","title":"Configure the IRC sample bundle","text":"<ol> <li>In NodeCG, create a new IRC service instance.</li> <li> <p>Enter the credentials for IRC. In this example we will \u201canonymously\u201d connect    to the twitch IRC chat. Enter the host, port, and nick in this format:</p> <pre><code>{\n\"host\": \"irc.chat.twitch.tv\",\n\"port\": 6667,\n\"nick\": \"justinfan123456\"\n}\n</code></pre> <p>Here you may want to change the numbers of the nick to be unique to you.</p> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>irc</code>) dependency to be the newly created service instance    (of type <code>irc</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in <code>samples/irc/extension/index.ts</code>.</p> </li> </ol>"},{"location":"samples/midi-input/","title":"Midi-Input sample","text":""},{"location":"samples/midi-input/#using-the-midi-input-sample-bundle","title":"Using the midi-input sample bundle","text":"<p>The midi-input example bundle in <code>samples/midi-input</code> demonstrates the ability to read data from a midi device.</p>"},{"location":"samples/midi-input/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A midi device that can be connected to your computer</li> </ul>"},{"location":"samples/midi-input/#configure-the-midi-input-sample-bundle","title":"Configure the midi-input sample bundle","text":"<ol> <li> <p>In NodeCG, create a new midi-input service instance.</p> </li> <li> <p>Enter your device information:</p> <pre><code>{\n\"device\": \"name\"\n}\n</code></pre> <p>After entering it, click save.</p> <p>Note</p> <p>A script is provided to list all inputs and outputs. It can be run from the sample directory <code>samples/midi-input</code> using the command <code>npm run list</code>. The devices should be listed with their device names and some other stuff.</p> <p>Under Linux this looks for example like this:</p> <pre><code>nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0\n</code></pre> </li> <li> <p>Set the sample's (<code>midi-input</code>) dependency to be the newly created service     instance (of type <code>midi-input</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and all midi messages that are sent by the device that is configured.</p> </li> </ol>"},{"location":"samples/midi-io/","title":"Midi-IO sample","text":""},{"location":"samples/midi-io/#using-the-midi-io-sample-bundle","title":"Using the midi-io sample bundle","text":"<p>The midi-io example bundle in <code>samples/midi-io</code> demonstrates the ability to send/receive data to/from a midi device.</p>"},{"location":"samples/midi-io/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A midi device that can be connected to your computer</li> </ul>"},{"location":"samples/midi-io/#configure-the-midi-io-sample-bundle","title":"Configure the midi-io sample bundle","text":"<ol> <li> <p>In NodeCG, create a new midi-input service instance.</p> </li> <li> <p>Enter your device information:</p> <pre><code>{\n\"device\": \"name\"\n}\n</code></pre> <p>After entering it, click save.</p> <p>Note</p> <p>A script is provided to list all inputs and outputs. It can be run from the sample directory <code>samples/midi-input</code> using the command <code>npm run list</code>. The devices should be listed with their device names and some other stuff.</p> <p>Under Linux this looks for example like this:</p> <pre><code>nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0\n</code></pre> </li> <li> <p>Create a new midi-output service instance using the left upper menu.</p> </li> <li> <p>Set the sample's (<code>midi-io</code>) dependencies to be the newly created service     instances (of type <code>midi-input</code> &amp; <code>midi-output</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and midi messages that are received and echoed back to the device that is configured. The messages are only modified, if the received Message is a <code>Noteon</code> with a velocity of greater than zero or a control change message with a value of at least 64. <code>Noteoff</code> messages are always echoed unmodified.</p> </li> </ol>"},{"location":"samples/midi-io/#note","title":"Note","text":"<p>A <code>Noteon</code> message with a velocity of 0 should be handled like a <code>Noteoff</code> message, so they are echoed unmodified. Otherwise, this would get annoying very fast. If a control change is assigned to the push-button values of 64 and up are interpreted as on and values lower than that are interpreted as off. Most somewhat modern Midi devices send 127 as on and 0 as off, but 63 and 64 should also be sufficient.</p>"},{"location":"samples/midi-output/","title":"Midi-Output sample","text":""},{"location":"samples/midi-output/#using-the-midi-output-sample-bundle","title":"Using the midi-output sample bundle","text":"<p>The midi-output example bundle in <code>samples/midi-output</code> demonstrates the ability to send data to a midi device.</p>"},{"location":"samples/midi-output/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A midi device that can be connected to your computer</li> </ul>"},{"location":"samples/midi-output/#configure-the-midi-output-sample-bundle","title":"Configure the midi-output sample bundle","text":"<ol> <li> <p>In NodeCG, create a new midi-output service instance.</p> </li> <li> <p>Enter your device information:</p> <pre><code>{\n\"device\": \"name\"\n}\n</code></pre> <p>After entering it, click save.</p> <p>Note</p> <p>A script is provided to list all inputs and outputs. It can be run from the sample directory <code>samples/midi-input</code> using the command <code>npm run list</code>. The devices should be listed with their device names and some other stuff.</p> <p>Under Linux this looks for example like this:</p> <pre><code>nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0\n</code></pre> </li> <li> <p>Set the sample's (<code>midi-output</code>) dependency to be the newly created service     instance (of type <code>midi-output</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and random midi messages should be sent to the device that is configured. The messages are only <code>Noteon</code> messages and have a random note and velocity value ranging 0-127. The channels they are sent from are either channel 0 or 1, but the midi protocol supports up to 16 channels, so it could technically range from 0-15.</p> </li> </ol>"},{"location":"samples/midi-output/#note","title":"Note","text":"<p>Only sending <code>Noteon</code> messages is sufficient for most midi, because most of them don't really care if you use proper <code>Noteoff</code> messages or simply send a <code>Noteon</code> with a velocity of 0. This is due to the early days of midi, when integrated circuits were expensive. Allowing a velocity of 0 as replacement for <code>Noteoff</code> made instruments featuring midi more affordable.</p>"},{"location":"samples/mqtt-client/","title":"MQTT","text":""},{"location":"samples/mqtt-client/#using-the-mqtt-client-sample-bundle","title":"Using the MQTT-client sample bundle","text":"<p>The MQTT-client sample bundle in <code>samples/mqtt-client</code> shows how to connect to an MQTT server. This client is based on the MQTT.js package.</p>"},{"location":"samples/mqtt-client/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>MQTT-server</li> </ul>"},{"location":"samples/mqtt-client/#configure-the-mqtt-client-sample-bundle","title":"Configure the MQTT-client sample bundle","text":"<ol> <li> <p>In NodeCG, create a new mqtt-client service instance.</p> </li> <li> <p>Enter the connection parameters of the mqtt server. The URL should be in    following the pattern <code>&lt;protocol&gt;://&lt;address&gt;:&lt;port&gt;</code>. Allowed protocols are:    <code>mqtt</code>, <code>mqtts</code>, <code>tcp</code>, <code>tls</code>, <code>ws</code>, <code>wss</code>.</p> <p>In case your server needs authentication, set the <code>username</code> and <code>password</code> fields otherwise remove them from the configuration:</p> <pre><code>{\n\"address\": \"mqtt://localhost\",\n\"topics\": [\"sample/topic\", \"diffrent/topic2\"],\n\"username\": \"yourUser\",\n\"password\": \"yourPassword\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>mqtt-client</code>) dependency to be the newly created service    instance (of type <code>mqtt-client</code>).</p> </li> <li>The console should display if the connection was successfully established and    should show inbound messages on the subscribed topic.</li> </ol>"},{"location":"samples/nanoleaf/","title":"Nanoleaf","text":""},{"location":"samples/nanoleaf/#using-the-nanoleaf-sample-bundle","title":"Using the Nanoleaf sample bundle","text":"<p>The Nanoleaf example bundle in <code>samples/nanoleaf</code> demonstrates the ability to control your nanoleaf lights. This example code sets all panels to an orange colour. Here is a guide to how to get it working.</p>"},{"location":"samples/nanoleaf/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>IP address of your nanoleaf controller</li> </ul>"},{"location":"samples/nanoleaf/#configure-the-nanoleaf-sample-bundle","title":"Configure the nanoleaf sample bundle","text":"<ol> <li> <p>In NodeCG, create a new nanoleaf service instance.</p> </li> <li> <p>Enter the IP address of your nanoleaf controller:</p> <pre><code>{\n\"ipAddress\": \"xxx.xxx.xxx.xxx\"\n}\n</code></pre> <p>Attention</p> <p>Before clicking save put your nanoleaf controller into pairing mode by holding the on-off button for 5-7 seconds till the LED starts flashing.</p> <p>After entering your config and entering pairing mode, click save.</p> </li> <li> <p>Set the sample's (<code>nanoleaf</code>) dependency to be the newly created service     instance (of type <code>nanoleaf</code>).</p> </li> <li> <p>If everything worked, your nanoleafs should now shine orange.     If not you should check the NodeCG logs for any errors.</p> </li> </ol>"},{"location":"samples/obs/","title":"OBS","text":""},{"location":"samples/obs/#using-the-obs-sample-bundle","title":"Using the OBS sample bundle","text":"<p>The OBS example bundle in <code>samples/obs-scenelist</code> demonstrates the ability to control an OBS instance by listing all available scenes. Here is a guide to how to get it working.</p>"},{"location":"samples/obs/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>OBS with obs-websocket installed</li> </ul> <p>Note</p> <p>OBS is available here and obs-websocket with install instructions is available here.</p>"},{"location":"samples/obs/#configure-the-obs-sample-bundle","title":"Configure the OBS sample bundle","text":"<ol> <li> <p>In NodeCG, create a new obs service instance.</p> </li> <li> <p>Enter the configuration for obs:</p> <pre><code>{\n\"host\": \"localhost\",\n\"port\": 4444,\n\"password\": \"mypassword12345678\"\n}\n</code></pre> <p>Info</p> <p>If you don't want to use a password, you can just remove the password property from the config.</p> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>obs-scenelist</code>) dependency to be the newly created     service instance (of type <code>obs</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and the names of all you scenes that you have set in OBS.</p> </li> </ol>"},{"location":"samples/opentts/","title":"OpenTTS","text":""},{"location":"samples/opentts/#using-the-opentts-sample-bundle","title":"Using the OpenTTS sample bundle","text":"<p>The OpenTTS example bundle in <code>samples/opentts</code> demonstrates the ability to play a tts generated audio in a graphic. Here is a guide to how to get it working.</p>"},{"location":"samples/opentts/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>a OpenTTS Server Instance</li> </ul> <p>Note</p> <p>If you don't have a OpenTTS Server Instance you can create one with Docker. Read here for more information.</p>"},{"location":"samples/opentts/#configure-the-opentts-sample-bundle","title":"Configure the OpenTTS sample bundle","text":"<ol> <li> <p>In NodeCG, create a new opentts service instance.</p> </li> <li> <p>Enter your host information like this</p> <pre><code>{\n\"host\": \"example.com:12345\",\n\"useHttps\": false\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>opentts</code>) dependency to be the newly created service    instance (of type <code>opentts</code>).</p> </li> <li> <p>Open the OpenTTS sample bundle graphic:</p> <p>You should hear \"hello world\" using a random TTS voice.</p> </li> </ol>"},{"location":"samples/philipshue/","title":"Philips Hue sample","text":""},{"location":"samples/philipshue/#using-the-philips-hue-sample-bundle","title":"Using the Philips Hue sample bundle","text":"<p>The philipshue-lights example bundle in <code>samples/philipshue-lights</code> demonstrates the ability to connect to the Philips Hue bridge and control Philips Hue accessories.</p>"},{"location":"samples/philipshue/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A Philips Hue bridge with some connected accessories</li> </ul>"},{"location":"samples/philipshue/#configure-the-philips-hue-sample-bundle","title":"Configure the Philips Hue sample bundle","text":"<ol> <li> <p>In NodeCG, create a new Philips Hue service instance.</p> </li> <li> <p>Enter configuration for hue.</p> <p>If you want the bridge to be automatically discovered just set <code>discover</code> to true like this:</p> <pre><code>{\n\"discover\": true\n}\n</code></pre> <p>If you want to provide the IP address manually you can provide them like this:</p> <pre><code>{\n\"discover\": false,\n\"ipAddr\": \"x.x.x.x\"\n}\n</code></pre> <p>After entering it, press the big link button on your bridge and then click save.</p> <p>Info</p> <p>After the first time you connect to your bridge it will create a user and an API key which will be saved so that you only need to press the link button when you connect it for the first time.</p> </li> <li> <p>Set the sample's (<code>philipshue-lights</code>) dependency to be the newly created     service instance (of type <code>philipshue</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and the number of lights that the bridge knows of.</p> </li> </ol>"},{"location":"samples/rcon/","title":"Rcon sample","text":""},{"location":"samples/rcon/#using-the-rcon-sample-bundle","title":"Using the RCON sample bundle","text":"<p>The RCON sample bundle in <code>samples/rcon-minecraft</code> shows how to send a command to a Minecraft server.</p>"},{"location":"samples/rcon/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A working Minecraft server.</li> </ul>"},{"location":"samples/rcon/#configure-the-rcon-sample-bundle","title":"Configure the RCON sample bundle","text":"<ol> <li> <p>In NodeCG, create a new RCON service instance.</p> </li> <li> <p>Enter the host, port, and password of the RCON connection. This can be found    in the <code>server.properties</code> file (<code>rcon.port</code>, <code>rcon.password</code>):</p> <pre><code>{\n\"host\": \"localhost\",\n\"port\": 25575,\n\"password:\": \"ThisIsAVeryGoodPassword\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>rcon-minecraft</code>) dependency to be the newly created    service instance (of type <code>rcon</code>).</p> </li> <li> <p>In the NodeCG console you will see a list with all online players. It will    also send a /say command to the Minecraft server.</p> </li> </ol>"},{"location":"samples/reddit/","title":"Reddit sample","text":""},{"location":"samples/reddit/#using-the-reddit-sample-bundle","title":"Using the Reddit sample bundle","text":"<p>The reddit-message-read example bundle in <code>samples/reddit-msg-read</code> demonstrates the ability to read recent posts from a subreddit (in this case <code>r/skate702</code>)</p>"},{"location":"samples/reddit/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A Reddit Application (Should be of type script for own purpose)</li> </ul> <p>Note</p> <p>If you don't have such an application yet, you can get one here.</p>"},{"location":"samples/reddit/#configure-the-reddit-sample-bundle","title":"Configure the Reddit sample bundle","text":"<ol> <li> <p>In NodeCG, create a new Reddit service instance.</p> </li> <li> <p>Enter your applications ID and secret and your own username and password. The    entered username and password must be for the user who registered the    application:</p> <pre><code>{\n\"clientId\": \"Your client Id (This is displayed right below the application name)\",\n\"clientSecret\": \"Your client secret\",\n\"username\": \"Your username\",\n\"password\": \"Your password\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>reddit-msg-read</code>) dependency to be the newly created    service instance (of type <code>reddit</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see the recent posts in <code>r/skate702</code></p> </li> </ol>"},{"location":"samples/sacn-receiver/","title":"sACN Receiver sample","text":""},{"location":"samples/sacn-receiver/#using-the-sacn-receiver-sample-bundle","title":"Using the sACN receiver sample bundle","text":"<p>The sacn-receiver-sample example bundle in <code>samples/sacn-receiver-sample</code> demonstrates the ability receive data send via sACN from e.g., professional lighting consoles. Here is a guide to how to get it working.</p>"},{"location":"samples/sacn-receiver/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A working sACN sender in the current network</li> </ul>"},{"location":"samples/sacn-receiver/#configure-the-sacn-sample-bundle","title":"Configure the sACN sample bundle","text":"<ol> <li>In NodeCG, create a new sacn-receiver service instance.</li> <li> <p>Enter the needed options:</p> <p>Universes</p> <p>The universes to use. Must be an array with numbers within 1-63999</p> <pre><code>{\n\"universes\": [1, 2, 3]\n}\n</code></pre> <p>Port</p> <p>Optional. The multicast port to use. All professional consoles broadcast to the default port 5568.</p> <pre><code>{\n\"universes\": [1, 2, 3],\n\"port\": 5568\n}\n</code></pre> <p>Iface Optional. If the computer is connected to multiple networks, specify which network adaptor to use by using this computer's local IP address.</p> <pre><code>{\n\"universes\": [1, 2, 3],\n\"iface\": \"Network Adapter\"\n}\n</code></pre> <p>ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe.</p> <pre><code>{\n\"universes\": [1, 2, 3],\n\"reuseAddr\": true\n}\n</code></pre> <p>After entering them, click save.</p> </li> <li> <p>Set the sample's (<code>sacn-receiver-sample</code>) dependency to be the newly created    service instance (of type <code>sacn-receiver</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see data logged.</p> </li> </ol>"},{"location":"samples/sacn-sender/","title":"sACN Sender sample","text":""},{"location":"samples/sacn-sender/#using-the-sacn-sender-sample-bundle","title":"Using the sACN sender sample bundle","text":"<p>The sacn-sender example bundle in <code>samples/sacn-sender</code> demonstrates the ability send data via sACN to e.g., open lighting architecture or professional lighting equipment. Here is a guide to how to get it working.</p>"},{"location":"samples/sacn-sender/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A working sACN receiver in the current network</li> </ul>"},{"location":"samples/sacn-sender/#configure-the-sacn-sample-bundle","title":"Configure the sACN sample bundle","text":"<ol> <li>In NodeCG, create a new sacn-sender service instance.</li> <li> <p>Enter the needed options:</p> <p>Universes</p> <p>The universes to use. Must be an array with numbers within 1-63999</p> <pre><code>{\n\"universe\": 1\n}\n</code></pre> <p>Port</p> <p>Optional. The multicast port to use. All professional consoles broadcast to the default port 5568.</p> <pre><code>{\n\"universes\": 1,\n\"port\": 5568\n}\n</code></pre> <p>ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe.</p> <pre><code>{\n\"universes\": 1,\n\"reuseAddr\": true\n}\n</code></pre> <p>After entering them, click save.</p> </li> <li> <p>Set the sample's (<code>sacn-sender</code>) dependency to be the newly created service    instance (of type <code>sacn-sender</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see data logged.</p> </li> </ol>"},{"location":"samples/serial/","title":"Serial sample","text":""},{"location":"samples/serial/#using-the-serial-sample-bundle","title":"Using the serial sample bundle","text":"<p>The serial example bundle in <code>samples/serial</code> demonstrates the ability to exchange data with a device that is connected via serial. Here is a guide to how to get it working.</p>"},{"location":"samples/serial/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>An Arduino or any other microcontroller development board that can send and     receive data via serial.</li> </ul>"},{"location":"samples/serial/#configure-the-serial-sample-bundle","title":"Configure the serial sample bundle","text":"<ol> <li> <p>In NodeCG, create a new serial service instance.</p> </li> <li> <p>Enter the information of your device:</p> <pre><code>{\n\"device\": {\n\"port\": \"COM1\"\n}\n}\n</code></pre> <pre><code>{\n\"device\": {\n\"pnpId\": \"usb-Arduino__www.arduino.cc__0043_75835343030351E0D171-if00\"\n}\n}\n</code></pre> <p>After entering it, click save.</p> <p>Note</p> <p>If you want to list all connected devices you can open a terminal in <code>nodecg-io-serial</code> and run <code>npm run list</code>. Note: If you are using multiple devices you might want to use the <code>pnpId</code>, since ports can change between reboots!</p> </li> <li> <p>Set the sample's (<code>serial</code>) dependency to be the newly created service     instance (of type <code>serial</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and nodecg-io will send ping to the microcontroller every 10 seconds. The Arduino device will respond with pong. You should see the pong message displayed in the log.</p> <p>If you see an error or nothing at all, try making sure your microcontroller is plugged in and recognized correctly. Then restart NodeCG, so the service is cleanly restarted.</p> </li> </ol>"},{"location":"samples/serial/#sample-arduino-sketch","title":"Sample Arduino sketch","text":"<pre><code>String inputString = \"\";\nboolean stringComplete = false;\n\nvoid setup() {\nSerial.begin(9600);\n}\n\n// the loop routine runs over and over again forever\nvoid loop() {\nwhile (Serial.available()) {\nchar inChar = (char)Serial.read();\ninputString += inChar;\nif (inChar == '\\n') {\nstringComplete = true;\n}\n}\nif (stringComplete) {\nSerial.println(\"pong\");\nstringComplete = false;\n}\ndelay(1);        // delay in between reads for stability\n}\n</code></pre>"},{"location":"samples/shlink/","title":"Shlink sample","text":""},{"location":"samples/shlink/#using-the-shlink-sample-bundle","title":"Using the Shlink sample bundle","text":"<p>The Shlink example bundle in <code>samples/shlink-list-short-urls</code> demonstrates the ability to control a Shlink server by getting the amount of short URLs configured on the server. Here is a guide on how to get it working.</p>"},{"location":"samples/shlink/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>Shlink server and valid API key / token for it</li> </ul>"},{"location":"samples/shlink/#configure-the-shlink-sample-bundle","title":"Configure the Shlink sample bundle","text":"<ol> <li>In NodeCG, create a new Shlink service instance.</li> <li> <p>Enter the configuration for Shlink:</p> <pre><code>{\n\"url\": \"https://example.com\",\n\"apiKey\": \"1ae89449-f8d2-4b44-baf7-dd7eb0b05017\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>shlink-list-short-urls</code>) dependency to be the newly     created service instance (of type <code>shlink</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and the amount of configured short URLs on the Shlink server.</p> <p>Note</p> <p>When listing short URLs \u2014 like this sample does \u2014 be aware that the amount of short URLs might be limited by the API key role.</p> </li> </ol>"},{"location":"samples/slack/","title":"Slack sample","text":""},{"location":"samples/slack/#using-the-slack-sample-bundle","title":"Using the Slack sample bundle","text":"<p>The Slack example bundle in <code>samples/slack-post</code> demonstrates the ability to list all channels into the console and sends a message to a channel which you have to configure to your channel ID.</p>"},{"location":"samples/slack/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>a Slack Bot token</li> </ul> <p>Note</p> <p>If you don't have such a token yet, you can create your own app with token on this page.</p>"},{"location":"samples/slack/#configure-the-slack-sample-bundle","title":"Configure the Slack sample bundle","text":"<ol> <li> <p>In NodeCG, create a new slack service instance.</p> </li> <li> <p>Enter your Slack app token:</p> <pre><code>{\n\"token\": \"your-token-goes-here\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>slack-post</code>) dependency to be the newly created service    instance (of type <code>slack</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a login message.</p> </li> </ol>"},{"location":"samples/spotify/","title":"Spotify sample","text":""},{"location":"samples/spotify/#using-the-spotify-sample-bundle","title":"Using the Spotify sample bundle","text":"<p>The spotify-current-song example bundle in <code>samples/spotify-current-song</code> demonstrates the ability to get the current playing song of a user. Here is a guide to how to get it working.</p>"},{"location":"samples/spotify/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A Spotify account and a registered Spotify application and the associated     client id/client secret.</li> </ul> <p>Note</p> <p>If you don't have a registered application, yet you can follow this guide. As a redirect URL use http://localhost:9090/nodecg-io-spotify/spotifycallback.</p>"},{"location":"samples/spotify/#configure-the-spotify-sample-bundle","title":"Configure the Spotify sample bundle","text":"<ol> <li> <p>In NodeCG, create a new Spotify service instance.</p> </li> <li> <p>Enter your client ID and secret for Spotify:</p> <pre><code>{\n\"scopes\": [\"user-read-playback-state\"],\n\"clientId\": \"0123456789abcdef0123456789abcdef\",\n\"clientSecret\": \"0123456789abcdef0123456789abcdef\"\n}\n</code></pre> <p>After entering it, click save.</p> <p>Note</p> <p>This sample requires the <code>user-read-playback-state</code> scope, but you can require other scopes if you want to use functions that require them. A list of all scopes can be found here.</p> </li> <li> <p>Set the sample's (<code>spotify-current-song</code>) dependency to be the newly created     service instance (of type <code>spotify</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and the current playing song with names and artists.</p> </li> </ol>"},{"location":"samples/sql/","title":"SQL sample","text":""},{"location":"samples/sql/#using-the-sql-sample-bundle","title":"Using the SQL sample bundle","text":"<p>The SQL example bundle in <code>samples/sql</code> demonstrates the ability to access databases. Here is a guide to how to get it working.</p>"},{"location":"samples/sql/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A database supported by knex</li> </ul> <p>Note</p> <p>If you don't have a database yet and just want to test things you can use sqlite3 and don't need to set up a database server. You can always move to a different database type later.</p>"},{"location":"samples/sql/#configure-the-sql-sample-bundle","title":"Configure the SQL sample bundle","text":"<ol> <li> <p>In NodeCG, create a new SQL service instance.</p> </li> <li> <p>Enter your used database client and a    knex connection object for SQL:</p> <pre><code>{\n\"client\": \"mysql\",\n\"connection\": {\n\"host\": \"localhost\",\n...\n}\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>sql</code>) dependency to be the newly created service instance    (of type <code>sql</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>Your first run of the sample bundle will probably fail because your database doesn't contain the used tables. Check <code>samples/sql/extension/index.ts</code> and create the tables as used or create your own tables and adapt the sample accordingly. You can also use this code as a reference on how to use the SQL client to do your queries.</p> </li> </ol>"},{"location":"samples/streamdeck/","title":"Streamdeck sample","text":""},{"location":"samples/streamdeck/#using-the-streamdeck-rainbow-sample-bundle","title":"Using the StreamDeck rainbow sample bundle","text":"<p>The streamdeck-rainbow bundle paints your streamdeck with different colours. It is located in <code>samples/streamdeck-rainbow</code>.</p> <p>Sadly you can't access the StreamDeck while another application accesses it. So you need to stop your StreamDeck Software before.</p>"},{"location":"samples/streamdeck/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need: (If you're on Linux)</p> <p>Follow the instructions listed under Manual Installation here. Everything after the <code>sudo udevadm</code> command can be omitted.</p>"},{"location":"samples/streamdeck/#configure-the-streamdeck-rainbow-bundle","title":"Configure the StreamDeck Rainbow bundle","text":"<ol> <li> <p>In NodeCG, create a new StreamDeck service instance.</p> </li> <li> <p>Enter the configuration:</p> <pre><code>{\n\"device\": \"default\"\n}\n</code></pre> <p>Info</p> <p><code>default</code> tells the bundle to automatically find a StreamDeck. If you use multiple StreamDecks, you need to put in an ID here.</p> </li> <li> <p>Set the sample's (<code>streamdeck-rainbow</code>) dependency to be the newly created     service instance (of type <code>streamdeck</code>).</p> </li> <li> <p>Watch your streamdeck.</p> </li> </ol>"},{"location":"samples/streamelements/","title":"StreamElements sample","text":""},{"location":"samples/streamelements/#using-the-streamelements-sample-bundle","title":"Using the StreamElements sample bundle","text":"<p>The StreamElements-events example bundle in <code>samples/streamelements-events</code> demonstrates the ability to react to events like donations and subs. Here is a guide to how to get it working.</p>"},{"location":"samples/streamelements/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A StreamElements account</li> </ul>"},{"location":"samples/streamelements/#getting-jwt-token","title":"Getting JWT Token","text":"<p>To use the StreamElements service you need a JWT Token that gives it access to your account.</p> <p>To get it go to https://streamelements.com/dashboard/account/channels, login, click on <code>Show Secrets</code> and copy it.</p>"},{"location":"samples/streamelements/#configure-the-streamelements-sample-bundle","title":"Configure the StreamElements sample bundle","text":"<ol> <li> <p>In NodeCG, create a new StreamElements service instance.</p> </li> <li> <p>Enter the JWT Token for StreamElements:</p> <pre><code>{\n\"jwtToken\": \"&lt;your JWT Token&gt;\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>streamelements-events</code>) dependency to be the newly created    service instance (of type <code>streamelements</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and a log message for each event of your channel like subs, follows, cheers, raids and so on.</p> </li> </ol>"},{"location":"samples/telegram/","title":"Telegram sample","text":""},{"location":"samples/telegram/#using-the-telegram-sample-bundle","title":"Using the telegram sample bundle","text":"<p>The telegram sample bundle in <code>samples/telegram-bot</code> shows how to create a simple command.</p>"},{"location":"samples/telegram/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A telegram-bot API token. You can create your bot     here.</li> </ul>"},{"location":"samples/telegram/#configure-the-telegram-sample-bundle","title":"Configure the telegram sample bundle","text":"<ol> <li> <p>Create a new telegram service instance.</p> </li> <li> <p>Enter the token and set polling to true:</p> <pre><code>{\n\"token\": \"[TOKEN]\",\n\"polling\": true\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>telegram-bot</code>) dependency to be the newly created service    instance (of type <code>telegram</code>).</p> </li> <li> <p>You can send <code>/test</code> to your bot, and it should respond with two messages.</p> </li> </ol>"},{"location":"samples/tiane/","title":"TIANE sample","text":""},{"location":"samples/tiane/#using-the-tiane-discord-sample-bundle","title":"Using the TIANE-Discord sample bundle","text":"<p>The TIANE-Discord example bundle in <code>samples/tiane-discord</code> shows how to make TIANE act as a discord bot. TIANE is a German open source smart home assistant written in python. Here is a guide to how to get it working.</p>"},{"location":"samples/tiane/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A working TIANE server installation. (No     room client required)</li> <li>a Discord Bot token</li> </ul> <p>Note</p> <p>If you don't Discord Bot token yet, you can follow this guide.</p>"},{"location":"samples/tiane/#configure-the-tiane-sample-bundle","title":"Configure the TIANE sample bundle","text":"<ol> <li> <p>Edit the file <code>samples/tiane-discord/extension/index.ts</code>. Look for this line:</p> <pre><code>const discordChannel = \"\"; // Insert channel for the discord bot here\n</code></pre> <p>Put the channel ID of a discord channel where you want to talk to TIANE between the quotation marks. See here to find out how to get a channel ID.</p> </li> <li> <p>Run <code>npm run build</code> in the main nodecg-io directory.</p> </li> <li> <p>Edit the file <code>server/TIANE_config.json</code> on your TIANE server:</p> <pre><code>{\n\"websocket\": \"enabled\",\n\"websocket_port\": 19526,\n\"websocket_timeout\": 20\n}\n</code></pre> <p>Make sure <code>websocket</code> is either set to <code>enabled</code> or <code>secure</code> and set a port of your desire.</p> </li> <li> <p>In the NodeCG dashboard, create a new TIANE service instance.</p> </li> <li> <p>Enter address of the TIANE-Server. Enter host and port you just set in    <code>server/TIANE_config.json</code> in this format:</p> <pre><code>{\n\"address\": \"127.0.0.1:19526\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Create a new Discord service instance.</p> </li> <li> <p>Set the sample's (<code>tiane-discord</code>) dependencies to be the newly created    service instances (of type <code>tiane</code> &amp; <code>discord</code>).</p> </li> <li> <p>Ping your discord bot in the channel you set in the first step and ask TIANE    something.</p> </li> </ol>"},{"location":"samples/twitch-addons/","title":"Twitch-Addons sample","text":""},{"location":"samples/twitch-addons/#using-the-twitch-addons-sample-bundle","title":"Using the Twitch-Addons sample bundle","text":"<p>The Twitch-Addons example bundle in <code>samples/twitch-addons</code> demonstrates the ability to send requests to the APIs of BetterTTV, and FrankerFaceZ.</p>"},{"location":"samples/twitch-addons/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A Twitch oAuth-Key</li> </ul> <p>Note</p> <p>If you don't have such a key yet, you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token. You can also use any other token. There are no special scope requirements as the token is only used to convert channel names to IDs.</p>"},{"location":"samples/twitch-addons/#configure-the-twitch-addons-sample-bundle","title":"Configure the Twitch-Addons sample bundle","text":"<ol> <li> <p>In NodeCG, create a new twitch-addons service instance.</p> </li> <li> <p>Enter your Twitch OAuth Key:</p> <pre><code>{\n\"oauthKey\": \"oauth:abcdef....\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>twitch-addons</code>) dependency to be the newly created service    instance (of type <code>twitch-addons</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and all BetterTTV and FFZ emotes from the twitch channel <code>#derniklaas</code></p> </li> </ol>"},{"location":"samples/twitch-api/","title":"Twitch-Api sample","text":""},{"location":"samples/twitch-api/#using-the-twitch-api-sample-bundle","title":"Using the Twitch API sample bundle","text":"<p>The twitch-api example bundle in <code>samples/twitch-api</code> demonstrates the ability to access the twitch API (kraken/helix). Here is a guide to how to get it working.</p>"},{"location":"samples/twitch-api/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A Twitch oAuth-Key</li> </ul> <p>Note</p> <p>If you don't have such a key yet, you can generate it on https://twitchtokengenerator.com/, select custom scope token and select the scopes you need. For this sample you don't need any additional scopes, so you can leave everything off.</p>"},{"location":"samples/twitch-api/#configure-the-twitch-api-sample-bundle","title":"Configure the Twitch API sample bundle","text":"<ol> <li> <p>In NodeCG, create a new twitch-api service instance.</p> </li> <li> <p>Enter your Twitch OAuth Key:</p> <pre><code>{\n\"oauthKey\": \"oauth:abcdef....\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>twitch-api</code>) dependency to be the newly created service    instance (of type <code>twitch-api</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and you current username, how many people you follow and if you are currently streaming.</p> </li> </ol>"},{"location":"samples/twitch-chat/","title":"Twitch-Chat sample","text":""},{"location":"samples/twitch-chat/#using-the-twitch-sample-bundle","title":"Using the Twitch sample bundle","text":"<p>The Twitch-chat example bundle in <code>samples/twitch-chat</code> demonstrates the ability to get access to a twitch chat and printing all messages of it. Here is a guide to how to get it working.</p>"},{"location":"samples/twitch-chat/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>a Twitch oAuth-Key</li> </ul> <p>Note</p> <p>If you don't have such a key yet, you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token.</p>"},{"location":"samples/twitch-chat/#configure-the-twitch-sample-bundle","title":"Configure the Twitch sample bundle","text":"<ol> <li> <p>In NodeCG, create a new twitch-chat service instance.</p> </li> <li> <p>Enter your Twitch OAuth Key:</p> <pre><code>{\n\"oauthKey\": \"oauth:abcdef....\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>twitch-chat</code>) dependency to be the newly created service    instance (of type <code>twitch-chat</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in <code>samples/twitch-chat/extension/index.ts</code>.</p> </li> </ol>"},{"location":"samples/twitch-pubsub/","title":"Twitch-Pubsub sample","text":""},{"location":"samples/twitch-pubsub/#using-the-twitch-pubsub-sample-bundle","title":"Using the Twitch PubSub sample bundle","text":"<p>The twitch-pubsub example bundle in <code>samples/twitch-pubsub</code> demonstrates the ability to use the Twitch PubSub API. Here is a guide to how to get it working.</p>"},{"location":"samples/twitch-pubsub/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>A Twitch oAuth-Key</li> </ul> <p>Note</p> <p>If you don't have such a key yet, you can generate it on https://twitchtokengenerator.com/, select custom scope token and select these scopes: <code>channel_subscriptions</code>, <code>bits:read</code> and <code>channel:read:redemptions</code></p>"},{"location":"samples/twitch-pubsub/#configure-the-twitch-pubsub-sample-bundle","title":"Configure the Twitch PubSub sample bundle","text":"<ol> <li> <p>In NodeCG, create a new twitch-pubsub service instance.</p> </li> <li> <p>Enter your Twitch OAuth Key:</p> <pre><code>{\n\"oauthKey\": \"oauth:abcdef....\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>twitch-pubsub</code>) dependency to be the newly created service    instance (of type <code>twitch-pubsub</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and a log entry for each subscription, bits, bits badge unlock and channel point redemption event.</p> </li> </ol>"},{"location":"samples/twitter/","title":"Twitter sample","text":""},{"location":"samples/twitter/#using-the-twitter-sample-bundle","title":"Using the twitter sample bundle","text":"<p>The Twitter timeline bundle retrieves some of the latest tweets from skate702 and printing them to your console.</p>"},{"location":"samples/twitter/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>An app and their following keys and     tokens<ul> <li>The API key here oauthConsumerKey</li> <li>The API secret key here oauthConsumerSecret</li> <li>The Access token here oauthToken</li> <li>The Access token secret here oauthTokenSecret</li> </ul> </li> </ul> <p>Note</p> <p>You will need a Twitter developer account (https://developer.twitter.com/en/apply-for-access) to get the necessary keys and tokens.</p>"},{"location":"samples/twitter/#configure-the-sample-bundle","title":"Configure the sample bundle","text":"<ol> <li> <p>In NodeCG, create a new twitter service instance.</p> </li> <li> <p>Enter your Twitter keys and tokens:</p> <pre><code>{\n\"oauthConsumerKey\": \"&lt;API key&gt;\",\n\"oauthConsumerSecret\": \"&lt;API secret key&gt;\",\n\"oauthToken\": \"&lt;Access token&gt;\",\n\"oauthTokenSecret\": \"&lt;Access token secret&gt;\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>twitter-timeline</code>) dependency to be the newly created    service instance (of type <code>twitter</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message and up to 50 Twitter messages tweeted by the user that is hardcoded in samples/twitter-timeline/extension/index.ts as <code>screen_name</code>.</p> </li> </ol>"},{"location":"samples/twitter/#need-to-know-for-creating-your-own-twitter-bundle","title":"Need to know for creating your own twitter bundle","text":""},{"location":"samples/twitter/#a-little-description-of-the-twitter-client-and-its-usage","title":"A little description of the twitter client and it's usage","text":"<ul> <li> <p>The client implements the different     API endpoints     with two functions</p> <pre><code>  client.get(\"&lt;get endpoint name&gt;\", params, callback)\nclient.post(\"&lt;post endpoint name&gt;\", params, callback)\n\n// Instead of callbacks it can be used with promises\nclient\n.get(\"statuses/user_timeline\", {screen_name: \"skate702\"})\n.then((tweets) =&gt; /* Do something with the tweets */)\n.catch((error) =&gt; /* Handle error */);\n\n// Or async and await as well\ntry {\nconst tweets = await client.get(\"statuses/user_timeline\", {screen_name: \"skate702\"});\n// Do something with the tweets\n} catch (error) {\n// Handle error\n}\n</code></pre> </li> </ul>"},{"location":"samples/twitter/#a-more-precise-description-of-what-can-be-done-with-this-twitter-client-can-be-found-here","title":"A more precise description of what can be done with this twitter client can be found here","text":""},{"location":"samples/websocket-client/","title":"Client sample","text":""},{"location":"samples/websocket-client/#using-the-websocket-client-sample-bundle","title":"Using the WebSocket-client sample bundle","text":"<p>The WebSocket-client sample bundle in <code>samples/websocket-client</code> shows how to set up a simple WebSocket client that will ping a server every second.</p>"},{"location":"samples/websocket-client/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>For simplicity's sake this sample will rely upon the websocket-server sample.</p>"},{"location":"samples/websocket-client/#configure-the-websocket-client-sample-bundle","title":"Configure the WebSocket-client sample bundle","text":"<p>Please set up the WebSocket-server bundle first and then follow these steps:</p> <ol> <li> <p>In NodeCG, create a new ws-client service instance.</p> </li> <li> <p>Enter the address of the sample server. This has to be a URL following the    pattern <code>ws://localhost:&lt;port&gt;</code>.</p> <pre><code>{\n\"address\": \"ws://localhost:7777\"\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>websocket-client</code>) dependency to be the newly created    service instance (of type <code>websocket-client</code>).</p> </li> <li> <p>A websocket-client has been connected and the console should display if a    ping is sent or a pong is received.</p> </li> </ol>"},{"location":"samples/websocket-server/","title":"Server sample","text":""},{"location":"samples/websocket-server/#using-the-websocket-server-sample-bundle","title":"Using the WebSocket Server sample bundle","text":"<p>The WebSocket-server sample bundle in <code>samples/websocket-server</code> shows how to set up a simple WebSocket server that will relay all incoming messages to all connected clients.</p>"},{"location":"samples/websocket-server/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p>"},{"location":"samples/websocket-server/#configure-the-websocket-server-sample-bundle","title":"Configure the websocket-server sample bundle","text":"<ol> <li>In NodeCG, create a new ws-server service instance.</li> <li> <p>Enter a port for the server. This has to be a number from 0 to 65535:</p> <pre><code>{\n\"port\": 7777\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>websocket-server</code>) dependency to be the newly created    service instance (of type <code>websocket-server</code>).</p> </li> <li> <p>A websocket-server has been started at the specified port.</p> </li> </ol>"},{"location":"samples/xdotool/","title":"Xdotool sample","text":""},{"location":"samples/xdotool/#using-the-xdotool-sample-bundle","title":"Using the Xdotool sample bundle","text":"<p>The Xdotool sample bundle in <code>samples/xdotool-windowminimize</code> shows how to use the xdotool service to execute xdotool commands by minimizing the currently active window.</p> <p>Attention</p> <p>Only works on Linux</p>"},{"location":"samples/xdotool/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <ul> <li>Xdotool installed</li> </ul>"},{"location":"samples/xdotool/#configure-the-xdotool-sample-bundle","title":"Configure the Xdotool sample bundle","text":"<ol> <li> <p>In NodeCG, create a new xdotool service instance.</p> </li> <li> <p>Enter settings port <code>-1</code> tells nodecg-io to use a locally installed xdotool:</p> <pre><code>{\n\"host\": \"127.0.0.1\",\n\"port\": -1\n}\n</code></pre> <p>After entering it, click save.</p> </li> <li> <p>Set the sample's (<code>xdotool-windowminimize</code>) dependency to be the newly    created service instance (of type <code>xdotool</code>).</p> </li> <li> <p>Your browser window should get minimized.</p> </li> </ol>"},{"location":"samples/youtube/","title":"Youtube sample","text":""},{"location":"samples/youtube/#using-the-youtube-sample-bundle","title":"Using the YouTube sample bundle","text":"<p>The YouTube bundle in <code>samples/youtube-playlist</code> demonstrates the ability of getting information of a playlist. Here is a guide to how to get it working.</p>"},{"location":"samples/youtube/#prerequisites","title":"Prerequisites","text":"<p>You will need a working <code>nodecg-io</code> installation. If you have non yet take a look at installation guide. You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d-Guide. It will also tell you how to log in and how to use the GUI.</p> <p>You also need:</p> <ul> <li>Google cloud API OAuth access (client ID, client Secret)</li> <li>Grant <code>YouTube Data API v3</code> access at the project's dashboard.<ul> <li>Shortcut URL:     <code>https://console.developers.google.com/apis/library/youtube.googleapis.com?project=&lt;project-id&gt;</code>.</li> </ul> </li> </ul> <p>Note</p> <p>If you don't have such a key yet, you can generate them like this. As redirect URI add:</p> <p>http://localhost:9090/nodecg-io-googleapis/oauth2callback</p>"},{"location":"samples/youtube/#configure-the-youtube-sample-bundle","title":"Configure the YouTube sample bundle","text":"<ol> <li> <p>In NodeCG, create a new googleapis service instance.</p> </li> <li> <p>Enter your YouTube OAuth credentials:</p> <pre><code>{\n\"clientID\": \"&lt;clientID&gt;\",\n\"clientSecret\": \"&lt;clientSecret&gt;\",\n\"scopes\": [\"https://www.googleapis.com/auth/youtube\"]\n}\n</code></pre> <p>After entering it, click save.</p> <p>Note</p> <p>You can add multiple scopes if the googleapis instance is used for multiple bundles.</p> </li> <li> <p>Set the sample's (<code>youtube-playlist</code>) dependency to be the newly created     service instance (of type <code>googleapis</code>).</p> </li> <li> <p>Check the NodeCG logs:</p> <p>You should see an error or a success message that is hardcoded in <code>samples/youtube-playlist/extension/index.ts</code>.</p> </li> </ol>"}]}