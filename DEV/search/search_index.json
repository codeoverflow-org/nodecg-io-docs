{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nodecg-io nodecg-io is a NodeCG -bundle that implements Social Media API's in the NodeCG framework About nodecg-io nodecg-io is the successor of ChatOverflow . The aim of this bundle is to simplify the code and expand the number of integrated services. The main goal is to increase the number of supported APIs to save you development time. How to use nodecg-io If you want to use nodecg-io, you should note that it is only a framework for your bundle. So you need at least a basic knowledge of the programming language JavaScript or any other language that compiles to JavaScript like TypeScript. If that's no problem you can head over to the installation guide and take a look at the available nodecg-io services . Implemented Services and Interfaces AutoHotkey Android (using adb) Art-Net Atem CurseForge DBus Discord Discord RPC Elgato lights GitHub Google APIs Google Cast IntelliJ IDEs IRC (Internet Relay Chat) MIDI Input MIDI Output MQTT Nanoleafs OBS Philips Hue RCON Reddit sACN Receiver sACN Sender Serial Port (Arduino) Shlink Slack Web API Spotify SQL (using knex ) Elgato Stream Deck StreamElements Telegram TIANE Twitch Add-ons Twitch API Twitch Chat Twitch PubSub Twitter WebSocket Client WebSocket Server Xdotool How to contribute If you want to contribute to this bundle you can implement one of those services or fix an issue . Before contributing head over to the \u201cHow to contribute\u201d -Guide.","title":"Home"},{"location":"#nodecg-io","text":"nodecg-io is a NodeCG -bundle that implements Social Media API's in the NodeCG framework","title":"nodecg-io"},{"location":"#about-nodecg-io","text":"nodecg-io is the successor of ChatOverflow . The aim of this bundle is to simplify the code and expand the number of integrated services. The main goal is to increase the number of supported APIs to save you development time.","title":"About nodecg-io"},{"location":"#how-to-use-nodecg-io","text":"If you want to use nodecg-io, you should note that it is only a framework for your bundle. So you need at least a basic knowledge of the programming language JavaScript or any other language that compiles to JavaScript like TypeScript. If that's no problem you can head over to the installation guide and take a look at the available nodecg-io services .","title":"How to use nodecg-io"},{"location":"#implemented-services-and-interfaces","text":"AutoHotkey Android (using adb) Art-Net Atem CurseForge DBus Discord Discord RPC Elgato lights GitHub Google APIs Google Cast IntelliJ IDEs IRC (Internet Relay Chat) MIDI Input MIDI Output MQTT Nanoleafs OBS Philips Hue RCON Reddit sACN Receiver sACN Sender Serial Port (Arduino) Shlink Slack Web API Spotify SQL (using knex ) Elgato Stream Deck StreamElements Telegram TIANE Twitch Add-ons Twitch API Twitch Chat Twitch PubSub Twitter WebSocket Client WebSocket Server Xdotool","title":"Implemented Services and Interfaces"},{"location":"#how-to-contribute","text":"If you want to contribute to this bundle you can implement one of those services or fix an issue . Before contributing head over to the \u201cHow to contribute\u201d -Guide.","title":"How to contribute"},{"location":"dependencies/","text":"Dependency Graph \u00abcore\u00bb nodecg-io-core \u00ablib\u00bb ajv \u00ablib\u00bb crypto-js \u00ablib\u00bb tslib \u00abservice\u00bb nodecg-io-ahk \u00ablib\u00bb node-fetch \u00abservice\u00bb nodecg-io-android \u00ablib\u00bb @rauschma/stringio \u00ablib\u00bb get-stream \u00abservice\u00bb nodecg-io-artnet \u00ablib\u00bb artnet-protocol \u00abservice\u00bb nodecg-io-atem \u00ablib\u00bb atem-connection \u00abservice\u00bb nodecg-io-curseforge \u00abservice\u00bb nodecg-io-dbus \u00ablib\u00bb dbus-next \u00abservice\u00bb nodecg-io-debug \u00ablib\u00bb nodecg-types \u00abservice\u00bb nodecg-io-discord \u00ablib\u00bb discord.js \u00abservice\u00bb nodecg-io-discord-rpc \u00ablib\u00bb discord-rpc \u00ablib\u00bb @types/discord-rpc \u00abservice\u00bb nodecg-io-elgato-light \u00ablib\u00bb @types/node-fetch \u00abservice\u00bb nodecg-io-github \u00ablib\u00bb @octokit/rest \u00abservice\u00bb nodecg-io-googleapis \u00ablib\u00bb @types/gapi \u00ablib\u00bb googleapis \u00ablib\u00bb open \u00abservice\u00bb nodecg-io-intellij \u00abservice\u00bb nodecg-io-irc \u00ablib\u00bb @types/irc \u00ablib\u00bb irc \u00abservice\u00bb nodecg-io-midi-input \u00ablib\u00bb easymidi \u00abservice\u00bb nodecg-io-midi-output \u00abservice\u00bb nodecg-io-mqtt-client \u00ablib\u00bb mqtt \u00abservice\u00bb nodecg-io-nanoleaf \u00abservice\u00bb nodecg-io-obs \u00ablib\u00bb obs-websocket-js \u00abservice\u00bb nodecg-io-philipshue \u00ablib\u00bb is-ip \u00ablib\u00bb node-hue-api \u00abservice\u00bb nodecg-io-rcon \u00ablib\u00bb rcon-client \u00abservice\u00bb nodecg-io-reddit \u00ablib\u00bb reddit-ts \u00abservice\u00bb nodecg-io-sacn-receiver \u00ablib\u00bb sacn \u00abservice\u00bb nodecg-io-sacn-sender \u00abservice\u00bb nodecg-io-serial \u00ablib\u00bb @serialport/parser-readline \u00ablib\u00bb @types/serialport \u00ablib\u00bb serialport \u00abservice\u00bb nodecg-io-shlink \u00ablib\u00bb shlink-client \u00abservice\u00bb nodecg-io-slack \u00ablib\u00bb @slack/web-api \u00abservice\u00bb nodecg-io-spotify \u00ablib\u00bb @types/spotify-web-api-node \u00ablib\u00bb spotify-web-api-node \u00abservice\u00bb nodecg-io-sql \u00ablib\u00bb knex \u00abservice\u00bb nodecg-io-streamdeck \u00ablib\u00bb @elgato-stream-deck/node \u00abservice\u00bb nodecg-io-streamelements \u00ablib\u00bb @types/socket.io-client \u00ablib\u00bb socket.io-client \u00abservice\u00bb nodecg-io-telegram \u00ablib\u00bb @types/node-telegram-bot-api \u00ablib\u00bb node-telegram-bot-api \u00abservice\u00bb nodecg-io-template \u00abservice\u00bb nodecg-io-tiane \u00ablib\u00bb ws \u00abservice\u00bb nodecg-io-twitch-addons \u00ablib\u00bb nodecg-io-twitch-auth \u00abservice\u00bb nodecg-io-twitch-api \u00ablib\u00bb @twurple/api \u00abservice\u00bb nodecg-io-twitch-chat \u00ablib\u00bb @twurple/chat \u00abservice\u00bb nodecg-io-twitch-pubsub \u00ablib\u00bb @twurple/pubsub \u00abservice\u00bb nodecg-io-twitter \u00ablib\u00bb @types/twitter \u00ablib\u00bb twitter \u00abservice\u00bb nodecg-io-websocket-client \u00ablib\u00bb @types/ws \u00abservice\u00bb nodecg-io-websocket-server \u00abservice\u00bb nodecg-io-xdotool","title":"Dependency Graph"},{"location":"dependencies/#dependency-graph","text":"\u00abcore\u00bb nodecg-io-core \u00ablib\u00bb ajv \u00ablib\u00bb crypto-js \u00ablib\u00bb tslib \u00abservice\u00bb nodecg-io-ahk \u00ablib\u00bb node-fetch \u00abservice\u00bb nodecg-io-android \u00ablib\u00bb @rauschma/stringio \u00ablib\u00bb get-stream \u00abservice\u00bb nodecg-io-artnet \u00ablib\u00bb artnet-protocol \u00abservice\u00bb nodecg-io-atem \u00ablib\u00bb atem-connection \u00abservice\u00bb nodecg-io-curseforge \u00abservice\u00bb nodecg-io-dbus \u00ablib\u00bb dbus-next \u00abservice\u00bb nodecg-io-debug \u00ablib\u00bb nodecg-types \u00abservice\u00bb nodecg-io-discord \u00ablib\u00bb discord.js \u00abservice\u00bb nodecg-io-discord-rpc \u00ablib\u00bb discord-rpc \u00ablib\u00bb @types/discord-rpc \u00abservice\u00bb nodecg-io-elgato-light \u00ablib\u00bb @types/node-fetch \u00abservice\u00bb nodecg-io-github \u00ablib\u00bb @octokit/rest \u00abservice\u00bb nodecg-io-googleapis \u00ablib\u00bb @types/gapi \u00ablib\u00bb googleapis \u00ablib\u00bb open \u00abservice\u00bb nodecg-io-intellij \u00abservice\u00bb nodecg-io-irc \u00ablib\u00bb @types/irc \u00ablib\u00bb irc \u00abservice\u00bb nodecg-io-midi-input \u00ablib\u00bb easymidi \u00abservice\u00bb nodecg-io-midi-output \u00abservice\u00bb nodecg-io-mqtt-client \u00ablib\u00bb mqtt \u00abservice\u00bb nodecg-io-nanoleaf \u00abservice\u00bb nodecg-io-obs \u00ablib\u00bb obs-websocket-js \u00abservice\u00bb nodecg-io-philipshue \u00ablib\u00bb is-ip \u00ablib\u00bb node-hue-api \u00abservice\u00bb nodecg-io-rcon \u00ablib\u00bb rcon-client \u00abservice\u00bb nodecg-io-reddit \u00ablib\u00bb reddit-ts \u00abservice\u00bb nodecg-io-sacn-receiver \u00ablib\u00bb sacn \u00abservice\u00bb nodecg-io-sacn-sender \u00abservice\u00bb nodecg-io-serial \u00ablib\u00bb @serialport/parser-readline \u00ablib\u00bb @types/serialport \u00ablib\u00bb serialport \u00abservice\u00bb nodecg-io-shlink \u00ablib\u00bb shlink-client \u00abservice\u00bb nodecg-io-slack \u00ablib\u00bb @slack/web-api \u00abservice\u00bb nodecg-io-spotify \u00ablib\u00bb @types/spotify-web-api-node \u00ablib\u00bb spotify-web-api-node \u00abservice\u00bb nodecg-io-sql \u00ablib\u00bb knex \u00abservice\u00bb nodecg-io-streamdeck \u00ablib\u00bb @elgato-stream-deck/node \u00abservice\u00bb nodecg-io-streamelements \u00ablib\u00bb @types/socket.io-client \u00ablib\u00bb socket.io-client \u00abservice\u00bb nodecg-io-telegram \u00ablib\u00bb @types/node-telegram-bot-api \u00ablib\u00bb node-telegram-bot-api \u00abservice\u00bb nodecg-io-template \u00abservice\u00bb nodecg-io-tiane \u00ablib\u00bb ws \u00abservice\u00bb nodecg-io-twitch-addons \u00ablib\u00bb nodecg-io-twitch-auth \u00abservice\u00bb nodecg-io-twitch-api \u00ablib\u00bb @twurple/api \u00abservice\u00bb nodecg-io-twitch-chat \u00ablib\u00bb @twurple/chat \u00abservice\u00bb nodecg-io-twitch-pubsub \u00ablib\u00bb @twurple/pubsub \u00abservice\u00bb nodecg-io-twitter \u00ablib\u00bb @types/twitter \u00ablib\u00bb twitter \u00abservice\u00bb nodecg-io-websocket-client \u00ablib\u00bb @types/ws \u00abservice\u00bb nodecg-io-websocket-server \u00abservice\u00bb nodecg-io-xdotool","title":"Dependency Graph"},{"location":"services/","text":"Available nodecg-io services nodecg-io-core The core of nodecg-io. Connects everything up. Depends on ajv @ ^8.11.0 Depends on crypto-js @ ^4.1.1 Depends on tslib @ ^2.4.0 nodecg-io-ahk Allows you to send commands to AutoHotkey. See the sample implementation Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-android Allows to connect to an android device via adb. See the sample implementation Depends on @rauschma/stringio @ ^1.4.0 Depends on get-stream @ ^6.0.1 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-artnet Allows you to send DMX512 data over Art-Net\u2122 to to Art-Net nodes i.e. professional lighting fixtures. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on artnet-protocol @ ^0.2.1 nodecg-io-atem Allows to connect via the Atem Protocol. See the sample implementation Depends on atem-connection @ ^3.0.0 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-curseforge A service to communicate with the CurseForge API. See the sample implementation Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-dbus Allows to interface with DBus There's no sample implementation for this service yet. Depends on nodecg-io-core @ ^0.3.0 Depends on dbus-next @ ^0.10.2 nodecg-io-debug Debug helper service that helps to easily trigger your code for debugging purposes. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-types @ ^1.9.0 nodecg-io-discord Allows to connect to discord via a discord-bot. See the sample implementation Depends on discord.js @ ^14.3.0 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-discord-rpc Allows to interface with a locally running discord client via RPC See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on discord-rpc @ ^4.0.1 Depends on @types/discord-rpc @ ^4.0.3 Depends on node-fetch @ ^2.6.7 nodecg-io-elgato-light Control your Elgato lights, e.g. key lights and light stripes. See the sample implementation Depends on @types/node-fetch @ ^2.6.1 Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-github Allows to connect to the GitHub REST API See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on @octokit/rest @ ^19.0.4 nodecg-io-googleapis Allows to connect to and interact with many google-apis There's no sample implementation for this service yet. Depends on @types/gapi @ ^0.0.42 Depends on googleapis @ ^107.0.0 Depends on nodecg-io-core @ ^0.3.0 Depends on open @ ^8.4.0 nodecg-io-intellij Allows to control JetBrains IDEs via nodecg-io See the sample implementation Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-irc Allow to connect to IRC Servers. See the sample implementation Depends on @types/irc @ ^0.5.1 Depends on irc @ ^0.5.2 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-midi-input Connect to MIDI devices and control the volume of your voice or music with a fader. See the sample implementation Depends on easymidi @ ^2.1.0 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-midi-output Connect to MIDI devices and control the volume of your voice or music with a fader. See the sample implementation Depends on easymidi @ ^2.1.0 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-mqtt-client Allows you to connect with an MQTT server. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on mqtt @ ^4.3.7 nodecg-io-nanoleaf Allows to connect to a nanoleaf controller and trigger custom lighting effects. See the sample implementation Depends on @types/node-fetch @ ^2.6.1 Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-types @ ^1.9.0 nodecg-io-obs Allows to control your obs instance to e.g. switch scenes. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on obs-websocket-js @ ^5.0.1 nodecg-io-philipshue Allows you to connect with your Philips Hue bridge. This allows you to control your lights etc. See the sample implementation Depends on is-ip @ ^3.1.0 Depends on node-hue-api @ ^4.0.11 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-rcon Allows you to send commands to a minecraft server via RCON. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on rcon-client @ ^4.2.3 nodecg-io-reddit Provides an interface to the Reddit-API. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on reddit-ts @ https://github.com/noeppi-noeppi/npm-reddit-ts.git#build nodecg-io-sacn-receiver Allows you to receive data via sACN from e.g professional lighting consoles. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on sacn @ ^4.2.0 nodecg-io-sacn-sender Allows you to send data via sACN to e.g professional lights. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on sacn @ ^4.2.0 nodecg-io-serial Exposes serial deivces to nodecg-io See the sample implementation Depends on @serialport/parser-readline @ ^10.3.0 Depends on @types/serialport @ ^8.0.2 Depends on nodecg-io-core @ ^0.3.0 Depends on serialport @ ^10.4.0 nodecg-io-shlink Allows you to create Shlink short links See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on shlink-client @ ^1.0.1 nodecg-io-slack Allows to connect to your slack. This enables you to e.g. send messages and list all channel. Visit https://api.slack.com/methods to see all methods See the sample implementation Depends on @slack/web-api @ ^6.7.2 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-spotify Allows to connect to your personal Spotify account. This enables you to e.g. control music playback or get current song information. See the sample implementation Depends on @types/spotify-web-api-node @ ^5.0.7 Depends on nodecg-io-core @ ^0.3.0 Depends on open @ ^8.4.0 Depends on spotify-web-api-node @ ^5.0.2 nodecg-io-sql SQL service based on knex.js. Different clients like mysql are supported but have to be installed separately. See the sample implementation Depends on knex @ ^2.2.0 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-streamdeck Allows to interface with the elgato streamdeck. See the sample implementation Depends on @elgato-stream-deck/node @ ^5.5.0 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-streamelements Allows to connect to streamelements to e.g. react to donations. See the sample implementation Depends on @types/socket.io-client @ ^1.4.36 Depends on nodecg-io-core @ ^0.3.0 Depends on socket.io-client @ ^2.4.0 nodecg-io-telegram Allows you to control a telegram bot. See the sample implementation Depends on @types/node-telegram-bot-api @ ^0.57.1 Depends on node-telegram-bot-api @ ^0.58.0 Depends on nodecg-io-core @ ^0.3.0 nodecg-io-template Template package. There's no sample implementation for this service yet. Depends on nodecg-io-core @ ^0.3.0 nodecg-io-tiane Connect to TIANE and make her for example a discord bot. https://github.com/FerdiKr/TIANE See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on ws @ ^8.8.1 nodecg-io-twitch-addons Support for the API's of BetterTTV and FrankerFaceZ See the sample implementation Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-io-twitch-auth @ ^0.3.0 nodecg-io-twitch-api Allows talking to twitch APIs like helix. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-io-twitch-auth @ ^0.3.0 Depends on @twurple/api @ ^5.2.1 nodecg-io-twitch-chat Allows to connect to the twitch chat with your account, send and receive messages and much more. It can be used to create Twitch-Bots. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-io-twitch-auth @ ^0.3.0 Depends on @twurple/chat @ ^5.2.2 nodecg-io-twitch-pubsub Allows access to the Twitch PubSub API. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-io-twitch-auth @ ^0.3.0 Depends on @twurple/api @ ^5.2.1 Depends on @twurple/pubsub @ ^5.2.2 nodecg-io-twitter Allows to connect to twitter, send, retweet or like messages. See the sample implementation Depends on @types/twitter @ ^1.7.1 Depends on nodecg-io-core @ ^0.3.0 Depends on twitter @ ^1.7.1 nodecg-io-websocket-client Allows to connect to a external WebSocket server. See the sample implementation Depends on @types/ws @ ^8.5.3 Depends on nodecg-io-core @ ^0.3.0 Depends on ws @ ^8.8.1 nodecg-io-websocket-server Allows to create a custom WebSocket server. See the sample implementation Depends on @types/ws @ ^8.5.3 Depends on nodecg-io-core @ ^0.3.0 Depends on ws @ ^8.8.1 nodecg-io-xdotool Allows you to send commands to xdotool. See the sample implementation Depends on @rauschma/stringio @ ^1.4.0 Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0","title":"Available services"},{"location":"services/#available-nodecg-io-services","text":"","title":"Available nodecg-io services"},{"location":"services/#nodecg-io-core","text":"The core of nodecg-io. Connects everything up. Depends on ajv @ ^8.11.0 Depends on crypto-js @ ^4.1.1 Depends on tslib @ ^2.4.0","title":"nodecg-io-core"},{"location":"services/#nodecg-io-ahk","text":"Allows you to send commands to AutoHotkey. See the sample implementation Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-ahk"},{"location":"services/#nodecg-io-android","text":"Allows to connect to an android device via adb. See the sample implementation Depends on @rauschma/stringio @ ^1.4.0 Depends on get-stream @ ^6.0.1 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-android"},{"location":"services/#nodecg-io-artnet","text":"Allows you to send DMX512 data over Art-Net\u2122 to to Art-Net nodes i.e. professional lighting fixtures. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on artnet-protocol @ ^0.2.1","title":"nodecg-io-artnet"},{"location":"services/#nodecg-io-atem","text":"Allows to connect via the Atem Protocol. See the sample implementation Depends on atem-connection @ ^3.0.0 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-atem"},{"location":"services/#nodecg-io-curseforge","text":"A service to communicate with the CurseForge API. See the sample implementation Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-curseforge"},{"location":"services/#nodecg-io-dbus","text":"Allows to interface with DBus There's no sample implementation for this service yet. Depends on nodecg-io-core @ ^0.3.0 Depends on dbus-next @ ^0.10.2","title":"nodecg-io-dbus"},{"location":"services/#nodecg-io-debug","text":"Debug helper service that helps to easily trigger your code for debugging purposes. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-types @ ^1.9.0","title":"nodecg-io-debug"},{"location":"services/#nodecg-io-discord","text":"Allows to connect to discord via a discord-bot. See the sample implementation Depends on discord.js @ ^14.3.0 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-discord"},{"location":"services/#nodecg-io-discord-rpc","text":"Allows to interface with a locally running discord client via RPC See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on discord-rpc @ ^4.0.1 Depends on @types/discord-rpc @ ^4.0.3 Depends on node-fetch @ ^2.6.7","title":"nodecg-io-discord-rpc"},{"location":"services/#nodecg-io-elgato-light","text":"Control your Elgato lights, e.g. key lights and light stripes. See the sample implementation Depends on @types/node-fetch @ ^2.6.1 Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-elgato-light"},{"location":"services/#nodecg-io-github","text":"Allows to connect to the GitHub REST API See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on @octokit/rest @ ^19.0.4","title":"nodecg-io-github"},{"location":"services/#nodecg-io-googleapis","text":"Allows to connect to and interact with many google-apis There's no sample implementation for this service yet. Depends on @types/gapi @ ^0.0.42 Depends on googleapis @ ^107.0.0 Depends on nodecg-io-core @ ^0.3.0 Depends on open @ ^8.4.0","title":"nodecg-io-googleapis"},{"location":"services/#nodecg-io-intellij","text":"Allows to control JetBrains IDEs via nodecg-io See the sample implementation Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-intellij"},{"location":"services/#nodecg-io-irc","text":"Allow to connect to IRC Servers. See the sample implementation Depends on @types/irc @ ^0.5.1 Depends on irc @ ^0.5.2 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-irc"},{"location":"services/#nodecg-io-midi-input","text":"Connect to MIDI devices and control the volume of your voice or music with a fader. See the sample implementation Depends on easymidi @ ^2.1.0 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-midi-input"},{"location":"services/#nodecg-io-midi-output","text":"Connect to MIDI devices and control the volume of your voice or music with a fader. See the sample implementation Depends on easymidi @ ^2.1.0 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-midi-output"},{"location":"services/#nodecg-io-mqtt-client","text":"Allows you to connect with an MQTT server. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on mqtt @ ^4.3.7","title":"nodecg-io-mqtt-client"},{"location":"services/#nodecg-io-nanoleaf","text":"Allows to connect to a nanoleaf controller and trigger custom lighting effects. See the sample implementation Depends on @types/node-fetch @ ^2.6.1 Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-types @ ^1.9.0","title":"nodecg-io-nanoleaf"},{"location":"services/#nodecg-io-obs","text":"Allows to control your obs instance to e.g. switch scenes. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on obs-websocket-js @ ^5.0.1","title":"nodecg-io-obs"},{"location":"services/#nodecg-io-philipshue","text":"Allows you to connect with your Philips Hue bridge. This allows you to control your lights etc. See the sample implementation Depends on is-ip @ ^3.1.0 Depends on node-hue-api @ ^4.0.11 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-philipshue"},{"location":"services/#nodecg-io-rcon","text":"Allows you to send commands to a minecraft server via RCON. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on rcon-client @ ^4.2.3","title":"nodecg-io-rcon"},{"location":"services/#nodecg-io-reddit","text":"Provides an interface to the Reddit-API. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on reddit-ts @ https://github.com/noeppi-noeppi/npm-reddit-ts.git#build","title":"nodecg-io-reddit"},{"location":"services/#nodecg-io-sacn-receiver","text":"Allows you to receive data via sACN from e.g professional lighting consoles. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on sacn @ ^4.2.0","title":"nodecg-io-sacn-receiver"},{"location":"services/#nodecg-io-sacn-sender","text":"Allows you to send data via sACN to e.g professional lights. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on sacn @ ^4.2.0","title":"nodecg-io-sacn-sender"},{"location":"services/#nodecg-io-serial","text":"Exposes serial deivces to nodecg-io See the sample implementation Depends on @serialport/parser-readline @ ^10.3.0 Depends on @types/serialport @ ^8.0.2 Depends on nodecg-io-core @ ^0.3.0 Depends on serialport @ ^10.4.0","title":"nodecg-io-serial"},{"location":"services/#nodecg-io-shlink","text":"Allows you to create Shlink short links See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on shlink-client @ ^1.0.1","title":"nodecg-io-shlink"},{"location":"services/#nodecg-io-slack","text":"Allows to connect to your slack. This enables you to e.g. send messages and list all channel. Visit https://api.slack.com/methods to see all methods See the sample implementation Depends on @slack/web-api @ ^6.7.2 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-slack"},{"location":"services/#nodecg-io-spotify","text":"Allows to connect to your personal Spotify account. This enables you to e.g. control music playback or get current song information. See the sample implementation Depends on @types/spotify-web-api-node @ ^5.0.7 Depends on nodecg-io-core @ ^0.3.0 Depends on open @ ^8.4.0 Depends on spotify-web-api-node @ ^5.0.2","title":"nodecg-io-spotify"},{"location":"services/#nodecg-io-sql","text":"SQL service based on knex.js. Different clients like mysql are supported but have to be installed separately. See the sample implementation Depends on knex @ ^2.2.0 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-sql"},{"location":"services/#nodecg-io-streamdeck","text":"Allows to interface with the elgato streamdeck. See the sample implementation Depends on @elgato-stream-deck/node @ ^5.5.0 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-streamdeck"},{"location":"services/#nodecg-io-streamelements","text":"Allows to connect to streamelements to e.g. react to donations. See the sample implementation Depends on @types/socket.io-client @ ^1.4.36 Depends on nodecg-io-core @ ^0.3.0 Depends on socket.io-client @ ^2.4.0","title":"nodecg-io-streamelements"},{"location":"services/#nodecg-io-telegram","text":"Allows you to control a telegram bot. See the sample implementation Depends on @types/node-telegram-bot-api @ ^0.57.1 Depends on node-telegram-bot-api @ ^0.58.0 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-telegram"},{"location":"services/#nodecg-io-template","text":"Template package. There's no sample implementation for this service yet. Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-template"},{"location":"services/#nodecg-io-tiane","text":"Connect to TIANE and make her for example a discord bot. https://github.com/FerdiKr/TIANE See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on ws @ ^8.8.1","title":"nodecg-io-tiane"},{"location":"services/#nodecg-io-twitch-addons","text":"Support for the API's of BetterTTV and FrankerFaceZ See the sample implementation Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-io-twitch-auth @ ^0.3.0","title":"nodecg-io-twitch-addons"},{"location":"services/#nodecg-io-twitch-api","text":"Allows talking to twitch APIs like helix. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-io-twitch-auth @ ^0.3.0 Depends on @twurple/api @ ^5.2.1","title":"nodecg-io-twitch-api"},{"location":"services/#nodecg-io-twitch-chat","text":"Allows to connect to the twitch chat with your account, send and receive messages and much more. It can be used to create Twitch-Bots. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-io-twitch-auth @ ^0.3.0 Depends on @twurple/chat @ ^5.2.2","title":"nodecg-io-twitch-chat"},{"location":"services/#nodecg-io-twitch-pubsub","text":"Allows access to the Twitch PubSub API. See the sample implementation Depends on nodecg-io-core @ ^0.3.0 Depends on nodecg-io-twitch-auth @ ^0.3.0 Depends on @twurple/api @ ^5.2.1 Depends on @twurple/pubsub @ ^5.2.2","title":"nodecg-io-twitch-pubsub"},{"location":"services/#nodecg-io-twitter","text":"Allows to connect to twitter, send, retweet or like messages. See the sample implementation Depends on @types/twitter @ ^1.7.1 Depends on nodecg-io-core @ ^0.3.0 Depends on twitter @ ^1.7.1","title":"nodecg-io-twitter"},{"location":"services/#nodecg-io-websocket-client","text":"Allows to connect to a external WebSocket server. See the sample implementation Depends on @types/ws @ ^8.5.3 Depends on nodecg-io-core @ ^0.3.0 Depends on ws @ ^8.8.1","title":"nodecg-io-websocket-client"},{"location":"services/#nodecg-io-websocket-server","text":"Allows to create a custom WebSocket server. See the sample implementation Depends on @types/ws @ ^8.5.3 Depends on nodecg-io-core @ ^0.3.0 Depends on ws @ ^8.8.1","title":"nodecg-io-websocket-server"},{"location":"services/#nodecg-io-xdotool","text":"Allows you to send commands to xdotool. See the sample implementation Depends on @rauschma/stringio @ ^1.4.0 Depends on node-fetch @ ^2.6.7 Depends on nodecg-io-core @ ^0.3.0","title":"nodecg-io-xdotool"},{"location":"contribute/contribute/","text":"How to contribute There are many ways to contribute to nodecg-io: logging bugs, submitting pull requests, reporting issues, and creating suggestions. You can also contribute to this documentation . First you'll need an installation of nodecg-io. Please refer to the installation guide and create a development installation. The CLI asks you whether you want to clone the documentation. It's highly recommended that you do that and update the documentation as you add new services or features. To be able to create Pull Requests you should fork the corresponding repositories and add them as a remote (update URL for e.g., documentation repository): git remote add fork https://github.com/ [ YOUR_USERNAME ] /nodecg-io.git Then you can create a new branch, do your changes, create commits and publish the branch to your fork using the following command: git push fork my-branch Build VS Code In Visual Studio Code you can start the build task with Ctrl + Shift + B ( CMD + Shift + B on macOS). The incremental builder will do an initial full build. The watch builder will watch for file changes and compile those changes incrementally, giving you a fast, iterative coding experience. It will even stay running in the background if you close VS Code. You can resume it by starting the build task with Ctrl + Shift + B ( CMD + Shift + B ) again. You can kill the build task by pressing Ctrl + D in the task terminal ( CMD + D ) on macOS. Errors and warnings will be shown in the status bar at the bottom left of the editor. You can view the error list using View | Errors and Warnings or pressing Ctrl + P and then ! (or CMD + P and ! on macOS). Terminal You can also use you terminal to build nodecg-io: cd path/to/nodecg-io npm run build To do a full rebuild instead of just an incremental build you can use npm run rebuild . The watch builder can be activated here too: cd path/to/nodecg-io npm run watch Run To test the changes you simply need to start/restart NodeCG. Adding dependencies to packages This project uses npm workspaces to manage our monorepo, and most importantly link all our packages together. Because of linking you should not use npm install xyz --save to add dependencies because npm can't get the development version of internal packages like nodecg-io-core . Doing so will result in an error and break the link. Instead, you should edit the package.json directly using a text editor and the run npm install in the repository root. Open a Pull Request Once you have implemented your feature or fixed a bug push it to your fork and start a Pull Request. Merge Upstream Changes Occasionally you will want to merge changes in the upstream repository (the official code repo) with your fork. cd path/to/nodecg-io git checkout main git pull https://github.com/codeoverflow-org/nodecg-io main Manage any merge conflicts, commit them, and then push them to your fork. You may also occasionally need to merge upstream main in a pull request. To do that make the above to update your local main branch, and then merge your local main branch into your PR branch. Where to Contribute After cloning and building the repo, check out the issues list . Issues labelled help wanted are good issues to submit a PR for. Issues labelled good first issue are great candidates to pick up if you are in the code for the first time. If you are contributing significant changes, please discuss with the assignee of the issue first before starting to work on the issue. You may also contribute to this documentation . Suggestions We're also interested in your feedback. You can submit a suggestion or feature request through the issue tracker. To make this process more effective, we're asking that these include more information to help define them more clearly. Discussion Etiquette In order to keep the conversation clear and transparent, please limit discussion to English and keep things on topic with the issue. Be considerate to others and try to be courteous and professional at all times.","title":"Basics"},{"location":"contribute/contribute/#how-to-contribute","text":"There are many ways to contribute to nodecg-io: logging bugs, submitting pull requests, reporting issues, and creating suggestions. You can also contribute to this documentation . First you'll need an installation of nodecg-io. Please refer to the installation guide and create a development installation. The CLI asks you whether you want to clone the documentation. It's highly recommended that you do that and update the documentation as you add new services or features. To be able to create Pull Requests you should fork the corresponding repositories and add them as a remote (update URL for e.g., documentation repository): git remote add fork https://github.com/ [ YOUR_USERNAME ] /nodecg-io.git Then you can create a new branch, do your changes, create commits and publish the branch to your fork using the following command: git push fork my-branch","title":"How to contribute"},{"location":"contribute/contribute/#build","text":"","title":"Build"},{"location":"contribute/contribute/#vs-code","text":"In Visual Studio Code you can start the build task with Ctrl + Shift + B ( CMD + Shift + B on macOS). The incremental builder will do an initial full build. The watch builder will watch for file changes and compile those changes incrementally, giving you a fast, iterative coding experience. It will even stay running in the background if you close VS Code. You can resume it by starting the build task with Ctrl + Shift + B ( CMD + Shift + B ) again. You can kill the build task by pressing Ctrl + D in the task terminal ( CMD + D ) on macOS. Errors and warnings will be shown in the status bar at the bottom left of the editor. You can view the error list using View | Errors and Warnings or pressing Ctrl + P and then ! (or CMD + P and ! on macOS).","title":"VS Code"},{"location":"contribute/contribute/#terminal","text":"You can also use you terminal to build nodecg-io: cd path/to/nodecg-io npm run build To do a full rebuild instead of just an incremental build you can use npm run rebuild . The watch builder can be activated here too: cd path/to/nodecg-io npm run watch","title":"Terminal"},{"location":"contribute/contribute/#run","text":"To test the changes you simply need to start/restart NodeCG.","title":"Run"},{"location":"contribute/contribute/#adding-dependencies-to-packages","text":"This project uses npm workspaces to manage our monorepo, and most importantly link all our packages together. Because of linking you should not use npm install xyz --save to add dependencies because npm can't get the development version of internal packages like nodecg-io-core . Doing so will result in an error and break the link. Instead, you should edit the package.json directly using a text editor and the run npm install in the repository root.","title":"Adding dependencies to packages"},{"location":"contribute/contribute/#open-a-pull-request","text":"Once you have implemented your feature or fixed a bug push it to your fork and start a Pull Request.","title":"Open a Pull Request"},{"location":"contribute/contribute/#merge-upstream-changes","text":"Occasionally you will want to merge changes in the upstream repository (the official code repo) with your fork. cd path/to/nodecg-io git checkout main git pull https://github.com/codeoverflow-org/nodecg-io main Manage any merge conflicts, commit them, and then push them to your fork. You may also occasionally need to merge upstream main in a pull request. To do that make the above to update your local main branch, and then merge your local main branch into your PR branch.","title":"Merge Upstream Changes"},{"location":"contribute/contribute/#where-to-contribute","text":"After cloning and building the repo, check out the issues list . Issues labelled help wanted are good issues to submit a PR for. Issues labelled good first issue are great candidates to pick up if you are in the code for the first time. If you are contributing significant changes, please discuss with the assignee of the issue first before starting to work on the issue. You may also contribute to this documentation .","title":"Where to Contribute"},{"location":"contribute/contribute/#suggestions","text":"We're also interested in your feedback. You can submit a suggestion or feature request through the issue tracker. To make this process more effective, we're asking that these include more information to help define them more clearly.","title":"Suggestions"},{"location":"contribute/contribute/#discussion-etiquette","text":"In order to keep the conversation clear and transparent, please limit discussion to English and keep things on topic with the issue. Be considerate to others and try to be courteous and professional at all times.","title":"Discussion Etiquette"},{"location":"contribute/contributors/","text":"a.contributorlink:hover { text-decoration-style: solid; text-decoration-line: underline; text-decoration-color: white; } const REPOS = [ 'codeoverflow-org/nodecg-io', 'codeoverflow-org/nodecg-io-docs', 'codeoverflow-org/nodecg-io-cli' ]; const BLACKLIST = [ 'dependabot[bot]', 'semantic-release-bot' ]; (async () => { // name -> { avatar?, html_url, contributions } const contributors = {} for (const repo of REPOS) { const response = await fetch(`https://api.github.com/repos/${repo}/contributors`); const data = await response.json(); data.forEach(entry => { if (!BLACKLIST.includes(entry.login)) { if (!(entry.login in contributors)) { contributors[entry.login] = { avatar_url: entry.avatar_url, html_url: entry.html_url, contributions: 0 } } contributors[entry.login].contributions += entry.contributions } }) } const sorted = Object.keys(contributors).sort((n1, n2) => { const result = contributors[n2].contributions - contributors[n1].contributions; // If the contributions are equal we sort by name return result == 0 ? n1.toLowerCase() < n2.toLowerCase() : result }); let idx = 1 for (const name of sorted) { const div = document.createElement('div') div.style = `grid-column: 1; grid-row: ${idx}; display: inline-block; padding-bottom: 10px` if ('avatar_url' in contributors[name]) { div.innerHTML = ` <img src=\"${contributors[name].avatar_url}\" width=\"64\" height=\"64\" style=\"float: left; margin-top: 0\"> <div style=\"float:left; margin-top: 0\"> <span style=\"font-size: 16pt; font-weight: bold; margin-left: 1em; color: white;\"> <a style=\"color: white;\" class=\"contributorlink\" href=\"${contributors[name].html_url}\">${name}</a> </span><br> <span style=\"font-size: 12pt; margin-left: 1em; color: white;\"> <a style=\"color: white;\" class=\"contributorlink\" href=\"https://github.com/codeoverflow-org/nodecg-io/commits?author=${name}\">${contributors[name].contributions} contributions</a> </span> </div> ` } else { div.innerHTML = ` <span style=\"font-size: 16pt; font-weight: bold; margin-left: 1em; color: white;\">${name}</span><br> <span style=\"font-size: 12pt; margin-left: 1em; color: white;\">${contributors[name].contributions} contributions</span> ` } document.getElementById('contributorview').appendChild(div) idx += 1 } })() Top 30 nodecg-io contributors","title":"Contributors"},{"location":"contribute/contributors/#top-30-nodecg-io-contributors","text":"","title":"Top 30 nodecg-io contributors"},{"location":"contribute/create_sample/","text":"Create a sample bundle A sample should have the same name as the service, but it may include a short description in the name after the service name as well. E.g. twitch-chat or obs-scenelist . Create a folder in samples named after the sample and add a package.json and a tsconfig.json : package.json tsconfig.json { \"name\" : \"<the sample name>\" , \"private\" : true , \"version\" : \"0.2.0\" , \"nodecg\" : { \"compatibleRange\" : \"^1.1.1\" , \"bundleDependencies\" : { \"nodecg-io-<the service name>\" : \"^0.2.0\" } }, \"scripts\" : { \"build\" : \"tsc -b\" , \"watch\" : \"tsc -b -w\" , \"clean\" : \"tsc -b --clean\" }, \"license\" : \"MIT\" , \"dependencies\" : { \"nodecg-io-<the service name>\" : \"^0.2.0\" , \"nodecg-io-core\" : \"^0.2.0\" , \"@types/node\" : \"^15.0.2\" , \"nodecg-types\" : \"^1.8.2\" , \"typescript\" : \"^4.2.4\" } } { \"extends\" : \"../../tsconfig.common.json\" , \"references\" : [ { \"path\" : \"../../nodecg-io-core\" }, { \"path\" : \"../../services/nodecg-io-<the service name>\" } ] } Now you can create a file called extension/index.ts . Here's a template. Make sure you replace all the comments with your own code. index.ts import { NodeCG } from \"nodecg-types/types/server\" ; import { requireService } from \"nodecg-io-core\" ; import { TheServicesExportedClient } from \"nodecg-io-<the services name>\" ; module .exports = function ( nodecg : NodeCG ) { nodecg . log . info ( \"Sample bundle for <the-service-name> started\" ); const service = requireService < TheServicesExportedClient > ( nodecg , \"<the-service-name>\" ); service ? . onAvailable (( client ) => { nodecg . log . info ( \"<the-service-name> client has been updated.\" ); // TODO do something with the client to demonstrate the functionality. }); service ? . onUnavailable (() => nodecg . log . info ( \"<the-service-name> client has been unset.\" ) ); }; Next steps You could add documentation for the sample bundle.","title":"Create a sample bundle"},{"location":"contribute/create_sample/#create-a-sample-bundle","text":"A sample should have the same name as the service, but it may include a short description in the name after the service name as well. E.g. twitch-chat or obs-scenelist . Create a folder in samples named after the sample and add a package.json and a tsconfig.json : package.json tsconfig.json { \"name\" : \"<the sample name>\" , \"private\" : true , \"version\" : \"0.2.0\" , \"nodecg\" : { \"compatibleRange\" : \"^1.1.1\" , \"bundleDependencies\" : { \"nodecg-io-<the service name>\" : \"^0.2.0\" } }, \"scripts\" : { \"build\" : \"tsc -b\" , \"watch\" : \"tsc -b -w\" , \"clean\" : \"tsc -b --clean\" }, \"license\" : \"MIT\" , \"dependencies\" : { \"nodecg-io-<the service name>\" : \"^0.2.0\" , \"nodecg-io-core\" : \"^0.2.0\" , \"@types/node\" : \"^15.0.2\" , \"nodecg-types\" : \"^1.8.2\" , \"typescript\" : \"^4.2.4\" } } { \"extends\" : \"../../tsconfig.common.json\" , \"references\" : [ { \"path\" : \"../../nodecg-io-core\" }, { \"path\" : \"../../services/nodecg-io-<the service name>\" } ] } Now you can create a file called extension/index.ts . Here's a template. Make sure you replace all the comments with your own code. index.ts import { NodeCG } from \"nodecg-types/types/server\" ; import { requireService } from \"nodecg-io-core\" ; import { TheServicesExportedClient } from \"nodecg-io-<the services name>\" ; module .exports = function ( nodecg : NodeCG ) { nodecg . log . info ( \"Sample bundle for <the-service-name> started\" ); const service = requireService < TheServicesExportedClient > ( nodecg , \"<the-service-name>\" ); service ? . onAvailable (( client ) => { nodecg . log . info ( \"<the-service-name> client has been updated.\" ); // TODO do something with the client to demonstrate the functionality. }); service ? . onUnavailable (() => nodecg . log . info ( \"<the-service-name> client has been unset.\" ) ); };","title":"Create a sample bundle"},{"location":"contribute/create_sample/#next-steps","text":"You could add documentation for the sample bundle.","title":"Next steps"},{"location":"contribute/create_service/","text":"Create a service integration This guide helps you to create a service integration such as twitch-chat or discord Find a JavaScript library Go to npmjs.com and look whether there's already a package that wraps around the API of your service. If there's no such package, you need to create one yourself. This is not described here. You may read the \u201cContributing packages to the registry\u201d from the npm Docs . Create the service files To create the service you can either use a premade Python 3 script in .scripts/create-service.py , or create the files manually. Using the script (recommended) What this script does: It creates all required files for a new nodecg-io service It copies version and dependency information (e.g., for typescript) from noodecg-io-template It'll also create a sample and the files for the docs Requirements: python3 in your $PATH (see install page ) executed from root of nodecg-io repo The script waits for your input for each of those fields: $ python3 .scripts/create-service.py Service name: <name here> Short description: <description here> Author name: <author here> Author url: <url here> Sample name: <name here> Info Now the script will rebuild your environment. Create the files manually Note From here you will have to replace: YourServiceName to your service's name in PascalCase . yourServiceName to your service's name in carmelCase . your-service-name to your service's name with only lowercase and hyphens ( - ) for example: ws-server . Now you need to create a package. You should call it nodecg-io-your-service-name . First create a directory with that name in /services/ and put file called package.json into it. Put the following into it: package.json { \"name\" : \"nodecg-io-<your-service-name>\" , \"version\" : \"0.2.0\" , \"description\" : \"<Short description what is possible with your service.>\" , \"homepage\" : \"https://nodecg.io/RELEASE/samples/<your-service-name>\" , \"author\" : { \"name\" : \"<Your name>\" , \"url\" : \"<Your github profile url>\" }, \"repository\" : { \"type\" : \"git\" , \"url\" : \"https://github.com/codeoverflow-org/nodecg-io.git\" , \"directory\" : \"services/nodecg-io-<your-service-name>\" }, \"files\" : [ \"**/*.js\" , \"**/*.js.map\" , \"**/*.d.ts\" , \"*.json\" ], \"main\" : \"extension\" , \"scripts\" : {}, \"keywords\" : [ \"nodecg-io\" , \"nodecg-bundle\" ], \"nodecg\" : { \"compatibleRange\" : \"^1.1.1\" , \"bundleDependencies\" : { \"nodecg-io-core\" : \"^0.2.0\" } }, \"license\" : \"MIT\" , \"devDependencies\" : { \"@types/node\" : \"^15.0.2\" , \"nodecg-types\" : \"^1.8.2\" , \"typescript\" : \"^4.2.4\" }, \"dependencies\" : { \"nodecg-io-core\" : \"^0.2.0\" , \"<the package you found in step 1>\" : \"<the packages version you want to use>\" } } Next you need to put a file called tsconfig.json next to your package.json . The tsconfig.json should look like this: tsconfig.json { \"extends\" : \"../../tsconfig.common.json\" , \"references\" : [ { \"path\" : \"../../nodecg-io-core\" } ] } Now run npm install in the repository root. Create a configuration schema Next create a file called your-service-name-schame.json . This is a JSON schema file that indicates how the configuration for your service should be structured. If you need help here take a look at this online resource and the schema-files of the other service implementations. Create the service Create a file called index.ts in a folder called extension inside your service's directory. You can then paste the following code and fill in your code instead of the comments. index.ts // TODO: Rename all occurrences of \"YourServiceName\" in PascalCase // TODO: Rename all occurrences of \"yourServiceName\" in carmelCase // TODO: Rename all occurrences of \"your-service-name\" with only lowercase and hyphens ( - ) import { NodeCG } from \"nodecg-types/types/server\" ; import { Result , emptySuccess , success , ServiceBundle } from \"nodecg-io-core\" ; // TODO: Replace the \"fake\" service class with that found on npm etc. import { ServiceClass } from \"./\" ; interface YourServiceNameServiceConfig { // TODO Fill in the values from your json schema here. The json // schema will load into an instance of this. } // ServiceClient ensures that you will provide a `getNativeClient` function that should give // access to the underlying client from the library that you are using. // TODO: if you want to provide simplifications for the service then make this // type-alias a separate class in a separate file and directly implement those simplifications // there. // TODO: Replace the `ServiceClass` with the class of the package from step 1 export type YourServiceNameServiceClient = ServiceClient < ServiceClass > ; module .exports = ( nodecg : NodeCG ) => { new YourServiceNameService ( nodecg , \"your-service-name\" , __dirname , \"../your-service-name-schema.json\" ). register (); }; class YourServiceNameService extends ServiceBundle < YourServiceNameServiceConfig , YourServiceNameServiceClient > { async validateConfig ( config : YourServiceNameServiceConfig ) : Promise < Result < void >> { // TODO You can validate your config here. If this gets called, the schema is correct. // You should for example check whether oauth keys are valid and servers are online here // If everything is good return 'emptySuccess()' // If an error occurs return 'error(<The error message>)' } async createClient ( config : YourServiceNameServiceConfig ) : Promise < Result < YourServiceNameServiceClient >> { // TODO Here you should return a <Your service name>ServiceClient that is exposed to bundles. // Or create a instance of your class if you have any simplifications and return that. // If everything is good return 'success(client)' // If an error occurs return 'error(<The error message>)' } stopClient ( client : YourServiceNameServiceClient ) : void { // Here you should make sure you disconnect everything here (if possible). } } Note Now run npm run build in the repository root, start NodeCG and test your service out. Next steps You could create a sample bundle for your brand-new service. If you don't do so, make sure you add a placeholder file called <the services name>.md in docs/samples in your fork of the documentation. The file should look like this: the-service-name.md <!-- Marker for build.py that there's no sample bundle. Remove this if you created one --> ## Using the <the services name> sample bundle No sample bundle for service `<the services name>` . [ You can help us and create one! ]( https://github.com/codeoverflow-org/nodecg-io-docs/blob/main/docs/contribute/docs_sample.md ) Attention Do not remove the marker in the first line until there is a sample bundle, and it is documented there. Don't forget to add this file to mkdocs.yml .","title":"Create a Service"},{"location":"contribute/create_service/#create-a-service-integration","text":"This guide helps you to create a service integration such as twitch-chat or discord","title":"Create a service integration"},{"location":"contribute/create_service/#find-a-javascript-library","text":"Go to npmjs.com and look whether there's already a package that wraps around the API of your service. If there's no such package, you need to create one yourself. This is not described here. You may read the \u201cContributing packages to the registry\u201d from the npm Docs .","title":"Find a JavaScript library"},{"location":"contribute/create_service/#create-the-service-files","text":"To create the service you can either use a premade Python 3 script in .scripts/create-service.py , or create the files manually.","title":"Create the service files"},{"location":"contribute/create_service/#using-the-script-recommended","text":"What this script does: It creates all required files for a new nodecg-io service It copies version and dependency information (e.g., for typescript) from noodecg-io-template It'll also create a sample and the files for the docs Requirements: python3 in your $PATH (see install page ) executed from root of nodecg-io repo The script waits for your input for each of those fields: $ python3 .scripts/create-service.py Service name: <name here> Short description: <description here> Author name: <author here> Author url: <url here> Sample name: <name here> Info Now the script will rebuild your environment.","title":"Using the script (recommended)"},{"location":"contribute/create_service/#create-the-files-manually","text":"Note From here you will have to replace: YourServiceName to your service's name in PascalCase . yourServiceName to your service's name in carmelCase . your-service-name to your service's name with only lowercase and hyphens ( - ) for example: ws-server . Now you need to create a package. You should call it nodecg-io-your-service-name . First create a directory with that name in /services/ and put file called package.json into it. Put the following into it: package.json { \"name\" : \"nodecg-io-<your-service-name>\" , \"version\" : \"0.2.0\" , \"description\" : \"<Short description what is possible with your service.>\" , \"homepage\" : \"https://nodecg.io/RELEASE/samples/<your-service-name>\" , \"author\" : { \"name\" : \"<Your name>\" , \"url\" : \"<Your github profile url>\" }, \"repository\" : { \"type\" : \"git\" , \"url\" : \"https://github.com/codeoverflow-org/nodecg-io.git\" , \"directory\" : \"services/nodecg-io-<your-service-name>\" }, \"files\" : [ \"**/*.js\" , \"**/*.js.map\" , \"**/*.d.ts\" , \"*.json\" ], \"main\" : \"extension\" , \"scripts\" : {}, \"keywords\" : [ \"nodecg-io\" , \"nodecg-bundle\" ], \"nodecg\" : { \"compatibleRange\" : \"^1.1.1\" , \"bundleDependencies\" : { \"nodecg-io-core\" : \"^0.2.0\" } }, \"license\" : \"MIT\" , \"devDependencies\" : { \"@types/node\" : \"^15.0.2\" , \"nodecg-types\" : \"^1.8.2\" , \"typescript\" : \"^4.2.4\" }, \"dependencies\" : { \"nodecg-io-core\" : \"^0.2.0\" , \"<the package you found in step 1>\" : \"<the packages version you want to use>\" } } Next you need to put a file called tsconfig.json next to your package.json . The tsconfig.json should look like this: tsconfig.json { \"extends\" : \"../../tsconfig.common.json\" , \"references\" : [ { \"path\" : \"../../nodecg-io-core\" } ] } Now run npm install in the repository root.","title":"Create the files manually"},{"location":"contribute/create_service/#create-a-configuration-schema","text":"Next create a file called your-service-name-schame.json . This is a JSON schema file that indicates how the configuration for your service should be structured. If you need help here take a look at this online resource and the schema-files of the other service implementations.","title":"Create a configuration schema"},{"location":"contribute/create_service/#create-the-service","text":"Create a file called index.ts in a folder called extension inside your service's directory. You can then paste the following code and fill in your code instead of the comments. index.ts // TODO: Rename all occurrences of \"YourServiceName\" in PascalCase // TODO: Rename all occurrences of \"yourServiceName\" in carmelCase // TODO: Rename all occurrences of \"your-service-name\" with only lowercase and hyphens ( - ) import { NodeCG } from \"nodecg-types/types/server\" ; import { Result , emptySuccess , success , ServiceBundle } from \"nodecg-io-core\" ; // TODO: Replace the \"fake\" service class with that found on npm etc. import { ServiceClass } from \"./\" ; interface YourServiceNameServiceConfig { // TODO Fill in the values from your json schema here. The json // schema will load into an instance of this. } // ServiceClient ensures that you will provide a `getNativeClient` function that should give // access to the underlying client from the library that you are using. // TODO: if you want to provide simplifications for the service then make this // type-alias a separate class in a separate file and directly implement those simplifications // there. // TODO: Replace the `ServiceClass` with the class of the package from step 1 export type YourServiceNameServiceClient = ServiceClient < ServiceClass > ; module .exports = ( nodecg : NodeCG ) => { new YourServiceNameService ( nodecg , \"your-service-name\" , __dirname , \"../your-service-name-schema.json\" ). register (); }; class YourServiceNameService extends ServiceBundle < YourServiceNameServiceConfig , YourServiceNameServiceClient > { async validateConfig ( config : YourServiceNameServiceConfig ) : Promise < Result < void >> { // TODO You can validate your config here. If this gets called, the schema is correct. // You should for example check whether oauth keys are valid and servers are online here // If everything is good return 'emptySuccess()' // If an error occurs return 'error(<The error message>)' } async createClient ( config : YourServiceNameServiceConfig ) : Promise < Result < YourServiceNameServiceClient >> { // TODO Here you should return a <Your service name>ServiceClient that is exposed to bundles. // Or create a instance of your class if you have any simplifications and return that. // If everything is good return 'success(client)' // If an error occurs return 'error(<The error message>)' } stopClient ( client : YourServiceNameServiceClient ) : void { // Here you should make sure you disconnect everything here (if possible). } } Note Now run npm run build in the repository root, start NodeCG and test your service out.","title":"Create the service"},{"location":"contribute/create_service/#next-steps","text":"You could create a sample bundle for your brand-new service. If you don't do so, make sure you add a placeholder file called <the services name>.md in docs/samples in your fork of the documentation. The file should look like this: the-service-name.md <!-- Marker for build.py that there's no sample bundle. Remove this if you created one --> ## Using the <the services name> sample bundle No sample bundle for service `<the services name>` . [ You can help us and create one! ]( https://github.com/codeoverflow-org/nodecg-io-docs/blob/main/docs/contribute/docs_sample.md ) Attention Do not remove the marker in the first line until there is a sample bundle, and it is documented there. Don't forget to add this file to mkdocs.yml .","title":"Next steps"},{"location":"contribute/docs_markdown/","text":"Our special mix of Markdown plugins: plantuml-markdown Plant UML diagram Markdown Output ```plantuml format=\"svg\" alt=\"My super diagram placeholder\" width=\"400px\" height=\"400px\" title Authentication Sequence Alice -> Bob: calls Alice <-- Bob: responds ``` codehilite Syntax highlighting in fenced code blocks. Syntax highlighting Markdown Output ```typescript import { NodeCG } from \"nodecg-types/types/server\" ; module .exports = ( nodecg : NodeCG ) => { new YourServiceNameService ( nodecg , \"your-service-name\" , __dirname , \"../your-service-name-schema.json\" ). register (); }; ``` import { NodeCG } from \"nodecg-types/types/server\" ; module .exports = ( nodecg : NodeCG ) => { new YourServiceNameService ( nodecg , \"your-service-name\" , __dirname , \"../your-service-name-schema.json\" ). register (); }; pymdownx.inlinehilite Inline Highlighted Code Example Markdown Output `` Here is some code: `#!py3 import pymdownx; pymdownx__version__` . The mock shebang will be treated like text here: ` #!js vartest = 0; ` . `` Here is some code: import pymdownx ; pymdownx . __version__ The mock shebang will be treated like text here: #!js var test = 0; . pymdownx.superfences Allowing the nesting of fences under blockquotes, lists, or other block elements. Ability to specify custom fences to provide features like flowcharts, sequence diagrams, or other custom blocks. Allow disabling of indented code blocks in favour of only using the fenced variant (off by default). Experimental feature that preserves tabs within a code block instead of converting them to spaces which is Python Markdown's default behaviour. pymdownx.tabbed Example Tabs Markdown Output === \"Tab 1\" Markdown **content** . Multiple paragraphs. === \"Tab 2\" More Markdown **content** . - list item a - list item b Tab 1 Tab 2 Markdown content . Multiple paragraphs. More Markdown content . list item a list item b pymdownx.tasklist GFM style task lists Task lists Markdown Output - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3 item 1 item A item B more text item a item b item c item C item 2 item 3 admonition Possible types are: NOTE, SUMMARY, ABSTRACT, TLDR, INFO, TODO, TIP, HINT, SUCCESS, CHECK, DONE, QUESTION, HELP, FAQ, WARNING, ATTENTION, CAUTION, FAILURE, FAIL, MISSING, DANGER, ERROR, BUG, EXAMPLE, SNIPPET, QUOTE, CITE Inline Highlighted Code Example Markdown Output !!! HINT \"optional explicit title within double quotes\" Any number of other indented markdown elements. This is the second paragraph. optional explicit title within double quotes Any number of other indented markdown elements. This is the second paragraph.","title":"Markdown"},{"location":"contribute/docs_markdown/#plantuml-markdown","text":"Plant UML diagram Markdown Output ```plantuml format=\"svg\" alt=\"My super diagram placeholder\" width=\"400px\" height=\"400px\" title Authentication Sequence Alice -> Bob: calls Alice <-- Bob: responds ```","title":"plantuml-markdown"},{"location":"contribute/docs_markdown/#codehilite","text":"Syntax highlighting in fenced code blocks. Syntax highlighting Markdown Output ```typescript import { NodeCG } from \"nodecg-types/types/server\" ; module .exports = ( nodecg : NodeCG ) => { new YourServiceNameService ( nodecg , \"your-service-name\" , __dirname , \"../your-service-name-schema.json\" ). register (); }; ``` import { NodeCG } from \"nodecg-types/types/server\" ; module .exports = ( nodecg : NodeCG ) => { new YourServiceNameService ( nodecg , \"your-service-name\" , __dirname , \"../your-service-name-schema.json\" ). register (); };","title":"codehilite"},{"location":"contribute/docs_markdown/#pymdownxinlinehilite","text":"Inline Highlighted Code Example Markdown Output `` Here is some code: `#!py3 import pymdownx; pymdownx__version__` . The mock shebang will be treated like text here: ` #!js vartest = 0; ` . `` Here is some code: import pymdownx ; pymdownx . __version__ The mock shebang will be treated like text here: #!js var test = 0; .","title":"pymdownx.inlinehilite"},{"location":"contribute/docs_markdown/#pymdownxsuperfences","text":"Allowing the nesting of fences under blockquotes, lists, or other block elements. Ability to specify custom fences to provide features like flowcharts, sequence diagrams, or other custom blocks. Allow disabling of indented code blocks in favour of only using the fenced variant (off by default). Experimental feature that preserves tabs within a code block instead of converting them to spaces which is Python Markdown's default behaviour.","title":"pymdownx.superfences"},{"location":"contribute/docs_markdown/#pymdownxtabbed","text":"Example Tabs Markdown Output === \"Tab 1\" Markdown **content** . Multiple paragraphs. === \"Tab 2\" More Markdown **content** . - list item a - list item b Tab 1 Tab 2 Markdown content . Multiple paragraphs. More Markdown content . list item a list item b","title":"pymdownx.tabbed"},{"location":"contribute/docs_markdown/#pymdownxtasklist","text":"GFM style task lists Task lists Markdown Output - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3 item 1 item A item B more text item a item b item c item C item 2 item 3","title":"pymdownx.tasklist"},{"location":"contribute/docs_markdown/#admonition","text":"Possible types are: NOTE, SUMMARY, ABSTRACT, TLDR, INFO, TODO, TIP, HINT, SUCCESS, CHECK, DONE, QUESTION, HELP, FAQ, WARNING, ATTENTION, CAUTION, FAILURE, FAIL, MISSING, DANGER, ERROR, BUG, EXAMPLE, SNIPPET, QUOTE, CITE Inline Highlighted Code Example Markdown Output !!! HINT \"optional explicit title within double quotes\" Any number of other indented markdown elements. This is the second paragraph. optional explicit title within double quotes Any number of other indented markdown elements. This is the second paragraph.","title":"admonition"},{"location":"contribute/docs_sample/","text":"Add your sample to the docs To document a sample bundle take a look at the name of the service the sample bundle is for. If it's for example nodecg-io-example the documentation should go into docs/samples/example.md in the doc's repository. There you should include a step-by-step manual how to configure the service and get the bundle running. Attention Don't forget to add the newly created Markdown file to mkdocs.yml . Note When you create your documentation pull request, please include the ID of your PR in the main repository in the description, so the documentation will not be merged before the actual code. You should make this very detailed, so everyone gets it to work because a super-good implementation is worth nothing if there's nobody who can use it. Take a look at the twitch sample bundle . Note We also have the getting started section and especally the \"Try an included sample\" -Guide, so you can offload some of the documentation to stuff aready written there. Guidelines [\u2026] The sample docs should [\u2026] be centered around the service and not the sample [\u2026]. Writing what the sample does with the service and how it is named should be enough. Actually the ChatOverflow docs are a good example [\u2026]. Have a guide how to use the dashboard and then an entry for each service that describes what config it needs and where you can get tokens. Instead of a code snipped I would then explain what the sample does and link to it. ~ (daniel0611 27.02.2021 on GitHub ) shortened by the author","title":"Document a sample"},{"location":"contribute/docs_sample/#add-your-sample-to-the-docs","text":"To document a sample bundle take a look at the name of the service the sample bundle is for. If it's for example nodecg-io-example the documentation should go into docs/samples/example.md in the doc's repository. There you should include a step-by-step manual how to configure the service and get the bundle running. Attention Don't forget to add the newly created Markdown file to mkdocs.yml . Note When you create your documentation pull request, please include the ID of your PR in the main repository in the description, so the documentation will not be merged before the actual code. You should make this very detailed, so everyone gets it to work because a super-good implementation is worth nothing if there's nobody who can use it. Take a look at the twitch sample bundle . Note We also have the getting started section and especally the \"Try an included sample\" -Guide, so you can offload some of the documentation to stuff aready written there.","title":"Add your sample to the docs"},{"location":"contribute/docs_sample/#guidelines","text":"[\u2026] The sample docs should [\u2026] be centered around the service and not the sample [\u2026]. Writing what the sample does with the service and how it is named should be enough. Actually the ChatOverflow docs are a good example [\u2026]. Have a guide how to use the dashboard and then an entry for each service that describes what config it needs and where you can get tokens. Instead of a code snipped I would then explain what the sample does and link to it. ~ (daniel0611 27.02.2021 on GitHub ) shortened by the author","title":"Guidelines"},{"location":"contribute/docs_setup/","text":"nodecg-io has a steadily growing and improving documentation. We are using Markdown to describe the content and mkdocs for the deployment to the webpage ( https://nodecg.io ). If you want to get to know the standard Markdown syntax, take a look at this guide . We also use many plugins, so you may take a look at a curated list of examples of the extended syntax. Clone this repo If you installed the development version nodecg-io with the CLI, you may have already cloned the nodecg-io-docs repository into the docs folder inside nodecg-io directory. Then you will have to fork the official repo and add your fork as a remote: git remote add <name> ( https://github.com/<your-user-name>/nodecg-io-docs.git ) Else clone your fork into a desired directory with: git clone https://github.com/<your-user-name>/nodecg-io-docs.git Repository structure |-- .github ................ CI workflows |-- .vscode ................ VS Code specific configs |-- docs ................... All files included in the documentation | |-- assets ................ other files used (images) | |-- contribute ............ Section on development and documentation | |-- getting_started ....... Section on first use | |-- samples ............... documentation for the sample bundles | |-- dependencies.md ....... One huge UML diagram (auto generated) | |-- index.md .............. Home screen of the documentation | `-- services.md ........... Availabel Services (auto generated) |-- .markdownlint.json ..... markdownlint config file |-- .prettierrc.json ....... prettier (formatter) config file `-- mkdocs.yml ............. mkdocs config file Install dependencies to use the preview You will need a Python 3 installed. You will also need to install mkdocs with pip: pip install -r requirements.txt Now you can serve the local version with: mkdocs serve Now you can access it in your browser under http://127.0.0.1:8000/ . Using VS Code Extensions For the folks out there who are using VS Code to edit these documents you can use the recommended extensions of this workspace by using the @recommended filter in the extensions panel. Those extensions will format ( Prettier ) and lint ( markdownlint ) the markdown files, and live check many typos and grammar ( LTeX ). Also, the built-in preview will parse more of our used syntax. Tasks Note You will need prettier and markdownlint installed in your path. You may also benefit from the preconfigured serve task. It can be accessed with Ctrl + Shift + B ( CMD + Shift + B on macOS). This will format and lint the files and then serve them to you.","title":"Setup"},{"location":"contribute/docs_setup/#clone-this-repo","text":"If you installed the development version nodecg-io with the CLI, you may have already cloned the nodecg-io-docs repository into the docs folder inside nodecg-io directory. Then you will have to fork the official repo and add your fork as a remote: git remote add <name> ( https://github.com/<your-user-name>/nodecg-io-docs.git ) Else clone your fork into a desired directory with: git clone https://github.com/<your-user-name>/nodecg-io-docs.git","title":"Clone this repo"},{"location":"contribute/docs_setup/#repository-structure","text":"|-- .github ................ CI workflows |-- .vscode ................ VS Code specific configs |-- docs ................... All files included in the documentation | |-- assets ................ other files used (images) | |-- contribute ............ Section on development and documentation | |-- getting_started ....... Section on first use | |-- samples ............... documentation for the sample bundles | |-- dependencies.md ....... One huge UML diagram (auto generated) | |-- index.md .............. Home screen of the documentation | `-- services.md ........... Availabel Services (auto generated) |-- .markdownlint.json ..... markdownlint config file |-- .prettierrc.json ....... prettier (formatter) config file `-- mkdocs.yml ............. mkdocs config file","title":"Repository structure"},{"location":"contribute/docs_setup/#install-dependencies-to-use-the-preview","text":"You will need a Python 3 installed. You will also need to install mkdocs with pip: pip install -r requirements.txt Now you can serve the local version with: mkdocs serve Now you can access it in your browser under http://127.0.0.1:8000/ .","title":"Install dependencies to use the preview"},{"location":"contribute/docs_setup/#using-vs-code","text":"","title":"Using VS Code"},{"location":"contribute/docs_setup/#extensions","text":"For the folks out there who are using VS Code to edit these documents you can use the recommended extensions of this workspace by using the @recommended filter in the extensions panel. Those extensions will format ( Prettier ) and lint ( markdownlint ) the markdown files, and live check many typos and grammar ( LTeX ). Also, the built-in preview will parse more of our used syntax.","title":"Extensions"},{"location":"contribute/docs_setup/#tasks","text":"Note You will need prettier and markdownlint installed in your path. You may also benefit from the preconfigured serve task. It can be accessed with Ctrl + Shift + B ( CMD + Shift + B on macOS). This will format and lint the files and then serve them to you.","title":"Tasks"},{"location":"getting_started/configuration/","text":"Configuration Since version 0.2.0 nodecg-io has a configuration feature to save some settings without needing to code something or log in. The configuration file for this feature is at cfg/nodecg-io-core.json inside your NodeCG installation. This file does not exist by default, you need to create it yourself. The currently only thing you can configure is automatic login, but there may be more configurable options in the future. Automatic login Automatic login will automatically load nodecg-io when NodeCG starts using the provided password. Therefore, nodecg-io will be able to decrypt your configuration for your service instances and provide your bundles with service clients without you logging in to nodecg-io using the dashboard. This is especially useful if you are running NodeCG with nodecg-io on a server which may reboot from time to time to ensure that your bundles are always working without you needing to manually log in after each restart. Warning Having both the encrypted configuration and your used password saved on disk defeats nodecg-io's data-at-rest encryption. Any program that can read disk contents can access your credentials of any service instance. We discourage using this and if you really want to use it you should be extra cautious about which bundles you install. Options of automatic login: enabled (boolean) Automatic login will be only enabled if this enabled option is true . This option can be used to temporarily disable automatic login without needing to delete the whole automatic login configuration and allows for easy re-enabling without needing to enter the password in the config again. password (string) This is the password that will be used to log in. It should be the password you use to log in to nodecg-io. If this password is wrong an error will be logged after startup. Example config: { \"automaticLogin\" : { \"enabled\" : true , \"password\" : \"ThisIsMyPassword.PleaseChangeMe\" } }","title":"Configuration"},{"location":"getting_started/configuration/#configuration","text":"Since version 0.2.0 nodecg-io has a configuration feature to save some settings without needing to code something or log in. The configuration file for this feature is at cfg/nodecg-io-core.json inside your NodeCG installation. This file does not exist by default, you need to create it yourself. The currently only thing you can configure is automatic login, but there may be more configurable options in the future.","title":"Configuration"},{"location":"getting_started/configuration/#automatic-login","text":"Automatic login will automatically load nodecg-io when NodeCG starts using the provided password. Therefore, nodecg-io will be able to decrypt your configuration for your service instances and provide your bundles with service clients without you logging in to nodecg-io using the dashboard. This is especially useful if you are running NodeCG with nodecg-io on a server which may reboot from time to time to ensure that your bundles are always working without you needing to manually log in after each restart. Warning Having both the encrypted configuration and your used password saved on disk defeats nodecg-io's data-at-rest encryption. Any program that can read disk contents can access your credentials of any service instance. We discourage using this and if you really want to use it you should be extra cautious about which bundles you install. Options of automatic login: enabled (boolean) Automatic login will be only enabled if this enabled option is true . This option can be used to temporarily disable automatic login without needing to delete the whole automatic login configuration and allows for easy re-enabling without needing to enter the password in the config again. password (string) This is the password that will be used to log in. It should be the password you use to log in to nodecg-io. If this password is wrong an error will be logged after startup. Example config: { \"automaticLogin\" : { \"enabled\" : true , \"password\" : \"ThisIsMyPassword.PleaseChangeMe\" } }","title":"Automatic login"},{"location":"getting_started/create_new_bundle/","text":"Create your first bundle To actually use nodecg-io you need to create a bundle. Here's a step-by-step guide to create one. Think of what services your bundle needs. Take a look at the service list if to see what services are available. If you need a service that is not yet available consider creating it . Create your bundle using the nodecg-io CLI Automatically generating a bundle that uses nodecg-io requires that you have the nodecg-io CLI installed. A guide on how to do this is inside the installation guide . To start run this command while being inside your NodeCG installation: nodecg-io generate This will ask you a couple details about your bundle like name, description and used services. Most questions have a reasonable default that you can choose if you don't care or are not sure about the asked thing. After finishing the prompt the CLI will generate your bundle, install dependencies and, if you have chosen TypeScript, compile the generated code. Test it Start NodeCG and make sure that the bundle gets loaded successfully, and it is displayed in the nodecg-io dashboard with all service dependencies. Modify it After that you should edit the extension/index.ts or extension/index.js depending on your chosen language to do something useful. You can start by updating the onAvailable callbacks. Note: If you need to access another service inside the callback of a onAvailable call you can use otherService.getClient() to get the client or undefined if it is not set. Further steps A couple of steps you may want to do after generating a bundle: Create a git repository for you bundle (a .gitignore is automatically generated for you) and push it to a git platform of your choice Add an open source licence , don't forget it to also add it to the package.json file Add code formatters and linting tools like prettier and ESLint Add a README that explains what your bundle does and how it can be used Share it! If you share your work others might find it useful and get happy with it. We made nodecg-io for you, and the NodeCG people made NodeCG for you. Many people spent much time for you to create cool content that easy and if you shared your work others could create good content more easily as well.","title":"Your first bundle"},{"location":"getting_started/create_new_bundle/#create-your-first-bundle","text":"To actually use nodecg-io you need to create a bundle. Here's a step-by-step guide to create one. Think of what services your bundle needs. Take a look at the service list if to see what services are available. If you need a service that is not yet available consider creating it .","title":"Create your first bundle"},{"location":"getting_started/create_new_bundle/#create-your-bundle-using-the-nodecg-io-cli","text":"Automatically generating a bundle that uses nodecg-io requires that you have the nodecg-io CLI installed. A guide on how to do this is inside the installation guide . To start run this command while being inside your NodeCG installation: nodecg-io generate This will ask you a couple details about your bundle like name, description and used services. Most questions have a reasonable default that you can choose if you don't care or are not sure about the asked thing. After finishing the prompt the CLI will generate your bundle, install dependencies and, if you have chosen TypeScript, compile the generated code.","title":"Create your bundle using the nodecg-io CLI"},{"location":"getting_started/create_new_bundle/#test-it","text":"Start NodeCG and make sure that the bundle gets loaded successfully, and it is displayed in the nodecg-io dashboard with all service dependencies.","title":"Test it"},{"location":"getting_started/create_new_bundle/#modify-it","text":"After that you should edit the extension/index.ts or extension/index.js depending on your chosen language to do something useful. You can start by updating the onAvailable callbacks. Note: If you need to access another service inside the callback of a onAvailable call you can use otherService.getClient() to get the client or undefined if it is not set.","title":"Modify it"},{"location":"getting_started/create_new_bundle/#further-steps","text":"A couple of steps you may want to do after generating a bundle: Create a git repository for you bundle (a .gitignore is automatically generated for you) and push it to a git platform of your choice Add an open source licence , don't forget it to also add it to the package.json file Add code formatters and linting tools like prettier and ESLint Add a README that explains what your bundle does and how it can be used","title":"Further steps"},{"location":"getting_started/create_new_bundle/#share-it","text":"If you share your work others might find it useful and get happy with it. We made nodecg-io for you, and the NodeCG people made NodeCG for you. Many people spent much time for you to create cool content that easy and if you shared your work others could create good content more easily as well.","title":"Share it!"},{"location":"getting_started/existing_bundle/","text":"Migrating your existing bundle to nodecg-io This guide explains to you how to migrate an existing NodeCG bundle that already meets your requirements to use nodecg-io. nodecg-io manages service configuration and authentication, so your bundle doesn't have to bother with it. If you are lucky and used the same library as we do for the service you want to migrate, nodecg-io is a drop-in replacement just doing authentication and configuration. If you have used another library, you'll have to do a little more work to migrate to the library that our service uses. In that case make sure that the migration is worth the effort. You can use nodecg-io for one service and use your own library of choice for other services if you like to. Install nodecg-io-core The first thing you need to do is to install nodecg-io-core . You can do this simply using this npm command: npm install nodecg-io-core Add the service bundle as a bundle dependency To ensure that NodeCG loads the service bundle you need before your bundle you need to add it as a bundleDependency to your bundle. To do that for e.g. the twitch-chat service you add it to your bundles package.json file like this: ... \"nodecg\" : { \"compatibleRange\" : \"^1.4.0\" , \"bundleDependencies\" : { \"nodecg-io-twitch-chat\" : \"^0.2.0\" } } ... Change the bundle name and version accordingly. You need to specify each service your bundle needs here as a bundle dependency. Just don't forget to add a comma as a separator between the multiple bundles. Import requireService Now that you have nodecg-io-core installed in your bundle you can import the requireService function that it exposes: TypeScript/ES Modules CommonJS import { requireService } from \"nodecg-io-core\" ; const requireService = require ( \"nodecg-io-core\" ). requireService ; Import Service type (TypeScript only) If you're using TypeScript, you'll also need to install the package of the service that you want to use. You need it to be able to import its type for type safety. This example uses twitch-chat as an example, but you can just replace it with the name of the service you need. npm install nodecg-io-twitch-chat TypeScript import { TwitchChatServiceClient } from \"nodecg-io-twitch-chat\" ; Note You can get the name of the type by using autocomplete in your editor or by looking it up in the service sample. Require the service Now you can finally tell nodecg-io that you want to get access to a service using the requireService function. You'll have to pass your NodeCG instance which is used to identify your bundle and the name of the service you want. In case of TypeScript you'll also need to provide the type of the service. TypeScript JavaScript const twitchChat = requireService < TwitchChatServiceClient > ( nodecg , \"twitch-chat\" ); const twitchChat = requireService ( nodecg , \"twitch-chat\" ); Accessing the service client Using onAvailable and onUnavailable handlers You can set up handlers that are executed when the user assigns a service instance to your bundle, removes the assignment or when the service client got updated in some way. Handlers added with onAvailable will get called if there was a change, and you got a client: // This is the variable with the return value of requireService(). // You may want to change the variable name for the service you are using. twitchChat . onAvailable (( client ) => { nodecg . log . info ( \"Client was set\" ); // You can use the passed client in here to e.g. setup handlers on the client }); onAvailable is especially useful to add event handlers to clients. E.g., if you want to react to donations or chat messages you can add event handlers for these here. Handlers added with onUnavailable will get called if the user unassigned your bundle from service instance or if there was an error in service client creation: twitchChat . onUnavailable (() => { nodecg . log . info ( \"Client was unset\" ); }); Using getClient Instead of callbacks you can also get access to the client directly: const twitchChatClient = twitchChat . getClient (); getClient will return the client if your bundle has an assigned service instance that has produced a service client without error and will return undefined otherwise. This is useful for when you want to use the client due to some external event or from onAvailable handlers of other services.","title":"Migrating an existing bundle"},{"location":"getting_started/existing_bundle/#migrating-your-existing-bundle-to-nodecg-io","text":"This guide explains to you how to migrate an existing NodeCG bundle that already meets your requirements to use nodecg-io. nodecg-io manages service configuration and authentication, so your bundle doesn't have to bother with it. If you are lucky and used the same library as we do for the service you want to migrate, nodecg-io is a drop-in replacement just doing authentication and configuration. If you have used another library, you'll have to do a little more work to migrate to the library that our service uses. In that case make sure that the migration is worth the effort. You can use nodecg-io for one service and use your own library of choice for other services if you like to.","title":"Migrating your existing bundle to nodecg-io"},{"location":"getting_started/existing_bundle/#install-nodecg-io-core","text":"The first thing you need to do is to install nodecg-io-core . You can do this simply using this npm command: npm install nodecg-io-core","title":"Install nodecg-io-core"},{"location":"getting_started/existing_bundle/#add-the-service-bundle-as-a-bundle-dependency","text":"To ensure that NodeCG loads the service bundle you need before your bundle you need to add it as a bundleDependency to your bundle. To do that for e.g. the twitch-chat service you add it to your bundles package.json file like this: ... \"nodecg\" : { \"compatibleRange\" : \"^1.4.0\" , \"bundleDependencies\" : { \"nodecg-io-twitch-chat\" : \"^0.2.0\" } } ... Change the bundle name and version accordingly. You need to specify each service your bundle needs here as a bundle dependency. Just don't forget to add a comma as a separator between the multiple bundles.","title":"Add the service bundle as a bundle dependency"},{"location":"getting_started/existing_bundle/#import-requireservice","text":"Now that you have nodecg-io-core installed in your bundle you can import the requireService function that it exposes: TypeScript/ES Modules CommonJS import { requireService } from \"nodecg-io-core\" ; const requireService = require ( \"nodecg-io-core\" ). requireService ;","title":"Import requireService"},{"location":"getting_started/existing_bundle/#import-service-type-typescript-only","text":"If you're using TypeScript, you'll also need to install the package of the service that you want to use. You need it to be able to import its type for type safety. This example uses twitch-chat as an example, but you can just replace it with the name of the service you need. npm install nodecg-io-twitch-chat TypeScript import { TwitchChatServiceClient } from \"nodecg-io-twitch-chat\" ; Note You can get the name of the type by using autocomplete in your editor or by looking it up in the service sample.","title":"Import Service type (TypeScript only)"},{"location":"getting_started/existing_bundle/#require-the-service","text":"Now you can finally tell nodecg-io that you want to get access to a service using the requireService function. You'll have to pass your NodeCG instance which is used to identify your bundle and the name of the service you want. In case of TypeScript you'll also need to provide the type of the service. TypeScript JavaScript const twitchChat = requireService < TwitchChatServiceClient > ( nodecg , \"twitch-chat\" ); const twitchChat = requireService ( nodecg , \"twitch-chat\" );","title":"Require the service"},{"location":"getting_started/existing_bundle/#accessing-the-service-client","text":"","title":"Accessing the service client"},{"location":"getting_started/existing_bundle/#using-onavailable-and-onunavailable-handlers","text":"You can set up handlers that are executed when the user assigns a service instance to your bundle, removes the assignment or when the service client got updated in some way. Handlers added with onAvailable will get called if there was a change, and you got a client: // This is the variable with the return value of requireService(). // You may want to change the variable name for the service you are using. twitchChat . onAvailable (( client ) => { nodecg . log . info ( \"Client was set\" ); // You can use the passed client in here to e.g. setup handlers on the client }); onAvailable is especially useful to add event handlers to clients. E.g., if you want to react to donations or chat messages you can add event handlers for these here. Handlers added with onUnavailable will get called if the user unassigned your bundle from service instance or if there was an error in service client creation: twitchChat . onUnavailable (() => { nodecg . log . info ( \"Client was unset\" ); });","title":"Using onAvailable and onUnavailable handlers"},{"location":"getting_started/existing_bundle/#using-getclient","text":"Instead of callbacks you can also get access to the client directly: const twitchChatClient = twitchChat . getClient (); getClient will return the client if your bundle has an assigned service instance that has produced a service client without error and will return undefined otherwise. This is useful for when you want to use the client due to some external event or from onAvailable handlers of other services.","title":"Using getClient"},{"location":"getting_started/install/","text":"Installation Prerequisites In order to download necessary tools and to install nodecg-io using the CLI you need network access. Required Applications You'll need the following tools: Git Node.js v12.0.0 or newer npm 7.0.0 or newer NodeCG 1.4.0 or newer (1.7.0 or higher recommended) Native Build Tools Some services depend on packages that require native build tools. You ONLY need to install these if you want to use a service that depends on native modules or if you want to install a development version. The services that require these include StreamDeck, Midi and Serial. Please note that this list might not be up-to-date. Here's how to install the native build tools on the most popular operating systems, if you need them: Windows Linux macOS For Windows, you'll need the Visual Studio Build Tools, if you have Visual Studio installed you should already have them. If you don't have Visual Studio just install the Visual Studio Build Tools by running the following command as an Administrator : npm install -g windows-build-tools For Linux, you'll need a C++ compiler and some other packages. On Ubuntu/Debian based operating systems run the following command: sudo apt install build-essential libusb-1.0-0-dev libasound2-dev libudev-dev For other Linux distros you'll need the corresponding packages, just search on the internet for the packages on your specific distro. For macOS, you'll need the Xcode command line tools. To install them run the following command: xcode-select --install Install the nodecg-io CLI Install the nodecg-io CLI using the following command: npm install -g nodecg-io-cli Note If you are running on Linux, you may need to use sudo if your npm installation uses a non-writeable path (default on Ubuntu apt packages, usually does not apply to packages installed using nvm ) Install nodecg-io using the nodecg-io CLI Info nodecg-io will always be installed into a nodecg-io/ directory inside your NodeCG installation so that your bundles and all bundles from nodecg-io are separated. The CLI will add this path to the loaded bundles in your NodeCG configuration automatically, you don't need to worry about it. With the nodecg-io CLI installed you can run this command inside a NodeCG installation to install nodecg-io: $ nodecg-io install Installing nodecg-io... You will get a prompt which asks you which version you want to install: user@computer : ~/nodecg $ nodecg-io install Installing nodecg-io... Detected nodecg installation at /home/user/nodecg. ? Which version do you want to install? (Use arrow keys) development \u276f 0.1 There are two possible installation types: By selecting an actual version (e.g., 0.1 ) you create a production install that downloads the required packages from npm and setups a npm workspace to install all dependencies. Here you can choose which services you want to install. Here you can not easily install our premade examples. By selecting development you create a development install that clones the nodecg-io git repo and builds everything from scratch. We only recommend a development install if you are sure that you want to contribute to nodecg-io or want to try an included example. Here you always must install all services and examples. For starters, we recommend using the development version, so you may try our premade examples. Production install Development install Because you selected a production install you may select the services to be included in this next step: user@computer : ~/nodecg $ nodecg-io install Installing nodecg-io... Detected nodecg installation at /home/user/nodecg. ? Which version do you want to install? 0.1 ? Which services do you want to use? (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed) \u276f\u25ef ahk \u25ef android \u25ef curseforge \u25ef discord \u25ef intellij \u25ef irc \u25ef midi-input (Move up and down to reveal more choices) If you want to every change your nodecg-io installation to add/remove a service or change the version, you can always re-run nodecg-io install . If it finds a nodecg-io installation, its options will be preselected in the prompt. Re-running nodecg-io install will also update all packages to the latest patch version. Because you selected a production install you may select to use the samples and documentation to be included in these next steps: user@computer : ~/nodecg $ nodecg-io install Installing nodecg-io... Detected nodecg installation at /home/user/nodecg. ? Which version do you want to install? development ? Would you like to use the provided samples? (y/N) user@computer : ~/nodecg $ nodecg-io install Installing nodecg-io... Detected nodecg installation at /home/user/nodecg. ? Which version do you want to install? development ? Would you like to use the provided samples? No ? Would you like to clone the documentation? (y/N) If you want to every change your nodecg-io installation to add/remove a service or change the version, you can always re-run nodecg-io install . If it finds a nodecg-io installation, its options will be preselected in the prompt. Re-running nodecg-io install will also pull the repository and rebuild it. Continue reading There are many example bundles premade for most services, so you may take a look at the \u201cTry an included sample\u201d -Guide (It will also tell you how to start NodeCG, log in and how to use the GUI). Or you could directly take a deep dive into our framework and either create a new bundle or integrate an existing bundle . There are other bundles using nodecg-io, witch you could try, so may take a look around GitHub or GitLab. Uninstall nodecg-io If you want to uninstall nodecg-io you can run the following command: nodecg-io uninstall This will remove the nodecg-io directory inside your NodeCG installation and also will remove it from the loaded bundle paths in your NodeCG configuration.","title":"Installation"},{"location":"getting_started/install/#installation","text":"","title":"Installation"},{"location":"getting_started/install/#prerequisites","text":"In order to download necessary tools and to install nodecg-io using the CLI you need network access.","title":"Prerequisites"},{"location":"getting_started/install/#required-applications","text":"You'll need the following tools: Git Node.js v12.0.0 or newer npm 7.0.0 or newer NodeCG 1.4.0 or newer (1.7.0 or higher recommended)","title":"Required Applications"},{"location":"getting_started/install/#native-build-tools","text":"Some services depend on packages that require native build tools. You ONLY need to install these if you want to use a service that depends on native modules or if you want to install a development version. The services that require these include StreamDeck, Midi and Serial. Please note that this list might not be up-to-date. Here's how to install the native build tools on the most popular operating systems, if you need them: Windows Linux macOS For Windows, you'll need the Visual Studio Build Tools, if you have Visual Studio installed you should already have them. If you don't have Visual Studio just install the Visual Studio Build Tools by running the following command as an Administrator : npm install -g windows-build-tools For Linux, you'll need a C++ compiler and some other packages. On Ubuntu/Debian based operating systems run the following command: sudo apt install build-essential libusb-1.0-0-dev libasound2-dev libudev-dev For other Linux distros you'll need the corresponding packages, just search on the internet for the packages on your specific distro. For macOS, you'll need the Xcode command line tools. To install them run the following command: xcode-select --install","title":"Native Build Tools"},{"location":"getting_started/install/#install-the-nodecg-io-cli","text":"Install the nodecg-io CLI using the following command: npm install -g nodecg-io-cli Note If you are running on Linux, you may need to use sudo if your npm installation uses a non-writeable path (default on Ubuntu apt packages, usually does not apply to packages installed using nvm )","title":"Install the nodecg-io CLI"},{"location":"getting_started/install/#install-nodecg-io-using-the-nodecg-io-cli","text":"Info nodecg-io will always be installed into a nodecg-io/ directory inside your NodeCG installation so that your bundles and all bundles from nodecg-io are separated. The CLI will add this path to the loaded bundles in your NodeCG configuration automatically, you don't need to worry about it. With the nodecg-io CLI installed you can run this command inside a NodeCG installation to install nodecg-io: $ nodecg-io install Installing nodecg-io... You will get a prompt which asks you which version you want to install: user@computer : ~/nodecg $ nodecg-io install Installing nodecg-io... Detected nodecg installation at /home/user/nodecg. ? Which version do you want to install? (Use arrow keys) development \u276f 0.1 There are two possible installation types: By selecting an actual version (e.g., 0.1 ) you create a production install that downloads the required packages from npm and setups a npm workspace to install all dependencies. Here you can choose which services you want to install. Here you can not easily install our premade examples. By selecting development you create a development install that clones the nodecg-io git repo and builds everything from scratch. We only recommend a development install if you are sure that you want to contribute to nodecg-io or want to try an included example. Here you always must install all services and examples. For starters, we recommend using the development version, so you may try our premade examples. Production install Development install Because you selected a production install you may select the services to be included in this next step: user@computer : ~/nodecg $ nodecg-io install Installing nodecg-io... Detected nodecg installation at /home/user/nodecg. ? Which version do you want to install? 0.1 ? Which services do you want to use? (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed) \u276f\u25ef ahk \u25ef android \u25ef curseforge \u25ef discord \u25ef intellij \u25ef irc \u25ef midi-input (Move up and down to reveal more choices) If you want to every change your nodecg-io installation to add/remove a service or change the version, you can always re-run nodecg-io install . If it finds a nodecg-io installation, its options will be preselected in the prompt. Re-running nodecg-io install will also update all packages to the latest patch version. Because you selected a production install you may select to use the samples and documentation to be included in these next steps: user@computer : ~/nodecg $ nodecg-io install Installing nodecg-io... Detected nodecg installation at /home/user/nodecg. ? Which version do you want to install? development ? Would you like to use the provided samples? (y/N) user@computer : ~/nodecg $ nodecg-io install Installing nodecg-io... Detected nodecg installation at /home/user/nodecg. ? Which version do you want to install? development ? Would you like to use the provided samples? No ? Would you like to clone the documentation? (y/N) If you want to every change your nodecg-io installation to add/remove a service or change the version, you can always re-run nodecg-io install . If it finds a nodecg-io installation, its options will be preselected in the prompt. Re-running nodecg-io install will also pull the repository and rebuild it.","title":"Install nodecg-io using the nodecg-io CLI"},{"location":"getting_started/install/#continue-reading","text":"There are many example bundles premade for most services, so you may take a look at the \u201cTry an included sample\u201d -Guide (It will also tell you how to start NodeCG, log in and how to use the GUI). Or you could directly take a deep dive into our framework and either create a new bundle or integrate an existing bundle . There are other bundles using nodecg-io, witch you could try, so may take a look around GitHub or GitLab.","title":"Continue reading"},{"location":"getting_started/install/#uninstall-nodecg-io","text":"If you want to uninstall nodecg-io you can run the following command: nodecg-io uninstall This will remove the nodecg-io directory inside your NodeCG installation and also will remove it from the loaded bundle paths in your NodeCG configuration.","title":"Uninstall nodecg-io"},{"location":"getting_started/try_example_bundle/","text":"Try an included sample Trying one of the premade example bundles is a good way to get to know the framework and especially the selected service. Attention In case you installed the production branch of nodecg-io, you are out of luck. Because the build process will cause problems if you just take one of the samples and rebuild elsewhere. If you installed dev branch via the nodecg-io-cli and did not select the \u201cuse the samples\u201d-option run nodecg-io install and select it. In case you cloned the repository directly from GitHub, everything should be included. But you may want to pull recent changes and rebuild the project. Step 1: Run NodeCG Now you need to start NodeCG. There are a couple of different ways to do this: Using VS Code If you have nodecg-io open in your VS Code instance, you can launch NodeCG using the Run and Debug Explorer View: Using the terminal You may also launch NodeCG using your terminal with: user@computer : ~/nodecg $ npm run start > nodecg@1.8.1 start > node index.js info: [nodecg/lib/server] Starting NodeCG 1.8.1 (Running on Node.js v16.11.1) info: [nodecg-io-core] Minzig! // A whole host of logging output info: [nodecg/lib/server] NodeCG running on http://localhost:9090 Now you can open the NodeCG dashboard (by default) under http://localhost:9090 . Step 2: Log in to nodecg-io Now navigate to the nodecg-io tab in the NodeCG dashboard. If you are logging in for the first time you will have to set your password. Else you simply have to log in with your previously chosen password. Now you are looking at the nodecg-io config menu. It should look like this: Step 3: Learning how to use the GUI The current GUI is just intended to make the project usable, but it is not very user-friendly. As a more long term solution, a new GUI will be developed that also focuses on user experience. Until the new GUI is developed, you will have to arrange yourself with this one. So, to get started: In pink : NodeCG Tabs Here you will find every NodeCG-bundle that has a dashboard. Here you may select the nodecg-io-debug -dashboard, if it is installed. In yellow : Monaco editor It is basically only a text editor which is used to save configurations for service instances. In green : Services section Here you may create, update and delete instances of a service. Each instance has its own name and configuration. The menu will expand depending on the option selected in the first dropdown. Creating a new service instance : This can be accomplished by selecting the item 'New' . Then a new dropdown will be revealed, in witch you may select the service type. Additionally, you must select an instance name. Then click 'Create' . The newly created instance should be selected. Configure a service instance : While a supported service instance is selected, you may change the config in monaco, then click 'Save' . Deleting a service instance : This can be accomplished by selecting an existing instance. Then click 'Delete Instance' . In violet : Bundles section This section has three dropdowns: Bundle: Here you can select a bundle to configure. Service: If this bundle uses more than one service, you may select the service to set or unset here. Service Instance: Here you can select one instance of the service type set at 2 or none . In red : Unset all Button This button will set the service instance for every bundle/service combination to none, effectively removing the access to every service from all bundles. Danger This can not be undone, and you will have to set up all the bundles again. The service instances will be unaffected. Step 4: Configure the sample The configurations for every sample bundle differ too greatly from each other to be included here, so you have to take a look at the documentation for your sample bundle. You will find it on the left-hand side of this page in the category Services .","title":"Using a sample bundle"},{"location":"getting_started/try_example_bundle/#try-an-included-sample","text":"Trying one of the premade example bundles is a good way to get to know the framework and especially the selected service. Attention In case you installed the production branch of nodecg-io, you are out of luck. Because the build process will cause problems if you just take one of the samples and rebuild elsewhere. If you installed dev branch via the nodecg-io-cli and did not select the \u201cuse the samples\u201d-option run nodecg-io install and select it. In case you cloned the repository directly from GitHub, everything should be included. But you may want to pull recent changes and rebuild the project.","title":"Try an included sample"},{"location":"getting_started/try_example_bundle/#step-1-run-nodecg","text":"Now you need to start NodeCG. There are a couple of different ways to do this:","title":"Step 1: Run NodeCG"},{"location":"getting_started/try_example_bundle/#using-vs-code","text":"If you have nodecg-io open in your VS Code instance, you can launch NodeCG using the Run and Debug Explorer View:","title":"Using VS Code"},{"location":"getting_started/try_example_bundle/#using-the-terminal","text":"You may also launch NodeCG using your terminal with: user@computer : ~/nodecg $ npm run start > nodecg@1.8.1 start > node index.js info: [nodecg/lib/server] Starting NodeCG 1.8.1 (Running on Node.js v16.11.1) info: [nodecg-io-core] Minzig! // A whole host of logging output info: [nodecg/lib/server] NodeCG running on http://localhost:9090 Now you can open the NodeCG dashboard (by default) under http://localhost:9090 .","title":"Using the terminal"},{"location":"getting_started/try_example_bundle/#step-2-log-in-to-nodecg-io","text":"Now navigate to the nodecg-io tab in the NodeCG dashboard. If you are logging in for the first time you will have to set your password. Else you simply have to log in with your previously chosen password. Now you are looking at the nodecg-io config menu. It should look like this:","title":"Step 2: Log in to nodecg-io"},{"location":"getting_started/try_example_bundle/#step-3-learning-how-to-use-the-gui","text":"The current GUI is just intended to make the project usable, but it is not very user-friendly. As a more long term solution, a new GUI will be developed that also focuses on user experience. Until the new GUI is developed, you will have to arrange yourself with this one. So, to get started:","title":"Step 3: Learning how to use the GUI"},{"location":"getting_started/try_example_bundle/#in-pink-nodecg-tabs","text":"Here you will find every NodeCG-bundle that has a dashboard. Here you may select the nodecg-io-debug -dashboard, if it is installed.","title":"In pink: NodeCG Tabs"},{"location":"getting_started/try_example_bundle/#in-yellow-monaco-editor","text":"It is basically only a text editor which is used to save configurations for service instances.","title":"In yellow: Monaco editor"},{"location":"getting_started/try_example_bundle/#in-green-services-section","text":"Here you may create, update and delete instances of a service. Each instance has its own name and configuration. The menu will expand depending on the option selected in the first dropdown. Creating a new service instance : This can be accomplished by selecting the item 'New' . Then a new dropdown will be revealed, in witch you may select the service type. Additionally, you must select an instance name. Then click 'Create' . The newly created instance should be selected. Configure a service instance : While a supported service instance is selected, you may change the config in monaco, then click 'Save' . Deleting a service instance : This can be accomplished by selecting an existing instance. Then click 'Delete Instance' .","title":"In green: Services section"},{"location":"getting_started/try_example_bundle/#in-violet-bundles-section","text":"This section has three dropdowns: Bundle: Here you can select a bundle to configure. Service: If this bundle uses more than one service, you may select the service to set or unset here. Service Instance: Here you can select one instance of the service type set at 2 or none .","title":"In violet: Bundles section"},{"location":"getting_started/try_example_bundle/#in-red-unset-all-button","text":"This button will set the service instance for every bundle/service combination to none, effectively removing the access to every service from all bundles. Danger This can not be undone, and you will have to set up all the bundles again. The service instances will be unaffected.","title":"In red: Unset all Button"},{"location":"getting_started/try_example_bundle/#step-4-configure-the-sample","text":"The configurations for every sample bundle differ too greatly from each other to be included here, so you have to take a look at the documentation for your sample bundle. You will find it on the left-hand side of this page in the category Services .","title":"Step 4: Configure the sample"},{"location":"getting_started/use_replicants/","text":"Use service replicants Some services allow reading some data using NodeCG Replicants . Replicants are especially useful for displaying simple information in graphics and dashboards. You can setup a replicant and directly use it for basic values inside your graphic/dashboard without the need for much extension code. TODO: explain for what replicants are useful Current list of services with replicant support: StreamElements (more services with replicants will hopefully be added in the future) Create and register replicants in your bundle extension To use a replicant of a service you must first depend on the service as usual. Please refer to Your first bundle and Migrating an existing bundle for a guide on how to depend on nodecg-io services inside your NodeCG extension. With access to a service client you can create a replicant inside your bundle and pass it to the setupReplicant method of the service client to let it be filled with data by the service. Here's an example for the StreamElements service (replace the name with the service of the above list that you want to use): TypeScript JavaScript // Update your imports to include the type of the replicant data: import { StreamElementsReplicant , StreamElementsServiceClient } from \"nodecg-io-streamelements\" ; module .exports = function ( nodecg : NodeCG ) { // Require service (as usual) const streamElements = requireService < StreamElementsServiceClient > ( nodecg , \"streamelements\" ); // Define replicant const streamElementsReplicant = nodecg . Replicant < StreamElementsReplicant > ( \"myStreamElementsReplicant\" ); ... streamElements ? . onAvailable (( client ) => { ... // Connect your replicant to this nodecg-io service instance. client . setupReplicant ( streamElementsReplicant ); }); } module . exports = function ( nodecg : NodeCG ) { // Require service (as usual) const streamElements = requireService ( nodecg , \"streamelements\" ); // Define replicant const streamElementsReplicant = nodecg . Replicant ( \"myStreamElementsReplicant\" ); ... streamElements ? . onAvailable (( client ) => { ... // Connect your replicant to this nodecg-io service instance. client . setupReplicant ( streamElementsReplicant ); }); } Use the service replicant In case you want to use the created replicant in your bundles extension you already have it declared and a reference to it in a variable. If you want to use it in a graphic or dashboard you'll need to declare the replicant with the same name there too. You can access the NodeCG replicant as usual. Use replicant.value to get the current state and replicant.on(\"change\", (newValue, oldValue) => { /* .... */ }) to be informed when the value of the replicant changes. To figure out what properties are available on the object value you can either look at the corresponding sample bundle or use autocomplete in your editor if you're using TypeScript.","title":"Use service replicants"},{"location":"getting_started/use_replicants/#use-service-replicants","text":"Some services allow reading some data using NodeCG Replicants . Replicants are especially useful for displaying simple information in graphics and dashboards. You can setup a replicant and directly use it for basic values inside your graphic/dashboard without the need for much extension code. TODO: explain for what replicants are useful Current list of services with replicant support: StreamElements (more services with replicants will hopefully be added in the future)","title":"Use service replicants"},{"location":"getting_started/use_replicants/#create-and-register-replicants-in-your-bundle-extension","text":"To use a replicant of a service you must first depend on the service as usual. Please refer to Your first bundle and Migrating an existing bundle for a guide on how to depend on nodecg-io services inside your NodeCG extension. With access to a service client you can create a replicant inside your bundle and pass it to the setupReplicant method of the service client to let it be filled with data by the service. Here's an example for the StreamElements service (replace the name with the service of the above list that you want to use): TypeScript JavaScript // Update your imports to include the type of the replicant data: import { StreamElementsReplicant , StreamElementsServiceClient } from \"nodecg-io-streamelements\" ; module .exports = function ( nodecg : NodeCG ) { // Require service (as usual) const streamElements = requireService < StreamElementsServiceClient > ( nodecg , \"streamelements\" ); // Define replicant const streamElementsReplicant = nodecg . Replicant < StreamElementsReplicant > ( \"myStreamElementsReplicant\" ); ... streamElements ? . onAvailable (( client ) => { ... // Connect your replicant to this nodecg-io service instance. client . setupReplicant ( streamElementsReplicant ); }); } module . exports = function ( nodecg : NodeCG ) { // Require service (as usual) const streamElements = requireService ( nodecg , \"streamelements\" ); // Define replicant const streamElementsReplicant = nodecg . Replicant ( \"myStreamElementsReplicant\" ); ... streamElements ? . onAvailable (( client ) => { ... // Connect your replicant to this nodecg-io service instance. client . setupReplicant ( streamElementsReplicant ); }); }","title":"Create and register replicants in your bundle extension"},{"location":"getting_started/use_replicants/#use-the-service-replicant","text":"In case you want to use the created replicant in your bundles extension you already have it declared and a reference to it in a variable. If you want to use it in a graphic or dashboard you'll need to declare the replicant with the same name there too. You can access the NodeCG replicant as usual. Use replicant.value to get the current state and replicant.on(\"change\", (newValue, oldValue) => { /* .... */ }) to be informed when the value of the replicant changes. To figure out what properties are available on the object value you can either look at the corresponding sample bundle or use autocomplete in your editor if you're using TypeScript.","title":"Use the service replicant"},{"location":"samples/ahk/","text":"Using the AutoHotkey sample bundle The AutoHotkey sample bundle in samples/ahk-sendcommand shows how to send a command to a HotkeylessAHK server. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A running HotkeylessAHK setup. Configure the AutoHotkey sample bundle In NodeCG, create a new ahk service instance. Enter the host and port of the HotkeylessAHK Server: { \"host\" : \"localhost\" , \"port\" : 42800 } After entering it, click save. Set the sample's ( ahk-sendcommand ) dependency to be the newly created service instance (of type ahk ). A small window with the text \u201cHello World\u201d should have popped up.","title":"AHK sample"},{"location":"samples/ahk/#using-the-autohotkey-sample-bundle","text":"The AutoHotkey sample bundle in samples/ahk-sendcommand shows how to send a command to a HotkeylessAHK server.","title":"Using the AutoHotkey sample bundle"},{"location":"samples/ahk/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A running HotkeylessAHK setup.","title":"Prerequisites"},{"location":"samples/ahk/#configure-the-autohotkey-sample-bundle","text":"In NodeCG, create a new ahk service instance. Enter the host and port of the HotkeylessAHK Server: { \"host\" : \"localhost\" , \"port\" : 42800 } After entering it, click save. Set the sample's ( ahk-sendcommand ) dependency to be the newly created service instance (of type ahk ). A small window with the text \u201cHello World\u201d should have popped up.","title":"Configure the AutoHotkey sample bundle"},{"location":"samples/android/","text":"Using the Android sample bundle The Android example bundle in samples/android shows how to connect to an Android device and turn on WLAN. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Clone this Git Repository Run gradlew build (on Windows) or ./gradlew build (on Linux) inside the cloned repository. There will be an apk file generated in app/build/outputs/apk/debug/app-debug.apk . Install it on the Android device. Launch the app. You'll be asked to grant the system alert window permission. This is required because the app will do its work in the background. However, occasionally when user interaction is required, it needs to launch an activity without the user pressing the app icon in the launcher. Install the android developer tools and make sure you have the adb command in your PATH Enable developer options on you device and enable USB debugging there. See here . Run adb start-server Connect your device via USB. You'll be prompted whether you want to allow USB debugging. Press Allow . Run adb device -l . The output might look like this: ######## device usb:2-1.7 product:######## model:######## device:######## transport_id:2 The hexadecimal number in the first column is your device ID. You'll need this later. In NodeCG, create a new android service instance. Enter the following: { \"device\" : \"device_id\" } Replace device_id with your device ID. After entering it, click save. Set the sample's ( android ) dependency to be the newly created service instance (of type android ). You should see that WLAN is now activated on your device.","title":"Android"},{"location":"samples/android/#using-the-android-sample-bundle","text":"The Android example bundle in samples/android shows how to connect to an Android device and turn on WLAN.","title":"Using the Android sample bundle"},{"location":"samples/android/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Clone this Git Repository Run gradlew build (on Windows) or ./gradlew build (on Linux) inside the cloned repository. There will be an apk file generated in app/build/outputs/apk/debug/app-debug.apk . Install it on the Android device. Launch the app. You'll be asked to grant the system alert window permission. This is required because the app will do its work in the background. However, occasionally when user interaction is required, it needs to launch an activity without the user pressing the app icon in the launcher. Install the android developer tools and make sure you have the adb command in your PATH Enable developer options on you device and enable USB debugging there. See here . Run adb start-server Connect your device via USB. You'll be prompted whether you want to allow USB debugging. Press Allow . Run adb device -l . The output might look like this: ######## device usb:2-1.7 product:######## model:######## device:######## transport_id:2 The hexadecimal number in the first column is your device ID. You'll need this later. In NodeCG, create a new android service instance. Enter the following: { \"device\" : \"device_id\" } Replace device_id with your device ID. After entering it, click save. Set the sample's ( android ) dependency to be the newly created service instance (of type android ). You should see that WLAN is now activated on your device.","title":"Prerequisites"},{"location":"samples/artnet/","text":"Using the Art-Net sample bundle The Art-Net example bundle in samples/artnet-console demonstrates the ability send data via Art-Net to e.g., open lighting architecture or professional lighting equipment. Here is a guide to how to get it working. The underlying service is using jeffreykog/node-artnet-protocol as its library. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working Art-Net Node in the current network Configure the Art-Net sample bundle In NodeCG, create a new Art-Net service instance. Enter the host to witch the service should broadcast: Host The broadcast address the Art-Net library will use to send dmx packages. { \"host\" : \"127.0.0.1\" } After entering it, click save. Info You may overwrite this broadcast address in code with client . bind ( \"host address\" ); . Set the sample's ( artnet-console ) dependency to be the newly created service instance (of type artnet ). Check the NodeCG logs. You should see data logged. Explanations Receiving DMX data client . onDMX (( dmx ) => { // dmx contains an ArtDmx object nodecg . log . info ( dmx . universe , dmx . data ); }); The data you receive has the following fields: declare class ArtDmx { opcode : number ; protocolVersion : number ; sequence : number ; physical : number ; universe : number ; data : number []; constructor ( sequence : number , physical : number , universe : number , data : number []); isSequenceEnabled () : boolean ; static decode ( data : Buffer ) : ArtDmx ; toString () : string ; encode () : Buffer ; } Sending DMX data // send new data every 0,8 seconds. // This is the official timing for re-transmiting data in the artnet specifciation. setInterval (() => { client . send ( universe , values // number[] of values for each of the 512 channels ); }, 800 ); Note Since neither this library nor nodecg-io currently contains an abstraction that abides the timings specified by the specification, it is important for your implementation to respect this part of the specification: However, an input that is active but not changing, will re-transmit the last valid ArtDmx packet at approximately 4-second intervals. ( Note . In order to converge the needs of Art- Net and sACN it is recommended that Art-Net devices actually use a re-transmit time of 800ms to 1000ms). \u2014 Art-Net 4 Specification p. 48","title":"Art-Net sample"},{"location":"samples/artnet/#using-the-art-net-sample-bundle","text":"The Art-Net example bundle in samples/artnet-console demonstrates the ability send data via Art-Net to e.g., open lighting architecture or professional lighting equipment. Here is a guide to how to get it working. The underlying service is using jeffreykog/node-artnet-protocol as its library.","title":"Using the Art-Net sample bundle"},{"location":"samples/artnet/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working Art-Net Node in the current network","title":"Prerequisites"},{"location":"samples/artnet/#configure-the-art-net-sample-bundle","text":"In NodeCG, create a new Art-Net service instance. Enter the host to witch the service should broadcast: Host The broadcast address the Art-Net library will use to send dmx packages. { \"host\" : \"127.0.0.1\" } After entering it, click save. Info You may overwrite this broadcast address in code with client . bind ( \"host address\" ); . Set the sample's ( artnet-console ) dependency to be the newly created service instance (of type artnet ). Check the NodeCG logs. You should see data logged.","title":"Configure the Art-Net sample bundle"},{"location":"samples/artnet/#explanations","text":"","title":"Explanations"},{"location":"samples/artnet/#receiving-dmx-data","text":"client . onDMX (( dmx ) => { // dmx contains an ArtDmx object nodecg . log . info ( dmx . universe , dmx . data ); }); The data you receive has the following fields: declare class ArtDmx { opcode : number ; protocolVersion : number ; sequence : number ; physical : number ; universe : number ; data : number []; constructor ( sequence : number , physical : number , universe : number , data : number []); isSequenceEnabled () : boolean ; static decode ( data : Buffer ) : ArtDmx ; toString () : string ; encode () : Buffer ; }","title":"Receiving DMX data"},{"location":"samples/artnet/#sending-dmx-data","text":"// send new data every 0,8 seconds. // This is the official timing for re-transmiting data in the artnet specifciation. setInterval (() => { client . send ( universe , values // number[] of values for each of the 512 channels ); }, 800 ); Note Since neither this library nor nodecg-io currently contains an abstraction that abides the timings specified by the specification, it is important for your implementation to respect this part of the specification: However, an input that is active but not changing, will re-transmit the last valid ArtDmx packet at approximately 4-second intervals. ( Note . In order to converge the needs of Art- Net and sACN it is recommended that Art-Net devices actually use a re-transmit time of 800ms to 1000ms). \u2014 Art-Net 4 Specification p. 48","title":"Sending DMX data"},{"location":"samples/atem/","text":"Using the Atem sample bundle The Atem sample bundle in samples/atem shows how to listen to commands. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. Configure the Atem sample bundle In NodeCG, create a new atem service instance. Enter the address and optional a port of the Atem server: { \"address\" : \"0.0.0.0\" } or { \"address\" : \"0.0.0.0\" , \"port\" : 9910 } After entering it, click save. Set the sample's ( atem ) dependency to be the newly created service instance (of type atem ). Now all commands sended through the atem protocol should be logged in the console.","title":"Atem sample"},{"location":"samples/atem/#using-the-atem-sample-bundle","text":"The Atem sample bundle in samples/atem shows how to listen to commands.","title":"Using the Atem sample bundle"},{"location":"samples/atem/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI.","title":"Prerequisites"},{"location":"samples/atem/#configure-the-atem-sample-bundle","text":"In NodeCG, create a new atem service instance. Enter the address and optional a port of the Atem server: { \"address\" : \"0.0.0.0\" } or { \"address\" : \"0.0.0.0\" , \"port\" : 9910 } After entering it, click save. Set the sample's ( atem ) dependency to be the newly created service instance (of type atem ). Now all commands sended through the atem protocol should be logged in the console.","title":"Configure the Atem sample bundle"},{"location":"samples/curseforge/","text":"Using the CurseForge sample bundle The CurseForge example bundle in samples/curseforge demonstrates the ability to search for different add-ons with the ID or search with specific values for matching add-ons. Here is a guide how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. Configure the CurseForge bundle In NodeCG, create a new CurseForge service instance. Set the sample's ( curseforge ) dependency to be the newly created service instance (of type curseforge ). Check the NodeCG logs. You should see two lists of add-ons.","title":"Curseforge sample"},{"location":"samples/curseforge/#using-the-curseforge-sample-bundle","text":"The CurseForge example bundle in samples/curseforge demonstrates the ability to search for different add-ons with the ID or search with specific values for matching add-ons. Here is a guide how to get it working.","title":"Using the CurseForge sample bundle"},{"location":"samples/curseforge/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI.","title":"Prerequisites"},{"location":"samples/curseforge/#configure-the-curseforge-bundle","text":"In NodeCG, create a new CurseForge service instance. Set the sample's ( curseforge ) dependency to be the newly created service instance (of type curseforge ). Check the NodeCG logs. You should see two lists of add-ons.","title":"Configure the CurseForge bundle"},{"location":"samples/dbus-ratbagd/","text":"Using the D-Bus ratbagd sample bundle The dbus-ratbagd example bundle in samples/dbus-ratbagd demonstrates how to access all devices supported by ratbagd. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: ratbagd Configure the DBus ratbagd sample bundle In NodeCG, create a new D-Bus service instance. Configure the D-Bus service There should not be any additional configuration needed for the D-Bus service. Set the sample's ( dbus-ratbagd ) dependency to be the newly created service instance (of type dbus ). Check the NodeCG logs: You should see an error or a success message and a list of connected device names.","title":"DBus"},{"location":"samples/dbus-ratbagd/#using-the-d-bus-ratbagd-sample-bundle","text":"The dbus-ratbagd example bundle in samples/dbus-ratbagd demonstrates how to access all devices supported by ratbagd. Here is a guide to how to get it working.","title":"Using the D-Bus ratbagd sample bundle"},{"location":"samples/dbus-ratbagd/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: ratbagd","title":"Prerequisites"},{"location":"samples/dbus-ratbagd/#configure-the-dbus-ratbagd-sample-bundle","text":"In NodeCG, create a new D-Bus service instance. Configure the D-Bus service There should not be any additional configuration needed for the D-Bus service. Set the sample's ( dbus-ratbagd ) dependency to be the newly created service instance (of type dbus ). Check the NodeCG logs: You should see an error or a success message and a list of connected device names.","title":"Configure the DBus ratbagd sample bundle"},{"location":"samples/debug/","text":"Using the Debug sample bundle The Debug Helper example bundle in samples/debug demonstrates the ability to use the debug helper to send same sample data to your bundle, so you can trigger different features and test/debug them. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. Configure the Debug sample bundle In NodeCG, create a new Debug service instance. Set the sample's ( debug ) dependency to be the newly created service instance (of type debug ). Go to the nodecg-io-debug dashboard and use some buttons or other inputs. Check the NodeCG log. It should contain a message for each action you did and the passed values.","title":"Debug"},{"location":"samples/debug/#using-the-debug-sample-bundle","text":"The Debug Helper example bundle in samples/debug demonstrates the ability to use the debug helper to send same sample data to your bundle, so you can trigger different features and test/debug them.","title":"Using the Debug sample bundle"},{"location":"samples/debug/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI.","title":"Prerequisites"},{"location":"samples/debug/#configure-the-debug-sample-bundle","text":"In NodeCG, create a new Debug service instance. Set the sample's ( debug ) dependency to be the newly created service instance (of type debug ). Go to the nodecg-io-debug dashboard and use some buttons or other inputs. Check the NodeCG log. It should contain a message for each action you did and the passed values.","title":"Configure the Debug sample bundle"},{"location":"samples/discord-rpc/","text":"Using the Discord RPC sample bundle The Discord Rich Presence example bundle in samples/discord-rpc demonstrates the ability to access a locally running discord client. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A discord application with permissions indentify and rpc Note If you don't have an application yet, you can create one here Configure the Discord RPC sample bundle In NodeCG, create a new discord-rpc service instance. Enter the clientId and clientSecret for the service: { \"clientId\" : \"your client id\" , \"clientSecret\" : \"your client secret\" } After entering it, click save. Set the sample's ( discord-rpc ) dependency to be the newly created service instance (of type discord-rpc ). Check the NodeCG logs: You should see an error or a success message displaying your discord username.","title":"Discord RPC sample"},{"location":"samples/discord-rpc/#using-the-discord-rpc-sample-bundle","text":"The Discord Rich Presence example bundle in samples/discord-rpc demonstrates the ability to access a locally running discord client. Here is a guide to how to get it working.","title":"Using the Discord RPC sample bundle"},{"location":"samples/discord-rpc/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A discord application with permissions indentify and rpc Note If you don't have an application yet, you can create one here","title":"Prerequisites"},{"location":"samples/discord-rpc/#configure-the-discord-rpc-sample-bundle","text":"In NodeCG, create a new discord-rpc service instance. Enter the clientId and clientSecret for the service: { \"clientId\" : \"your client id\" , \"clientSecret\" : \"your client secret\" } After entering it, click save. Set the sample's ( discord-rpc ) dependency to be the newly created service instance (of type discord-rpc ). Check the NodeCG logs: You should see an error or a success message displaying your discord username.","title":"Configure the Discord RPC sample bundle"},{"location":"samples/discord/","text":"Using the Discord sample bundle The Discord-guild-chat example bundle in samples/discord-guild-chat demonstrates the ability to reply with pong to messages which are equal to !ping or ping . Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Discord Bot token Note If you don't have such a token yet, you can follow this guide. Configure the Discord sample bundle In NodeCG, create a new discord service instance. Enter your bot token: { \"botToken\" : \"your-token-goes-here\" } After entering it, click save. Set the sample's ( discord-guild-chat ) dependency to be the newly created service instance (of type discord ). Check the NodeCG logs: You should see an error or a Login message.","title":"Discord API sample"},{"location":"samples/discord/#using-the-discord-sample-bundle","text":"The Discord-guild-chat example bundle in samples/discord-guild-chat demonstrates the ability to reply with pong to messages which are equal to !ping or ping . Here is a guide to how to get it working.","title":"Using the Discord sample bundle"},{"location":"samples/discord/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Discord Bot token Note If you don't have such a token yet, you can follow this guide.","title":"Prerequisites"},{"location":"samples/discord/#configure-the-discord-sample-bundle","text":"In NodeCG, create a new discord service instance. Enter your bot token: { \"botToken\" : \"your-token-goes-here\" } After entering it, click save. Set the sample's ( discord-guild-chat ) dependency to be the newly created service instance (of type discord ). Check the NodeCG logs: You should see an error or a Login message.","title":"Configure the Discord sample bundle"},{"location":"samples/elgato-light/","text":"Using the elgato-light sample bundle The elgato-light example bundle in samples/elgato-light demonstrates the ability to controll elgato keylights and elgato lightstrips. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: at least one elgato keylight or lightstrip Configure the elgato-light sample bundle In NodeCG, create a new elgato-light service instance. Enter your IP address of your light and the type ( KeyLight or LightStrip ): { \"lights\" : [ { \"ipAddress\" : \"xxx.xxx.xxx.xxx\" , \"lightType\" : \"KeyLight\" , \"name\" : \"MyLight1\" } ] } You can add as many lights to this service as you wish by adding more objects inside the lights array. name is optional and can be used to identify lights in bundles. You can omit it if you don't use the name to get it in any bundle. After entering it, click save. Set the sample's ( elgato-light ) dependency to be the newly created service instance (of type elgato-light ). Check the NodeCG logs: Your lights should blink for three seconds and you should see the current brightness in the NodeCG logs.","title":"Elgato Light sample"},{"location":"samples/elgato-light/#using-the-elgato-light-sample-bundle","text":"The elgato-light example bundle in samples/elgato-light demonstrates the ability to controll elgato keylights and elgato lightstrips. Here is a guide to how to get it working.","title":"Using the elgato-light sample bundle"},{"location":"samples/elgato-light/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: at least one elgato keylight or lightstrip","title":"Prerequisites"},{"location":"samples/elgato-light/#configure-the-elgato-light-sample-bundle","text":"In NodeCG, create a new elgato-light service instance. Enter your IP address of your light and the type ( KeyLight or LightStrip ): { \"lights\" : [ { \"ipAddress\" : \"xxx.xxx.xxx.xxx\" , \"lightType\" : \"KeyLight\" , \"name\" : \"MyLight1\" } ] } You can add as many lights to this service as you wish by adding more objects inside the lights array. name is optional and can be used to identify lights in bundles. You can omit it if you don't use the name to get it in any bundle. After entering it, click save. Set the sample's ( elgato-light ) dependency to be the newly created service instance (of type elgato-light ). Check the NodeCG logs: Your lights should blink for three seconds and you should see the current brightness in the NodeCG logs.","title":"Configure the elgato-light sample bundle"},{"location":"samples/github/","text":"Using the GitHub sample bundle The GitHub example bundle in samples/github demonstrates the ability to access the GitHub rest API. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A GitHub token Note If you don't have a token yet, you can create one here . The token requires at least the repo scope. Configure the GitHub sample bundle In NodeCG, create a new GitHub service instance. Enter the GitHub token: { \"token\" : \"abcdef....\" } After entering it, click save. Set the sample's ( github ) dependency to be the newly created service instance (of type github ). Check the NodeCG logs: You should see an error or a success message and a list of all your repositories.","title":"GitHub sample"},{"location":"samples/github/#using-the-github-sample-bundle","text":"The GitHub example bundle in samples/github demonstrates the ability to access the GitHub rest API. Here is a guide to how to get it working.","title":"Using the GitHub sample bundle"},{"location":"samples/github/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A GitHub token Note If you don't have a token yet, you can create one here . The token requires at least the repo scope.","title":"Prerequisites"},{"location":"samples/github/#configure-the-github-sample-bundle","text":"In NodeCG, create a new GitHub service instance. Enter the GitHub token: { \"token\" : \"abcdef....\" } After entering it, click save. Set the sample's ( github ) dependency to be the newly created service instance (of type github ). Check the NodeCG logs: You should see an error or a success message and a list of all your repositories.","title":"Configure the GitHub sample bundle"},{"location":"samples/google-cast/","text":"Using the Google Cast sample bundle The google-cast example bundle in samples/google-cast demonstrates the ability to cast a mp3 file to a Google Cast device. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: a Google Cast device inside your local network Configure the Google Cast sample bundle In nodecg-io, create a new google-cast service instance. Select a device inside the configuration preset list or add a device using a config like this: { \"host\" : \"192.168.2.111\" , \"friendlyName\" : \"My Chromecast\" } After entering it, click save. Set the sample's ( google-cast ) dependency to be the newly created service instance (of type google-cast ). Listen to the beautiful music playing through your Google Cast device:","title":"Google Cast sample"},{"location":"samples/google-cast/#using-the-google-cast-sample-bundle","text":"The google-cast example bundle in samples/google-cast demonstrates the ability to cast a mp3 file to a Google Cast device. Here is a guide to how to get it working.","title":"Using the Google Cast sample bundle"},{"location":"samples/google-cast/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: a Google Cast device inside your local network","title":"Prerequisites"},{"location":"samples/google-cast/#configure-the-google-cast-sample-bundle","text":"In nodecg-io, create a new google-cast service instance. Select a device inside the configuration preset list or add a device using a config like this: { \"host\" : \"192.168.2.111\" , \"friendlyName\" : \"My Chromecast\" } After entering it, click save. Set the sample's ( google-cast ) dependency to be the newly created service instance (of type google-cast ). Listen to the beautiful music playing through your Google Cast device:","title":"Configure the Google Cast sample bundle"},{"location":"samples/gsheets/","text":"Using the gsheets sample bundle The gsheets bundle in samples/gsheets demonstrates the ability of retrieving all rows where column A is filled. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Google cloud API OAuth access (client ID, client Secret) Grant Google Sheets API v4 access at the project's dashboard. Shortcut URL: https://console.developers.google.com/apis/library/sheets.googleapis.com?project=<project-id> . Note If you don't have such a key yet, you can generate them like this . As redirect URI add: http://localhost:9090/nodecg-io-googleapis/oauth2callback Configure the gsheets sample bundle In NodeCG, create a new googleapis service instance. Enter the credentials for googleapis: { \"clientID\" : \"<clientID>\" , \"clientSecret\" : \"<clientSecret>\" , \"scopes\" : [ \"https://www.googleapis.com/auth/spreadsheets\" ] } After entering it, click save. Note You can add multiple scopes if the googleapis instance is used for multiple bundles. Set the sample's ( gsheets ) dependency to be the newly created service instance (of type googleapis ). Check the NodeCG logs: You should see an error or a success message that is hardcoded in samples/gsheets/extension/index.ts .","title":"GSheets sample"},{"location":"samples/gsheets/#using-the-gsheets-sample-bundle","text":"The gsheets bundle in samples/gsheets demonstrates the ability of retrieving all rows where column A is filled. Here is a guide to how to get it working.","title":"Using the gsheets sample bundle"},{"location":"samples/gsheets/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Google cloud API OAuth access (client ID, client Secret) Grant Google Sheets API v4 access at the project's dashboard. Shortcut URL: https://console.developers.google.com/apis/library/sheets.googleapis.com?project=<project-id> . Note If you don't have such a key yet, you can generate them like this . As redirect URI add: http://localhost:9090/nodecg-io-googleapis/oauth2callback","title":"Prerequisites"},{"location":"samples/gsheets/#configure-the-gsheets-sample-bundle","text":"In NodeCG, create a new googleapis service instance. Enter the credentials for googleapis: { \"clientID\" : \"<clientID>\" , \"clientSecret\" : \"<clientSecret>\" , \"scopes\" : [ \"https://www.googleapis.com/auth/spreadsheets\" ] } After entering it, click save. Note You can add multiple scopes if the googleapis instance is used for multiple bundles. Set the sample's ( gsheets ) dependency to be the newly created service instance (of type googleapis ). Check the NodeCG logs: You should see an error or a success message that is hardcoded in samples/gsheets/extension/index.ts .","title":"Configure the gsheets sample bundle"},{"location":"samples/intellij/","text":"Using the IntelliJ sample bundle The IntelliJ example bundle in samples/intellij-integration Shows how to connect to a JetBrains IDE and print all installed plugins. Here is a guide to how to get it working: Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Clone this Git Repository. Make sure you've Java 11 or newer installed. Run gradlew build (on Windows) or ./gradlew build (on Linux) inside the cloned repository. Inside your JetBrains IDE go to Settings and then Plugins . Click on the little gear in the top right corner. Then click Install from file . Navigate to path to your cloned repository/build/libs and select the jar file there. Restart the IDE. Configure the IntelliJ sample bundle In NodeCG, create a new IntelliJ service instance. Enter the host and port of your IDE's HTTP server: { \"address\" : \"127.0.0.1:19524\" } This tells nodecg-io to look for your IDE's HTTP server on your computer at port 19524 . If you want it to run on another port, please follow the guidelines here . Set the sample's ( intellij-integration ) dependency to be the newly created service instance (of type intellij ). Check the NodeCG logs: You should see an error or a list of all plugins installed at your IDE including the preinstalled ones by JetBrains.","title":"IntelliJ sample"},{"location":"samples/intellij/#using-the-intellij-sample-bundle","text":"The IntelliJ example bundle in samples/intellij-integration Shows how to connect to a JetBrains IDE and print all installed plugins. Here is a guide to how to get it working:","title":"Using the IntelliJ sample bundle"},{"location":"samples/intellij/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Clone this Git Repository. Make sure you've Java 11 or newer installed. Run gradlew build (on Windows) or ./gradlew build (on Linux) inside the cloned repository. Inside your JetBrains IDE go to Settings and then Plugins . Click on the little gear in the top right corner. Then click Install from file . Navigate to path to your cloned repository/build/libs and select the jar file there. Restart the IDE.","title":"Prerequisites"},{"location":"samples/intellij/#configure-the-intellij-sample-bundle","text":"In NodeCG, create a new IntelliJ service instance. Enter the host and port of your IDE's HTTP server: { \"address\" : \"127.0.0.1:19524\" } This tells nodecg-io to look for your IDE's HTTP server on your computer at port 19524 . If you want it to run on another port, please follow the guidelines here . Set the sample's ( intellij-integration ) dependency to be the newly created service instance (of type intellij ). Check the NodeCG logs: You should see an error or a list of all plugins installed at your IDE including the preinstalled ones by JetBrains.","title":"Configure the IntelliJ sample bundle"},{"location":"samples/irc/","text":"Using the IRC sample bundle The IRC example bundle in samples/irc demonstrates the ability to get access to an IRC chat. This sample is designed to log the twitch IRC chat of skate702. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. Configure the IRC sample bundle In NodeCG, create a new IRC service instance. Enter the credentials for IRC. In this example we will \u201canonymously\u201d connect to the twitch IRC chat. Enter the host, port, and nick in this format: { \"host\" : \"irc.chat.twitch.tv\" , \"port\" : 6667 , \"nick\" : \"justinfan123456\" } Here you may want to change the numbers of the nick to be unique to you. After entering it, click save. Set the sample's ( irc ) dependency to be the newly created service instance (of type irc ). Check the NodeCG logs: You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/irc/extension/index.ts .","title":"IRC"},{"location":"samples/irc/#using-the-irc-sample-bundle","text":"The IRC example bundle in samples/irc demonstrates the ability to get access to an IRC chat. This sample is designed to log the twitch IRC chat of skate702.","title":"Using the IRC sample bundle"},{"location":"samples/irc/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI.","title":"Prerequisites"},{"location":"samples/irc/#configure-the-irc-sample-bundle","text":"In NodeCG, create a new IRC service instance. Enter the credentials for IRC. In this example we will \u201canonymously\u201d connect to the twitch IRC chat. Enter the host, port, and nick in this format: { \"host\" : \"irc.chat.twitch.tv\" , \"port\" : 6667 , \"nick\" : \"justinfan123456\" } Here you may want to change the numbers of the nick to be unique to you. After entering it, click save. Set the sample's ( irc ) dependency to be the newly created service instance (of type irc ). Check the NodeCG logs: You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/irc/extension/index.ts .","title":"Configure the IRC sample bundle"},{"location":"samples/midi-input/","text":"Using the midi-input sample bundle The midi-input example bundle in samples/midi-input demonstrates the ability to read data from a midi device. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A midi device that can be connected to your computer Configure the midi-input sample bundle In NodeCG, create a new midi-input service instance. Enter your device information: { \"device\" : \"name\" } After entering it, click save. Note A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-input using the command npm run list . The devices should be listed with their device names and some other stuff. Under Linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Set the sample's ( midi-input ) dependency to be the newly created service instance (of type midi-input ). Check the NodeCG logs: You should see an error or a success message and all midi messages that are sent by the device that is configured.","title":"Midi-Input sample"},{"location":"samples/midi-input/#using-the-midi-input-sample-bundle","text":"The midi-input example bundle in samples/midi-input demonstrates the ability to read data from a midi device.","title":"Using the midi-input sample bundle"},{"location":"samples/midi-input/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A midi device that can be connected to your computer","title":"Prerequisites"},{"location":"samples/midi-input/#configure-the-midi-input-sample-bundle","text":"In NodeCG, create a new midi-input service instance. Enter your device information: { \"device\" : \"name\" } After entering it, click save. Note A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-input using the command npm run list . The devices should be listed with their device names and some other stuff. Under Linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Set the sample's ( midi-input ) dependency to be the newly created service instance (of type midi-input ). Check the NodeCG logs: You should see an error or a success message and all midi messages that are sent by the device that is configured.","title":"Configure the midi-input sample bundle"},{"location":"samples/midi-io/","text":"Using the midi-io sample bundle The midi-io example bundle in samples/midi-io demonstrates the ability to send/receive data to/from a midi device. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A midi device that can be connected to your computer Configure the midi-io sample bundle In NodeCG, create a new midi-input service instance. Enter your device information: { \"device\" : \"name\" } After entering it, click save. Note A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-input using the command npm run list . The devices should be listed with their device names and some other stuff. Under Linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Create a new midi-output service instance using the left upper menu. Set the sample's ( midi-io ) dependencies to be the newly created service instances (of type midi-input & midi-output ). Check the NodeCG logs: You should see an error or a success message and midi messages that are received and echoed back to the device that is configured. The messages are only modified, if the received Message is a Noteon with a velocity of greater than zero or a control change message with a value of at least 64. Noteoff messages are always echoed unmodified. Note A Noteon message with a velocity of 0 should be handled like a Noteoff message, so they are echoed unmodified. Otherwise, this would get annoying very fast. If a control change is assigned to the push-button values of 64 and up are interpreted as on and values lower than that are interpreted as off. Most somewhat modern Midi devices send 127 as on and 0 as off, but 63 and 64 should also be sufficient.","title":"Midi-IO sample"},{"location":"samples/midi-io/#using-the-midi-io-sample-bundle","text":"The midi-io example bundle in samples/midi-io demonstrates the ability to send/receive data to/from a midi device.","title":"Using the midi-io sample bundle"},{"location":"samples/midi-io/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A midi device that can be connected to your computer","title":"Prerequisites"},{"location":"samples/midi-io/#configure-the-midi-io-sample-bundle","text":"In NodeCG, create a new midi-input service instance. Enter your device information: { \"device\" : \"name\" } After entering it, click save. Note A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-input using the command npm run list . The devices should be listed with their device names and some other stuff. Under Linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Create a new midi-output service instance using the left upper menu. Set the sample's ( midi-io ) dependencies to be the newly created service instances (of type midi-input & midi-output ). Check the NodeCG logs: You should see an error or a success message and midi messages that are received and echoed back to the device that is configured. The messages are only modified, if the received Message is a Noteon with a velocity of greater than zero or a control change message with a value of at least 64. Noteoff messages are always echoed unmodified.","title":"Configure the midi-io sample bundle"},{"location":"samples/midi-io/#note","text":"A Noteon message with a velocity of 0 should be handled like a Noteoff message, so they are echoed unmodified. Otherwise, this would get annoying very fast. If a control change is assigned to the push-button values of 64 and up are interpreted as on and values lower than that are interpreted as off. Most somewhat modern Midi devices send 127 as on and 0 as off, but 63 and 64 should also be sufficient.","title":"Note"},{"location":"samples/midi-output/","text":"Using the midi-output sample bundle The midi-output example bundle in samples/midi-output demonstrates the ability to send data to a midi device. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A midi device that can be connected to your computer Configure the midi-output sample bundle In NodeCG, create a new midi-output service instance. Enter your device information: { \"device\" : \"name\" } After entering it, click save. Note A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-input using the command npm run list . The devices should be listed with their device names and some other stuff. Under Linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Set the sample's ( midi-output ) dependency to be the newly created service instance (of type midi-output ). Check the NodeCG logs: You should see an error or a success message and random midi messages should be sent to the device that is configured. The messages are only Noteon messages and have a random note and velocity value ranging 0-127. The channels they are sent from are either channel 0 or 1, but the midi protocol supports up to 16 channels, so it could technically range from 0-15. Note Only sending Noteon messages is sufficient for most midi, because most of them don't really care if you use proper Noteoff messages or simply send a Noteon with a velocity of 0. This is due to the early days of midi, when integrated circuits were expensive. Allowing a velocity of 0 as replacement for Noteoff made instruments featuring midi more affordable.","title":"Midi-Output sample"},{"location":"samples/midi-output/#using-the-midi-output-sample-bundle","text":"The midi-output example bundle in samples/midi-output demonstrates the ability to send data to a midi device.","title":"Using the midi-output sample bundle"},{"location":"samples/midi-output/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A midi device that can be connected to your computer","title":"Prerequisites"},{"location":"samples/midi-output/#configure-the-midi-output-sample-bundle","text":"In NodeCG, create a new midi-output service instance. Enter your device information: { \"device\" : \"name\" } After entering it, click save. Note A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-input using the command npm run list . The devices should be listed with their device names and some other stuff. Under Linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Set the sample's ( midi-output ) dependency to be the newly created service instance (of type midi-output ). Check the NodeCG logs: You should see an error or a success message and random midi messages should be sent to the device that is configured. The messages are only Noteon messages and have a random note and velocity value ranging 0-127. The channels they are sent from are either channel 0 or 1, but the midi protocol supports up to 16 channels, so it could technically range from 0-15.","title":"Configure the midi-output sample bundle"},{"location":"samples/midi-output/#note","text":"Only sending Noteon messages is sufficient for most midi, because most of them don't really care if you use proper Noteoff messages or simply send a Noteon with a velocity of 0. This is due to the early days of midi, when integrated circuits were expensive. Allowing a velocity of 0 as replacement for Noteoff made instruments featuring midi more affordable.","title":"Note"},{"location":"samples/mqtt-client/","text":"Using the MQTT-client sample bundle The MQTT-client sample bundle in samples/mqtt-client shows how to connect to an MQTT server. This client is based on the MQTT.js package. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: MQTT-server Configure the MQTT-client sample bundle In NodeCG, create a new mqtt-client service instance. Enter the connection parameters of the mqtt server. The URL should be in following the pattern <protocol>://<address>:<port> . Allowed protocols are: mqtt , mqtts , tcp , tls , ws , wss . In case your server needs authentication, set the username and password fields otherwise remove them from the configuration: { \"address\" : \"mqtt://localhost\" , \"topics\" : [ \"sample/topic\" , \"diffrent/topic2\" ], \"username\" : \"yourUser\" , \"password\" : \"yourPassword\" } After entering it, click save. Set the sample's ( mqtt-client ) dependency to be the newly created service instance (of type mqtt-client ). The console should display if the connection was successfully established and should show inbound messages on the subscribed topic.","title":"MQTT"},{"location":"samples/mqtt-client/#using-the-mqtt-client-sample-bundle","text":"The MQTT-client sample bundle in samples/mqtt-client shows how to connect to an MQTT server. This client is based on the MQTT.js package.","title":"Using the MQTT-client sample bundle"},{"location":"samples/mqtt-client/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: MQTT-server","title":"Prerequisites"},{"location":"samples/mqtt-client/#configure-the-mqtt-client-sample-bundle","text":"In NodeCG, create a new mqtt-client service instance. Enter the connection parameters of the mqtt server. The URL should be in following the pattern <protocol>://<address>:<port> . Allowed protocols are: mqtt , mqtts , tcp , tls , ws , wss . In case your server needs authentication, set the username and password fields otherwise remove them from the configuration: { \"address\" : \"mqtt://localhost\" , \"topics\" : [ \"sample/topic\" , \"diffrent/topic2\" ], \"username\" : \"yourUser\" , \"password\" : \"yourPassword\" } After entering it, click save. Set the sample's ( mqtt-client ) dependency to be the newly created service instance (of type mqtt-client ). The console should display if the connection was successfully established and should show inbound messages on the subscribed topic.","title":"Configure the MQTT-client sample bundle"},{"location":"samples/nanoleaf/","text":"Using the Nanoleaf sample bundle The Nanoleaf example bundle in samples/nanoleaf demonstrates the ability to control your nanoleaf lights. This example code sets all panels to an orange colour. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: IP address of your nanoleaf controller Configure the nanoleaf sample bundle In NodeCG, create a new nanoleaf service instance. Enter the IP address of your nanoleaf controller: { \"ipAddress\" : \"xxx.xxx.xxx.xxx\" } Attention Before clicking save put your nanoleaf controller into pairing mode by holding the on-off button for 5-7 seconds till the LED starts flashing. After entering your config and entering pairing mode, click save. Set the sample's ( nanoleaf ) dependency to be the newly created service instance (of type nanoleaf ). If everything worked, your nanoleafs should now shine orange. If not you should check the NodeCG logs for any errors.","title":"Nanoleaf"},{"location":"samples/nanoleaf/#using-the-nanoleaf-sample-bundle","text":"The Nanoleaf example bundle in samples/nanoleaf demonstrates the ability to control your nanoleaf lights. This example code sets all panels to an orange colour. Here is a guide to how to get it working.","title":"Using the Nanoleaf sample bundle"},{"location":"samples/nanoleaf/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: IP address of your nanoleaf controller","title":"Prerequisites"},{"location":"samples/nanoleaf/#configure-the-nanoleaf-sample-bundle","text":"In NodeCG, create a new nanoleaf service instance. Enter the IP address of your nanoleaf controller: { \"ipAddress\" : \"xxx.xxx.xxx.xxx\" } Attention Before clicking save put your nanoleaf controller into pairing mode by holding the on-off button for 5-7 seconds till the LED starts flashing. After entering your config and entering pairing mode, click save. Set the sample's ( nanoleaf ) dependency to be the newly created service instance (of type nanoleaf ). If everything worked, your nanoleafs should now shine orange. If not you should check the NodeCG logs for any errors.","title":"Configure the nanoleaf sample bundle"},{"location":"samples/obs/","text":"Using the OBS sample bundle The OBS example bundle in samples/obs-scenelist demonstrates the ability to control an OBS instance by listing all available scenes. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: OBS with obs-websocket installed Note OBS is available here and obs-websocket with install instructions is available here . Configure the OBS sample bundle In NodeCG, create a new obs service instance. Enter the configuration for obs: { \"host\" : \"localhost\" , \"port\" : 4444 , \"password\" : \"mypassword12345678\" } Info If you don't want to use a password, you can just remove the password property from the config. After entering it, click save. Set the sample's ( obs-scenelist ) dependency to be the newly created service instance (of type obs ). Check the NodeCG logs: You should see an error or a success message and the names of all you scenes that you have set in OBS.","title":"OBS"},{"location":"samples/obs/#using-the-obs-sample-bundle","text":"The OBS example bundle in samples/obs-scenelist demonstrates the ability to control an OBS instance by listing all available scenes. Here is a guide to how to get it working.","title":"Using the OBS sample bundle"},{"location":"samples/obs/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: OBS with obs-websocket installed Note OBS is available here and obs-websocket with install instructions is available here .","title":"Prerequisites"},{"location":"samples/obs/#configure-the-obs-sample-bundle","text":"In NodeCG, create a new obs service instance. Enter the configuration for obs: { \"host\" : \"localhost\" , \"port\" : 4444 , \"password\" : \"mypassword12345678\" } Info If you don't want to use a password, you can just remove the password property from the config. After entering it, click save. Set the sample's ( obs-scenelist ) dependency to be the newly created service instance (of type obs ). Check the NodeCG logs: You should see an error or a success message and the names of all you scenes that you have set in OBS.","title":"Configure the OBS sample bundle"},{"location":"samples/philipshue/","text":"Using the Philips Hue sample bundle The philipshue-lights example bundle in samples/philipshue-lights demonstrates the ability to connect to the Philips Hue bridge and control Philips Hue accessories. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Philips Hue bridge with some connected accessories Configure the Philips Hue sample bundle In NodeCG, create a new Philips Hue service instance. Enter configuration for hue. If you want the bridge to be automatically discovered just set discover to true like this: { \"discover\" : true } If you want to provide the IP address manually you can provide them like this: { \"discover\" : false , \"ipAddr\" : \"x.x.x.x\" } After entering it, press the big link button on your bridge and then click save. Info After the first time you connect to your bridge it will create a user and an API key which will be saved so that you only need to press the link button when you connect it for the first time. Set the sample's ( philipshue-lights ) dependency to be the newly created service instance (of type philipshue ). Check the NodeCG logs: You should see an error or a success message and the number of lights that the bridge knows of.","title":"Philips Hue sample"},{"location":"samples/philipshue/#using-the-philips-hue-sample-bundle","text":"The philipshue-lights example bundle in samples/philipshue-lights demonstrates the ability to connect to the Philips Hue bridge and control Philips Hue accessories.","title":"Using the Philips Hue sample bundle"},{"location":"samples/philipshue/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Philips Hue bridge with some connected accessories","title":"Prerequisites"},{"location":"samples/philipshue/#configure-the-philips-hue-sample-bundle","text":"In NodeCG, create a new Philips Hue service instance. Enter configuration for hue. If you want the bridge to be automatically discovered just set discover to true like this: { \"discover\" : true } If you want to provide the IP address manually you can provide them like this: { \"discover\" : false , \"ipAddr\" : \"x.x.x.x\" } After entering it, press the big link button on your bridge and then click save. Info After the first time you connect to your bridge it will create a user and an API key which will be saved so that you only need to press the link button when you connect it for the first time. Set the sample's ( philipshue-lights ) dependency to be the newly created service instance (of type philipshue ). Check the NodeCG logs: You should see an error or a success message and the number of lights that the bridge knows of.","title":"Configure the Philips Hue sample bundle"},{"location":"samples/rcon/","text":"Using the RCON sample bundle The RCON sample bundle in samples/rcon-minecraft shows how to send a command to a Minecraft server. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working Minecraft server. Configure the RCON sample bundle In NodeCG, create a new RCON service instance. Enter the host, port, and password of the RCON connection. This can be found in the server.properties file ( rcon.port , rcon.password ): { \"host\" : \"localhost\" , \"port\" : 25575 , \"password:\" : \"ThisIsAVeryGoodPassword\" } After entering it, click save. Set the sample's ( rcon-minecraft ) dependency to be the newly created service instance (of type rcon ). In the NodeCG console you will see a list with all online players. It will also send a /say command to the Minecraft server.","title":"Rcon sample"},{"location":"samples/rcon/#using-the-rcon-sample-bundle","text":"The RCON sample bundle in samples/rcon-minecraft shows how to send a command to a Minecraft server.","title":"Using the RCON sample bundle"},{"location":"samples/rcon/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working Minecraft server.","title":"Prerequisites"},{"location":"samples/rcon/#configure-the-rcon-sample-bundle","text":"In NodeCG, create a new RCON service instance. Enter the host, port, and password of the RCON connection. This can be found in the server.properties file ( rcon.port , rcon.password ): { \"host\" : \"localhost\" , \"port\" : 25575 , \"password:\" : \"ThisIsAVeryGoodPassword\" } After entering it, click save. Set the sample's ( rcon-minecraft ) dependency to be the newly created service instance (of type rcon ). In the NodeCG console you will see a list with all online players. It will also send a /say command to the Minecraft server.","title":"Configure the RCON sample bundle"},{"location":"samples/reddit/","text":"Using the Reddit sample bundle The reddit-message-read example bundle in samples/reddit-msg-read demonstrates the ability to read recent posts from a subreddit (in this case r/skate702 ) Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Reddit Application (Should be of type script for own purpose) Note If you don't have such an application yet, you can get one here . Configure the Reddit sample bundle In NodeCG, create a new Reddit service instance. Enter your applications ID and secret and your own username and password. The entered username and password must be for the user who registered the application: { \"clientId\" : \"Your client Id (This is displayed right below the application name)\" , \"clientSecret\" : \"Your client secret\" , \"username\" : \"Your username\" , \"password\" : \"Your password\" } After entering it, click save. Set the sample's ( reddit-msg-read ) dependency to be the newly created service instance (of type reddit ). Check the NodeCG logs: You should see the recent posts in r/skate702","title":"Reddit sample"},{"location":"samples/reddit/#using-the-reddit-sample-bundle","text":"The reddit-message-read example bundle in samples/reddit-msg-read demonstrates the ability to read recent posts from a subreddit (in this case r/skate702 )","title":"Using the Reddit sample bundle"},{"location":"samples/reddit/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Reddit Application (Should be of type script for own purpose) Note If you don't have such an application yet, you can get one here .","title":"Prerequisites"},{"location":"samples/reddit/#configure-the-reddit-sample-bundle","text":"In NodeCG, create a new Reddit service instance. Enter your applications ID and secret and your own username and password. The entered username and password must be for the user who registered the application: { \"clientId\" : \"Your client Id (This is displayed right below the application name)\" , \"clientSecret\" : \"Your client secret\" , \"username\" : \"Your username\" , \"password\" : \"Your password\" } After entering it, click save. Set the sample's ( reddit-msg-read ) dependency to be the newly created service instance (of type reddit ). Check the NodeCG logs: You should see the recent posts in r/skate702","title":"Configure the Reddit sample bundle"},{"location":"samples/sacn-receiver/","text":"Using the sACN receiver sample bundle The sacn-receiver-sample example bundle in samples/sacn-receiver-sample demonstrates the ability receive data send via sACN from e.g., professional lighting consoles. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working sACN sender in the current network Configure the sACN sample bundle In NodeCG, create a new sacn-receiver service instance. Enter the needed options: Universes The universes to use. Must be an array with numbers within 1-63999 { \"universes\" : [ 1 , 2 , 3 ] } Port Optional. The multicast port to use. All professional consoles broadcast to the default port 5568. { \"universes\" : [ 1 , 2 , 3 ], \"port\" : 5568 } Iface Optional. If the computer is connected to multiple networks, specify which network adaptor to use by using this computer's local IP address. { \"universes\" : [ 1 , 2 , 3 ], \"iface\" : \"Network Adapter\" } ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe. { \"universes\" : [ 1 , 2 , 3 ], \"reuseAddr\" : true } After entering them, click save. Set the sample's ( sacn-receiver-sample ) dependency to be the newly created service instance (of type sacn-receiver ). Check the NodeCG logs: You should see data logged.","title":"sACN Receiver sample"},{"location":"samples/sacn-receiver/#using-the-sacn-receiver-sample-bundle","text":"The sacn-receiver-sample example bundle in samples/sacn-receiver-sample demonstrates the ability receive data send via sACN from e.g., professional lighting consoles. Here is a guide to how to get it working.","title":"Using the sACN receiver sample bundle"},{"location":"samples/sacn-receiver/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working sACN sender in the current network","title":"Prerequisites"},{"location":"samples/sacn-receiver/#configure-the-sacn-sample-bundle","text":"In NodeCG, create a new sacn-receiver service instance. Enter the needed options: Universes The universes to use. Must be an array with numbers within 1-63999 { \"universes\" : [ 1 , 2 , 3 ] } Port Optional. The multicast port to use. All professional consoles broadcast to the default port 5568. { \"universes\" : [ 1 , 2 , 3 ], \"port\" : 5568 } Iface Optional. If the computer is connected to multiple networks, specify which network adaptor to use by using this computer's local IP address. { \"universes\" : [ 1 , 2 , 3 ], \"iface\" : \"Network Adapter\" } ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe. { \"universes\" : [ 1 , 2 , 3 ], \"reuseAddr\" : true } After entering them, click save. Set the sample's ( sacn-receiver-sample ) dependency to be the newly created service instance (of type sacn-receiver ). Check the NodeCG logs: You should see data logged.","title":"Configure the sACN sample bundle"},{"location":"samples/sacn-sender/","text":"Using the sACN sender sample bundle The sacn-sender example bundle in samples/sacn-sender demonstrates the ability send data via sACN to e.g., open lighting architecture or professional lighting equipment. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working sACN receiver in the current network Configure the sACN sample bundle In NodeCG, create a new sacn-sender service instance. Enter the needed options: Universes The universes to use. Must be an array with numbers within 1-63999 { \"universe\" : 1 } Port Optional. The multicast port to use. All professional consoles broadcast to the default port 5568. { \"universes\" : 1 , \"port\" : 5568 } ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe. { \"universes\" : 1 , \"reuseAddr\" : true } After entering them, click save. Set the sample's ( sacn-sender ) dependency to be the newly created service instance (of type sacn-sender ). Check the NodeCG logs: You should see data logged.","title":"sACN Sender sample"},{"location":"samples/sacn-sender/#using-the-sacn-sender-sample-bundle","text":"The sacn-sender example bundle in samples/sacn-sender demonstrates the ability send data via sACN to e.g., open lighting architecture or professional lighting equipment. Here is a guide to how to get it working.","title":"Using the sACN sender sample bundle"},{"location":"samples/sacn-sender/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working sACN receiver in the current network","title":"Prerequisites"},{"location":"samples/sacn-sender/#configure-the-sacn-sample-bundle","text":"In NodeCG, create a new sacn-sender service instance. Enter the needed options: Universes The universes to use. Must be an array with numbers within 1-63999 { \"universe\" : 1 } Port Optional. The multicast port to use. All professional consoles broadcast to the default port 5568. { \"universes\" : 1 , \"port\" : 5568 } ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe. { \"universes\" : 1 , \"reuseAddr\" : true } After entering them, click save. Set the sample's ( sacn-sender ) dependency to be the newly created service instance (of type sacn-sender ). Check the NodeCG logs: You should see data logged.","title":"Configure the sACN sample bundle"},{"location":"samples/serial/","text":"Using the serial sample bundle The serial example bundle in samples/serial demonstrates the ability to exchange data with a device that is connected via serial. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: An Arduino or any other microcontroller development board that can send and receive data via serial. Configure the serial sample bundle In NodeCG, create a new serial service instance. Enter the information of your device: { \"device\" : { \"port\" : \"COM1\" } } { \"device\" : { \"pnpId\" : \"usb-Arduino__www.arduino.cc__0043_75835343030351E0D171-if00\" } } After entering it, click save. Note If you want to list all connected devices you can open a terminal in nodecg-io-serial and run npm run list . Note: If you are using multiple devices you might want to use the pnpId , since ports can change between reboots! Set the sample's ( serial ) dependency to be the newly created service instance (of type serial ). Check the NodeCG logs: You should see an error or a success message and nodecg-io will send ping to the microcontroller every 10 seconds. The Arduino device will respond with pong. You should see the pong message displayed in the log. If you see an error or nothing at all, try making sure your microcontroller is plugged in and recognized correctly. Then restart NodeCG, so the service is cleanly restarted. Sample Arduino sketch String inputString = \"\" ; boolean stringComplete = false ; void setup () { Serial . begin ( 9600 ); } // the loop routine runs over and over again forever void loop () { while ( Serial . available ()) { char inChar = ( char ) Serial . read (); inputString += inChar ; if ( inChar == '\\n' ) { stringComplete = true ; } } if ( stringComplete ) { Serial . println ( \"pong\" ); stringComplete = false ; } delay ( 1 ); // delay in between reads for stability }","title":"Serial sample"},{"location":"samples/serial/#using-the-serial-sample-bundle","text":"The serial example bundle in samples/serial demonstrates the ability to exchange data with a device that is connected via serial. Here is a guide to how to get it working.","title":"Using the serial sample bundle"},{"location":"samples/serial/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: An Arduino or any other microcontroller development board that can send and receive data via serial.","title":"Prerequisites"},{"location":"samples/serial/#configure-the-serial-sample-bundle","text":"In NodeCG, create a new serial service instance. Enter the information of your device: { \"device\" : { \"port\" : \"COM1\" } } { \"device\" : { \"pnpId\" : \"usb-Arduino__www.arduino.cc__0043_75835343030351E0D171-if00\" } } After entering it, click save. Note If you want to list all connected devices you can open a terminal in nodecg-io-serial and run npm run list . Note: If you are using multiple devices you might want to use the pnpId , since ports can change between reboots! Set the sample's ( serial ) dependency to be the newly created service instance (of type serial ). Check the NodeCG logs: You should see an error or a success message and nodecg-io will send ping to the microcontroller every 10 seconds. The Arduino device will respond with pong. You should see the pong message displayed in the log. If you see an error or nothing at all, try making sure your microcontroller is plugged in and recognized correctly. Then restart NodeCG, so the service is cleanly restarted.","title":"Configure the serial sample bundle"},{"location":"samples/serial/#sample-arduino-sketch","text":"String inputString = \"\" ; boolean stringComplete = false ; void setup () { Serial . begin ( 9600 ); } // the loop routine runs over and over again forever void loop () { while ( Serial . available ()) { char inChar = ( char ) Serial . read (); inputString += inChar ; if ( inChar == '\\n' ) { stringComplete = true ; } } if ( stringComplete ) { Serial . println ( \"pong\" ); stringComplete = false ; } delay ( 1 ); // delay in between reads for stability }","title":"Sample Arduino sketch"},{"location":"samples/shlink/","text":"Using the Shlink sample bundle The Shlink example bundle in samples/shlink-list-short-urls demonstrates the ability to control a Shlink server by getting the amount of short URLs configured on the server. Here is a guide on how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Shlink server and valid API key / token for it Configure the Shlink sample bundle In NodeCG, create a new Shlink service instance. Enter the configuration for Shlink: { \"url\" : \"https://example.com\" , \"apiKey\" : \"1ae89449-f8d2-4b44-baf7-dd7eb0b05017\" } After entering it, click save. Set the sample's ( shlink-list-short-urls ) dependency to be the newly created service instance (of type shlink ). Check the NodeCG logs: You should see an error or a success message and the amount of configured short URLs on the Shlink server. Note When listing short URLs \u2014 like this sample does \u2014 be aware that the amount of short URLs might be limited by the API key role .","title":"Shlink sample"},{"location":"samples/shlink/#using-the-shlink-sample-bundle","text":"The Shlink example bundle in samples/shlink-list-short-urls demonstrates the ability to control a Shlink server by getting the amount of short URLs configured on the server. Here is a guide on how to get it working.","title":"Using the Shlink sample bundle"},{"location":"samples/shlink/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Shlink server and valid API key / token for it","title":"Prerequisites"},{"location":"samples/shlink/#configure-the-shlink-sample-bundle","text":"In NodeCG, create a new Shlink service instance. Enter the configuration for Shlink: { \"url\" : \"https://example.com\" , \"apiKey\" : \"1ae89449-f8d2-4b44-baf7-dd7eb0b05017\" } After entering it, click save. Set the sample's ( shlink-list-short-urls ) dependency to be the newly created service instance (of type shlink ). Check the NodeCG logs: You should see an error or a success message and the amount of configured short URLs on the Shlink server. Note When listing short URLs \u2014 like this sample does \u2014 be aware that the amount of short URLs might be limited by the API key role .","title":"Configure the Shlink sample bundle"},{"location":"samples/slack/","text":"Using the Slack sample bundle The Slack example bundle in samples/slack-post demonstrates the ability to list all channels into the console and sends a message to a channel which you have to configure to your channel ID. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: a Slack Bot token Note If you don't have such a token yet, you can create your own app with token on this page. Configure the Slack sample bundle In NodeCG, create a new slack service instance. Enter your Slack app token: { \"token\" : \"your-token-goes-here\" } After entering it, click save. Set the sample's ( slack-post ) dependency to be the newly created service instance (of type slack ). Check the NodeCG logs: You should see an error or a login message.","title":"Slack sample"},{"location":"samples/slack/#using-the-slack-sample-bundle","text":"The Slack example bundle in samples/slack-post demonstrates the ability to list all channels into the console and sends a message to a channel which you have to configure to your channel ID.","title":"Using the Slack sample bundle"},{"location":"samples/slack/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: a Slack Bot token Note If you don't have such a token yet, you can create your own app with token on this page.","title":"Prerequisites"},{"location":"samples/slack/#configure-the-slack-sample-bundle","text":"In NodeCG, create a new slack service instance. Enter your Slack app token: { \"token\" : \"your-token-goes-here\" } After entering it, click save. Set the sample's ( slack-post ) dependency to be the newly created service instance (of type slack ). Check the NodeCG logs: You should see an error or a login message.","title":"Configure the Slack sample bundle"},{"location":"samples/spotify/","text":"Using the Spotify sample bundle The spotify-current-song example bundle in samples/spotify-current-song demonstrates the ability to get the current playing song of a user. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Spotify account and a registered Spotify application and the associated client id/client secret. Note If you don't have a registered application, yet you can follow this guide . As a redirect URL use http://localhost:9090/nodecg-io-spotify/spotifycallback . Configure the Spotify sample bundle In NodeCG, create a new Spotify service instance. Enter your client ID and secret for Spotify: { \"scopes\" : [ \"user-read-playback-state\" ], \"clientId\" : \"0123456789abcdef0123456789abcdef\" , \"clientSecret\" : \"0123456789abcdef0123456789abcdef\" } After entering it, click save. Note This sample requires the user-read-playback-state scope, but you can require other scopes if you want to use functions that require them. A list of all scopes can be found here . Set the sample's ( spotify-current-song ) dependency to be the newly created service instance (of type spotify ). Check the NodeCG logs: You should see an error or a success message and the current playing song with names and artists.","title":"Spotify sample"},{"location":"samples/spotify/#using-the-spotify-sample-bundle","text":"The spotify-current-song example bundle in samples/spotify-current-song demonstrates the ability to get the current playing song of a user. Here is a guide to how to get it working.","title":"Using the Spotify sample bundle"},{"location":"samples/spotify/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Spotify account and a registered Spotify application and the associated client id/client secret. Note If you don't have a registered application, yet you can follow this guide . As a redirect URL use http://localhost:9090/nodecg-io-spotify/spotifycallback .","title":"Prerequisites"},{"location":"samples/spotify/#configure-the-spotify-sample-bundle","text":"In NodeCG, create a new Spotify service instance. Enter your client ID and secret for Spotify: { \"scopes\" : [ \"user-read-playback-state\" ], \"clientId\" : \"0123456789abcdef0123456789abcdef\" , \"clientSecret\" : \"0123456789abcdef0123456789abcdef\" } After entering it, click save. Note This sample requires the user-read-playback-state scope, but you can require other scopes if you want to use functions that require them. A list of all scopes can be found here . Set the sample's ( spotify-current-song ) dependency to be the newly created service instance (of type spotify ). Check the NodeCG logs: You should see an error or a success message and the current playing song with names and artists.","title":"Configure the Spotify sample bundle"},{"location":"samples/sql/","text":"Using the SQL sample bundle The SQL example bundle in samples/sql demonstrates the ability to access databases. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A database supported by knex Note If you don't have a database yet and just want to test things you can use sqlite3 and don't need to set up a database server. You can always move to a different database type later. Configure the SQL sample bundle In NodeCG, create a new SQL service instance. Enter your used database client and a knex connection object for SQL: { \"client\" : \"mysql\" , \"connection\" : { \"host\" : \"localhost\" , ... } } After entering it, click save. Set the sample's ( sql ) dependency to be the newly created service instance (of type sql ). Check the NodeCG logs: Your first run of the sample bundle will probably fail because your database doesn't contain the used tables. Check samples/sql/extension/index.ts and create the tables as used or create your own tables and adapt the sample accordingly. You can also use this code as a reference on how to use the SQL client to do your queries.","title":"SQL sample"},{"location":"samples/sql/#using-the-sql-sample-bundle","text":"The SQL example bundle in samples/sql demonstrates the ability to access databases. Here is a guide to how to get it working.","title":"Using the SQL sample bundle"},{"location":"samples/sql/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A database supported by knex Note If you don't have a database yet and just want to test things you can use sqlite3 and don't need to set up a database server. You can always move to a different database type later.","title":"Prerequisites"},{"location":"samples/sql/#configure-the-sql-sample-bundle","text":"In NodeCG, create a new SQL service instance. Enter your used database client and a knex connection object for SQL: { \"client\" : \"mysql\" , \"connection\" : { \"host\" : \"localhost\" , ... } } After entering it, click save. Set the sample's ( sql ) dependency to be the newly created service instance (of type sql ). Check the NodeCG logs: Your first run of the sample bundle will probably fail because your database doesn't contain the used tables. Check samples/sql/extension/index.ts and create the tables as used or create your own tables and adapt the sample accordingly. You can also use this code as a reference on how to use the SQL client to do your queries.","title":"Configure the SQL sample bundle"},{"location":"samples/streamdeck/","text":"Using the StreamDeck rainbow sample bundle The streamdeck-rainbow bundle paints your streamdeck with different colours. It is located in samples/streamdeck-rainbow . Sadly you can't access the StreamDeck while another application accesses it. So you need to stop your StreamDeck Software before. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: (If you're on Linux) Follow the instructions listed under Manual Installation here . Everything after the sudo udevadm command can be omitted. Configure the StreamDeck Rainbow bundle In NodeCG, create a new StreamDeck service instance. Enter the configuration: { \"device\" : \"default\" } Info default tells the bundle to automatically find a StreamDeck. If you use multiple StreamDecks, you need to put in an ID here. Set the sample's ( streamdeck-rainbow ) dependency to be the newly created service instance (of type streamdeck ). Watch your streamdeck.","title":"Streamdeck sample"},{"location":"samples/streamdeck/#using-the-streamdeck-rainbow-sample-bundle","text":"The streamdeck-rainbow bundle paints your streamdeck with different colours. It is located in samples/streamdeck-rainbow . Sadly you can't access the StreamDeck while another application accesses it. So you need to stop your StreamDeck Software before.","title":"Using the StreamDeck rainbow sample bundle"},{"location":"samples/streamdeck/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: (If you're on Linux) Follow the instructions listed under Manual Installation here . Everything after the sudo udevadm command can be omitted.","title":"Prerequisites"},{"location":"samples/streamdeck/#configure-the-streamdeck-rainbow-bundle","text":"In NodeCG, create a new StreamDeck service instance. Enter the configuration: { \"device\" : \"default\" } Info default tells the bundle to automatically find a StreamDeck. If you use multiple StreamDecks, you need to put in an ID here. Set the sample's ( streamdeck-rainbow ) dependency to be the newly created service instance (of type streamdeck ). Watch your streamdeck.","title":"Configure the StreamDeck Rainbow bundle"},{"location":"samples/streamelements/","text":"Using the StreamElements sample bundle The StreamElements-events example bundle in samples/streamelements-events demonstrates the ability to react to events like donations and subs. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A StreamElements account Getting JWT Token To use the StreamElements service you need a JWT Token that gives it access to your account. To get it go to https://streamelements.com/dashboard/account/channels , login, click on Show Secrets and copy it. Configure the StreamElements sample bundle In NodeCG, create a new StreamElements service instance. Enter the JWT Token for StreamElements: { \"jwtToken\" : \"<your JWT Token>\" } After entering it, click save. Set the sample's ( streamelements-events ) dependency to be the newly created service instance (of type streamelements ). Check the NodeCG logs: You should see an error or a success message and a log message for each event of your channel like subs, follows, cheers, raids and so on.","title":"StreamElements sample"},{"location":"samples/streamelements/#using-the-streamelements-sample-bundle","text":"The StreamElements-events example bundle in samples/streamelements-events demonstrates the ability to react to events like donations and subs. Here is a guide to how to get it working.","title":"Using the StreamElements sample bundle"},{"location":"samples/streamelements/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A StreamElements account","title":"Prerequisites"},{"location":"samples/streamelements/#getting-jwt-token","text":"To use the StreamElements service you need a JWT Token that gives it access to your account. To get it go to https://streamelements.com/dashboard/account/channels , login, click on Show Secrets and copy it.","title":"Getting JWT Token"},{"location":"samples/streamelements/#configure-the-streamelements-sample-bundle","text":"In NodeCG, create a new StreamElements service instance. Enter the JWT Token for StreamElements: { \"jwtToken\" : \"<your JWT Token>\" } After entering it, click save. Set the sample's ( streamelements-events ) dependency to be the newly created service instance (of type streamelements ). Check the NodeCG logs: You should see an error or a success message and a log message for each event of your channel like subs, follows, cheers, raids and so on.","title":"Configure the StreamElements sample bundle"},{"location":"samples/telegram/","text":"Using the telegram sample bundle The telegram sample bundle in samples/telegram-bot shows how to create a simple command. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A telegram-bot API token. You can create your bot here . Configure the telegram sample bundle Create a new telegram service instance. Enter the token and set polling to true: { \"token\" : \"[TOKEN]\" , \"polling\" : true } After entering it, click save. Set the sample's ( telegram-bot ) dependency to be the newly created service instance (of type telegram ). You can send /test to your bot, and it should respond with two messages.","title":"Telegram sample"},{"location":"samples/telegram/#using-the-telegram-sample-bundle","text":"The telegram sample bundle in samples/telegram-bot shows how to create a simple command.","title":"Using the telegram sample bundle"},{"location":"samples/telegram/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A telegram-bot API token. You can create your bot here .","title":"Prerequisites"},{"location":"samples/telegram/#configure-the-telegram-sample-bundle","text":"Create a new telegram service instance. Enter the token and set polling to true: { \"token\" : \"[TOKEN]\" , \"polling\" : true } After entering it, click save. Set the sample's ( telegram-bot ) dependency to be the newly created service instance (of type telegram ). You can send /test to your bot, and it should respond with two messages.","title":"Configure the telegram sample bundle"},{"location":"samples/tiane/","text":"Using the TIANE-Discord sample bundle The TIANE-Discord example bundle in samples/tiane-discord shows how to make TIANE act as a discord bot. TIANE is a German open source smart home assistant written in python. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working TIANE server installation. (No room client required) a Discord Bot token Note If you don't Discord Bot token yet, you can follow this guide. Configure the TIANE sample bundle Edit the file samples/tiane-discord/extension/index.ts . Look for this line: const discordChannel = \"\" ; // Insert channel for the discord bot here Put the channel ID of a discord channel where you want to talk to TIANE between the quotation marks. See here to find out how to get a channel ID. Run npm run build in the main nodecg-io directory. Edit the file server/TIANE_config.json on your TIANE server: { \"websocket\" : \"enabled\" , \"websocket_port\" : 19526 , \"websocket_timeout\" : 20 } Make sure websocket is either set to enabled or secure and set a port of your desire. In the NodeCG dashboard, create a new TIANE service instance. Enter address of the TIANE-Server. Enter host and port you just set in server/TIANE_config.json in this format: { \"address\" : \"127.0.0.1:19526\" } After entering it, click save. Create a new Discord service instance. Set the sample's ( tiane-discord ) dependencies to be the newly created service instances (of type tiane & discord ). Ping your discord bot in the channel you set in the first step and ask TIANE something.","title":"TIANE sample"},{"location":"samples/tiane/#using-the-tiane-discord-sample-bundle","text":"The TIANE-Discord example bundle in samples/tiane-discord shows how to make TIANE act as a discord bot. TIANE is a German open source smart home assistant written in python. Here is a guide to how to get it working.","title":"Using the TIANE-Discord sample bundle"},{"location":"samples/tiane/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A working TIANE server installation. (No room client required) a Discord Bot token Note If you don't Discord Bot token yet, you can follow this guide.","title":"Prerequisites"},{"location":"samples/tiane/#configure-the-tiane-sample-bundle","text":"Edit the file samples/tiane-discord/extension/index.ts . Look for this line: const discordChannel = \"\" ; // Insert channel for the discord bot here Put the channel ID of a discord channel where you want to talk to TIANE between the quotation marks. See here to find out how to get a channel ID. Run npm run build in the main nodecg-io directory. Edit the file server/TIANE_config.json on your TIANE server: { \"websocket\" : \"enabled\" , \"websocket_port\" : 19526 , \"websocket_timeout\" : 20 } Make sure websocket is either set to enabled or secure and set a port of your desire. In the NodeCG dashboard, create a new TIANE service instance. Enter address of the TIANE-Server. Enter host and port you just set in server/TIANE_config.json in this format: { \"address\" : \"127.0.0.1:19526\" } After entering it, click save. Create a new Discord service instance. Set the sample's ( tiane-discord ) dependencies to be the newly created service instances (of type tiane & discord ). Ping your discord bot in the channel you set in the first step and ask TIANE something.","title":"Configure the TIANE sample bundle"},{"location":"samples/twitch-addons/","text":"Using the Twitch-Addons sample bundle The Twitch-Addons example bundle in samples/twitch-addons demonstrates the ability to send requests to the APIs of BetterTTV , and FrankerFaceZ . Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Twitch oAuth-Key Note If you don't have such a key yet, you can generate it on https://twitchapps.com/tmi/ . Just log into your Twitch account and copy the token. You can also use any other token. There are no special scope requirements as the token is only used to convert channel names to IDs. Configure the Twitch-Addons sample bundle In NodeCG, create a new twitch-addons service instance. Enter your Twitch OAuth Key: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Set the sample's ( twitch-addons ) dependency to be the newly created service instance (of type twitch-addons ). Check the NodeCG logs: You should see an error or a success message and all BetterTTV and FFZ emotes from the twitch channel #derniklaas","title":"Twitch-Addons sample"},{"location":"samples/twitch-addons/#using-the-twitch-addons-sample-bundle","text":"The Twitch-Addons example bundle in samples/twitch-addons demonstrates the ability to send requests to the APIs of BetterTTV , and FrankerFaceZ .","title":"Using the Twitch-Addons sample bundle"},{"location":"samples/twitch-addons/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Twitch oAuth-Key Note If you don't have such a key yet, you can generate it on https://twitchapps.com/tmi/ . Just log into your Twitch account and copy the token. You can also use any other token. There are no special scope requirements as the token is only used to convert channel names to IDs.","title":"Prerequisites"},{"location":"samples/twitch-addons/#configure-the-twitch-addons-sample-bundle","text":"In NodeCG, create a new twitch-addons service instance. Enter your Twitch OAuth Key: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Set the sample's ( twitch-addons ) dependency to be the newly created service instance (of type twitch-addons ). Check the NodeCG logs: You should see an error or a success message and all BetterTTV and FFZ emotes from the twitch channel #derniklaas","title":"Configure the Twitch-Addons sample bundle"},{"location":"samples/twitch-api/","text":"Using the Twitch API sample bundle The twitch-api example bundle in samples/twitch-api demonstrates the ability to access the twitch API (kraken/helix). Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Twitch oAuth-Key Note If you don't have such a key yet, you can generate it on https://twitchtokengenerator.com/ , select custom scope token and select the scopes you need. For this sample you don't need any additional scopes, so you can leave everything off. Configure the Twitch API sample bundle In NodeCG, create a new twitch-api service instance. Enter your Twitch OAuth Key: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Set the sample's ( twitch-api ) dependency to be the newly created service instance (of type twitch-api ). Check the NodeCG logs: You should see an error or a success message and you current username, how many people you follow and if you are currently streaming.","title":"Twitch-Api sample"},{"location":"samples/twitch-api/#using-the-twitch-api-sample-bundle","text":"The twitch-api example bundle in samples/twitch-api demonstrates the ability to access the twitch API (kraken/helix). Here is a guide to how to get it working.","title":"Using the Twitch API sample bundle"},{"location":"samples/twitch-api/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Twitch oAuth-Key Note If you don't have such a key yet, you can generate it on https://twitchtokengenerator.com/ , select custom scope token and select the scopes you need. For this sample you don't need any additional scopes, so you can leave everything off.","title":"Prerequisites"},{"location":"samples/twitch-api/#configure-the-twitch-api-sample-bundle","text":"In NodeCG, create a new twitch-api service instance. Enter your Twitch OAuth Key: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Set the sample's ( twitch-api ) dependency to be the newly created service instance (of type twitch-api ). Check the NodeCG logs: You should see an error or a success message and you current username, how many people you follow and if you are currently streaming.","title":"Configure the Twitch API sample bundle"},{"location":"samples/twitch-chat/","text":"Using the Twitch sample bundle The Twitch-chat example bundle in samples/twitch-chat demonstrates the ability to get access to a twitch chat and printing all messages of it. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: a Twitch oAuth-Key Note If you don't have such a key yet, you can generate it on https://twitchapps.com/tmi/ . Just log into your Twitch account and copy the token. Configure the Twitch sample bundle In NodeCG, create a new twitch-chat service instance. Enter your Twitch OAuth Key: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Set the sample's ( twitch-chat ) dependency to be the newly created service instance (of type twitch-chat ). Check the NodeCG logs: You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/twitch-chat/extension/index.ts .","title":"Twitch-Chat sample"},{"location":"samples/twitch-chat/#using-the-twitch-sample-bundle","text":"The Twitch-chat example bundle in samples/twitch-chat demonstrates the ability to get access to a twitch chat and printing all messages of it. Here is a guide to how to get it working.","title":"Using the Twitch sample bundle"},{"location":"samples/twitch-chat/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: a Twitch oAuth-Key Note If you don't have such a key yet, you can generate it on https://twitchapps.com/tmi/ . Just log into your Twitch account and copy the token.","title":"Prerequisites"},{"location":"samples/twitch-chat/#configure-the-twitch-sample-bundle","text":"In NodeCG, create a new twitch-chat service instance. Enter your Twitch OAuth Key: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Set the sample's ( twitch-chat ) dependency to be the newly created service instance (of type twitch-chat ). Check the NodeCG logs: You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/twitch-chat/extension/index.ts .","title":"Configure the Twitch sample bundle"},{"location":"samples/twitch-pubsub/","text":"Using the Twitch PubSub sample bundle The twitch-pubsub example bundle in samples/twitch-pubsub demonstrates the ability to use the Twitch PubSub API. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Twitch oAuth-Key Note If you don't have such a key yet, you can generate it on https://twitchtokengenerator.com/ , select custom scope token and select these scopes: channel_subscriptions , bits:read and channel:read:redemptions Configure the Twitch PubSub sample bundle In NodeCG, create a new twitch-pubsub service instance. Enter your Twitch OAuth Key: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Set the sample's ( twitch-pubsub ) dependency to be the newly created service instance (of type twitch-pubsub ). Check the NodeCG logs: You should see an error or a success message and a log entry for each subscription, bits, bits badge unlock and channel point redemption event.","title":"Twitch-Pubsub sample"},{"location":"samples/twitch-pubsub/#using-the-twitch-pubsub-sample-bundle","text":"The twitch-pubsub example bundle in samples/twitch-pubsub demonstrates the ability to use the Twitch PubSub API. Here is a guide to how to get it working.","title":"Using the Twitch PubSub sample bundle"},{"location":"samples/twitch-pubsub/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: A Twitch oAuth-Key Note If you don't have such a key yet, you can generate it on https://twitchtokengenerator.com/ , select custom scope token and select these scopes: channel_subscriptions , bits:read and channel:read:redemptions","title":"Prerequisites"},{"location":"samples/twitch-pubsub/#configure-the-twitch-pubsub-sample-bundle","text":"In NodeCG, create a new twitch-pubsub service instance. Enter your Twitch OAuth Key: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Set the sample's ( twitch-pubsub ) dependency to be the newly created service instance (of type twitch-pubsub ). Check the NodeCG logs: You should see an error or a success message and a log entry for each subscription, bits, bits badge unlock and channel point redemption event.","title":"Configure the Twitch PubSub sample bundle"},{"location":"samples/twitter/","text":"Using the twitter sample bundle The Twitter timeline bundle retrieves some of the latest tweets from skate702 and printing them to your console. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: An app and their following keys and tokens The API key here oauthConsumerKey The API secret key here oauthConsumerSecret The Access token here oauthToken The Access token secret here oauthTokenSecret Note You will need a Twitter developer account ( https://developer.twitter.com/en/apply-for-access ) to get the necessary keys and tokens. Configure the sample bundle In NodeCG, create a new twitter service instance. Enter your Twitter keys and tokens: { \"oauthConsumerKey\" : \"<API key>\" , \"oauthConsumerSecret\" : \"<API secret key>\" , \"oauthToken\" : \"<Access token>\" , \"oauthTokenSecret\" : \"<Access token secret>\" } After entering it, click save. Set the sample's ( twitter-timeline ) dependency to be the newly created service instance (of type twitter ). Check the NodeCG logs: You should see an error or a success message and up to 50 Twitter messages tweeted by the user that is hardcoded in samples/twitter-timeline/extension/index.ts as screen_name . Need to know for creating your own twitter bundle A little description of the twitter client and it's usage The client implements the different API endpoints with two functions client . get ( \"<get endpoint name>\" , params , callback ) client . post ( \"<post endpoint name>\" , params , callback ) // Instead of callbacks it can be used with promises client . get ( \"statuses/user_timeline\" , { screen_name : \"skate702\" }) . then (( tweets ) => /* Do something with the tweets */ ) . catch (( error ) => /* Handle error */ ); // Or async and await as well try { const tweets = await client . get ( \"statuses/user_timeline\" , { screen_name : \"skate702\" }); // Do something with the tweets } catch ( error ) { // Handle error } A more precise description of what can be done with this twitter client can be found here","title":"Twitter sample"},{"location":"samples/twitter/#using-the-twitter-sample-bundle","text":"The Twitter timeline bundle retrieves some of the latest tweets from skate702 and printing them to your console.","title":"Using the twitter sample bundle"},{"location":"samples/twitter/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: An app and their following keys and tokens The API key here oauthConsumerKey The API secret key here oauthConsumerSecret The Access token here oauthToken The Access token secret here oauthTokenSecret Note You will need a Twitter developer account ( https://developer.twitter.com/en/apply-for-access ) to get the necessary keys and tokens.","title":"Prerequisites"},{"location":"samples/twitter/#configure-the-sample-bundle","text":"In NodeCG, create a new twitter service instance. Enter your Twitter keys and tokens: { \"oauthConsumerKey\" : \"<API key>\" , \"oauthConsumerSecret\" : \"<API secret key>\" , \"oauthToken\" : \"<Access token>\" , \"oauthTokenSecret\" : \"<Access token secret>\" } After entering it, click save. Set the sample's ( twitter-timeline ) dependency to be the newly created service instance (of type twitter ). Check the NodeCG logs: You should see an error or a success message and up to 50 Twitter messages tweeted by the user that is hardcoded in samples/twitter-timeline/extension/index.ts as screen_name .","title":"Configure the sample bundle"},{"location":"samples/twitter/#need-to-know-for-creating-your-own-twitter-bundle","text":"","title":"Need to know for creating your own twitter bundle"},{"location":"samples/twitter/#a-little-description-of-the-twitter-client-and-its-usage","text":"The client implements the different API endpoints with two functions client . get ( \"<get endpoint name>\" , params , callback ) client . post ( \"<post endpoint name>\" , params , callback ) // Instead of callbacks it can be used with promises client . get ( \"statuses/user_timeline\" , { screen_name : \"skate702\" }) . then (( tweets ) => /* Do something with the tweets */ ) . catch (( error ) => /* Handle error */ ); // Or async and await as well try { const tweets = await client . get ( \"statuses/user_timeline\" , { screen_name : \"skate702\" }); // Do something with the tweets } catch ( error ) { // Handle error }","title":"A little description of the twitter client and it's usage"},{"location":"samples/twitter/#a-more-precise-description-of-what-can-be-done-with-this-twitter-client-can-be-found-here","text":"","title":"A more precise description of what can be done with this twitter client can be found here"},{"location":"samples/websocket-client/","text":"Using the WebSocket-client sample bundle The WebSocket-client sample bundle in samples/websocket-client shows how to set up a simple WebSocket client that will ping a server every second. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. For simplicity's sake this sample will rely upon the websocket-server sample. Configure the WebSocket-client sample bundle Please set up the WebSocket-server bundle first and then follow these steps: In NodeCG, create a new ws-client service instance. Enter the address of the sample server. This has to be a URL following the pattern ws://localhost:<port> . { \"address\" : \"ws://localhost:7777\" } After entering it, click save. Set the sample's ( websocket-client ) dependency to be the newly created service instance (of type websocket-client ). A websocket-client has been connected and the console should display if a ping is sent or a pong is received.","title":"Client sample"},{"location":"samples/websocket-client/#using-the-websocket-client-sample-bundle","text":"The WebSocket-client sample bundle in samples/websocket-client shows how to set up a simple WebSocket client that will ping a server every second.","title":"Using the WebSocket-client sample bundle"},{"location":"samples/websocket-client/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. For simplicity's sake this sample will rely upon the websocket-server sample.","title":"Prerequisites"},{"location":"samples/websocket-client/#configure-the-websocket-client-sample-bundle","text":"Please set up the WebSocket-server bundle first and then follow these steps: In NodeCG, create a new ws-client service instance. Enter the address of the sample server. This has to be a URL following the pattern ws://localhost:<port> . { \"address\" : \"ws://localhost:7777\" } After entering it, click save. Set the sample's ( websocket-client ) dependency to be the newly created service instance (of type websocket-client ). A websocket-client has been connected and the console should display if a ping is sent or a pong is received.","title":"Configure the WebSocket-client sample bundle"},{"location":"samples/websocket-server/","text":"Using the WebSocket Server sample bundle The WebSocket-server sample bundle in samples/websocket-server shows how to set up a simple WebSocket server that will relay all incoming messages to all connected clients. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. Configure the websocket-server sample bundle In NodeCG, create a new ws-server service instance. Enter a port for the server. This has to be a number from 0 to 65535: { \"port\" : 7777 } After entering it, click save. Set the sample's ( websocket-server ) dependency to be the newly created service instance (of type websocket-server ). A websocket-server has been started at the specified port.","title":"Server sample"},{"location":"samples/websocket-server/#using-the-websocket-server-sample-bundle","text":"The WebSocket-server sample bundle in samples/websocket-server shows how to set up a simple WebSocket server that will relay all incoming messages to all connected clients.","title":"Using the WebSocket Server sample bundle"},{"location":"samples/websocket-server/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI.","title":"Prerequisites"},{"location":"samples/websocket-server/#configure-the-websocket-server-sample-bundle","text":"In NodeCG, create a new ws-server service instance. Enter a port for the server. This has to be a number from 0 to 65535: { \"port\" : 7777 } After entering it, click save. Set the sample's ( websocket-server ) dependency to be the newly created service instance (of type websocket-server ). A websocket-server has been started at the specified port.","title":"Configure the websocket-server sample bundle"},{"location":"samples/xdotool/","text":"Using the Xdotool sample bundle The Xdotool sample bundle in samples/xdotool-windowminimize shows how to use the xdotool service to execute xdotool commands by minimizing the currently active window. Attention Only works on Linux Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. Xdotool installed Configure the Xdotool sample bundle In NodeCG, create a new xdotool service instance. Enter settings port -1 tells nodecg-io to use a locally installed xdotool: { \"host\" : \"127.0.0.1\" , \"port\" : -1 } After entering it, click save. Set the sample's ( xdotool-windowminimize ) dependency to be the newly created service instance (of type xdotool ). Your browser window should get minimized.","title":"Xdotool sample"},{"location":"samples/xdotool/#using-the-xdotool-sample-bundle","text":"The Xdotool sample bundle in samples/xdotool-windowminimize shows how to use the xdotool service to execute xdotool commands by minimizing the currently active window. Attention Only works on Linux","title":"Using the Xdotool sample bundle"},{"location":"samples/xdotool/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. Xdotool installed","title":"Prerequisites"},{"location":"samples/xdotool/#configure-the-xdotool-sample-bundle","text":"In NodeCG, create a new xdotool service instance. Enter settings port -1 tells nodecg-io to use a locally installed xdotool: { \"host\" : \"127.0.0.1\" , \"port\" : -1 } After entering it, click save. Set the sample's ( xdotool-windowminimize ) dependency to be the newly created service instance (of type xdotool ). Your browser window should get minimized.","title":"Configure the Xdotool sample bundle"},{"location":"samples/youtube/","text":"Using the YouTube sample bundle The YouTube bundle in samples/youtube-playlist demonstrates the ability of getting information of a playlist. Here is a guide to how to get it working. Prerequisites You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Google cloud API OAuth access (client ID, client Secret) Grant YouTube Data API v3 access at the project's dashboard. Shortcut URL: https://console.developers.google.com/apis/library/youtube.googleapis.com?project=<project-id> . Note If you don't have such a key yet, you can generate them like this . As redirect URI add: http://localhost:9090/nodecg-io-googleapis/oauth2callback Configure the YouTube sample bundle In NodeCG, create a new googleapis service instance. Enter your YouTube OAuth credentials: { \"clientID\" : \"<clientID>\" , \"clientSecret\" : \"<clientSecret>\" , \"scopes\" : [ \"https://www.googleapis.com/auth/youtube\" ] } After entering it, click save. Note You can add multiple scopes if the googleapis instance is used for multiple bundles. Set the sample's ( youtube-playlist ) dependency to be the newly created service instance (of type googleapis ). Check the NodeCG logs: You should see an error or a success message that is hardcoded in samples/youtube-playlist/extension/index.ts .","title":"Youtube sample"},{"location":"samples/youtube/#using-the-youtube-sample-bundle","text":"The YouTube bundle in samples/youtube-playlist demonstrates the ability of getting information of a playlist. Here is a guide to how to get it working.","title":"Using the YouTube sample bundle"},{"location":"samples/youtube/#prerequisites","text":"You will need a working nodecg-io installation. If you have non yet take a look at installation guide . You may need to install this bundle, so take a look at the \u201cTry an included sample\u201d -Guide. It will also tell you how to log in and how to use the GUI. You also need: Google cloud API OAuth access (client ID, client Secret) Grant YouTube Data API v3 access at the project's dashboard. Shortcut URL: https://console.developers.google.com/apis/library/youtube.googleapis.com?project=<project-id> . Note If you don't have such a key yet, you can generate them like this . As redirect URI add: http://localhost:9090/nodecg-io-googleapis/oauth2callback","title":"Prerequisites"},{"location":"samples/youtube/#configure-the-youtube-sample-bundle","text":"In NodeCG, create a new googleapis service instance. Enter your YouTube OAuth credentials: { \"clientID\" : \"<clientID>\" , \"clientSecret\" : \"<clientSecret>\" , \"scopes\" : [ \"https://www.googleapis.com/auth/youtube\" ] } After entering it, click save. Note You can add multiple scopes if the googleapis instance is used for multiple bundles. Set the sample's ( youtube-playlist ) dependency to be the newly created service instance (of type googleapis ). Check the NodeCG logs: You should see an error or a success message that is hardcoded in samples/youtube-playlist/extension/index.ts .","title":"Configure the YouTube sample bundle"}]}